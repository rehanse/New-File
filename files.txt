import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';
import { CoverComponent } from './cover.component';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { of, throwError } from 'rxjs';

describe('CoverComponent', () => {
  let component: CoverComponent;
  let fixture: ComponentFixture<CoverComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;

  beforeEach(async () => {
    mockReToolService = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getOccupancyType']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['emit', 'on', 'showErrorMessage']);

    await TestBed.configureTestingModule({
      declarations: [CoverComponent],
      imports: [ReactiveFormsModule],
      providers: [
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService },
        FormBuilder,
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(CoverComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  // Test public methods
  describe('Public Methods', () => {
    it('should initialize the form and call loadOccupancyGroups on ngOnInit', () => {
      spyOn(component, 'loadOccupancyGroups');
      spyOn(component, 'initializeForm');
      component.ngOnInit();
      expect(component.loadOccupancyGroups).toHaveBeenCalled();
      expect(component.initializeForm).toHaveBeenCalled();
      expect(mockReToolTabService.emit).toHaveBeenCalledWith('onFormComponentInit', { encodedTabIndex: jasmine.any(Number) });
    });

    it('should update form and emit event on onSubmit with valid data', () => {
      spyOn(component, 'updateCoverOccupancyData');
      component.coverForm.get('ReportedBuildingValue')?.setValue('1000');
      component.onSubmit();
      expect(component.updateCoverOccupancyData).toHaveBeenCalled();
      expect(mockReToolTabService.emit).toHaveBeenCalledWith('onSaveFormData', jasmine.any(Object));
    });

    it('should show error message on onSubmit with invalid data', () => {
      component.coverForm.get('ReportedBuildingValue')?.setValue('');
      component.onSubmit();
      expect(mockReToolTabService.showErrorMessage).toHaveBeenCalled();
    });

    it('should load occupancy groups on loadOccupancyGroups', () => {
      const mockResponse = {
        occupancyGroups: [{ id: 1, name: 'Group A' }],
        hazard: [],
        equipmentBreakdown: [],
      };
      mockReToolService.getOccupancyGroup.and.returnValue(of(mockResponse));
      component.loadOccupancyGroups();
      expect(component.OccupancyGroupData).toEqual(mockResponse.occupancyGroups);
    });
  });

  // Test private methods directly
  describe('Private Methods', () => {
    it('should calculate totalReportedTIV correctly', () => {
      const form = component.fb.group({
        ReportedTotalPD: ['100'],
        ReportedTotalBivalue: ['200'],
        ReportedTIV: [''],
      });
      component['totalReportedTIV'](form);
      expect(form.get('ReportedTIV')?.value).toBe('300');
    });

    it('should calculate reviewed percentages correctly for building', () => {
      const form = component.fb.group({
        ReviewedBuilding: ['100'],
        ReportedBuildingValue: ['200'],
        ReviewedPercentageBuilding: [''],
      });
      component['calculatedPercentageReviewedBuilding'](form);
      expect(form.get('ReviewedPercentageBuilding')?.value).toBe('50.0%');
    });

    it('should calculate percentages for total TIV correctly', () => {
      const form = component.fb.group({
        ReviewedTIV: ['300'],
        ReportedTIV: ['600'],
        ReviewedPercentageTIV: [''],
      });
      component['calculatedPercentageReviewedTIV'](form);
      expect(form.get('ReviewedPercentageTIV')?.value).toBe('50.0%');
    });

    it('should set recommended review frequency based on hazard value', () => {
      const form = component.fb.group({
        OccupancyHighestHazardReview: ['3'], // High Hazard
        RecommendedReviewFrequency: [''],
        RecommendedAccountPercentageTIV: [''],
      });
      component['setRecommendedReviewFrequency'](form);
      expect(form.get('RecommendedReviewFrequency')?.value).toBe('12 months');
      expect(form.get('RecommendedAccountPercentageTIV')?.value).toBe('40%');
    });

    it('should serialize occupancy values correctly', () => {
      const occupancyData = {
        occupancyGroupTIV: 'GroupA',
        occupancyTypeTIV: 'TypeB',
        hazardTIV: 'HazardC',
        equipmentBreakdownTIV: 'BreakdownD',
        isHazardTIVUpdated: true,
      };
      component.occupancyData = occupancyData as any;
      const serialized = component['getOccupancyValuesSerialize'](occupancyData);
      expect(serialized).toBe(JSON.stringify(occupancyData));
    });

    it('should deserialize occupancy values correctly', () => {
      const serialized = '{"occupancyGroupTIV":"GroupA","occupancyTypeTIV":"TypeB"}';
      const deserialized = component['getOccupancyValuesDeserialize'](serialized);
      expect(deserialized.occupancyGroupTIV).toBe('GroupA');
      expect(deserialized.occupancyTypeTIV).toBe('TypeB');
    });

    it('should calculate reported total PD', () => {
      const form = component.fb.group({
        ReportedBuildingValue: ['100'],
        ReportedContentsValue: ['200'],
        ReportedTotalPD: [''],
      });
      component['totalReportedTotalPD'](form);
      expect(form.get('ReportedTotalPD')?.value).toBe('300');
    });

    it('should update highlight status correctly', () => {
      const form = component.fb.group({
        HazardTIV: [''],
        IsHazardTIVUpdated: [false],
      });
      const rowValuesMap = new Map<number, any>();
      rowValuesMap.set(0, { OccupancyTypeList: [{ value: 'Type1', dependentValue: { hazard: 'Hazard1' } }] });
      component.rowValuesMap = rowValuesMap;
      component['updateHighlight'](0, 'Type1', 'IsHazardTIVUpdated', 'HazardTIV');
      expect(form.get('IsHazardTIVUpdated')?.value).toBe(true);
    });
  });

  // Test lifecycle hooks
  describe('Lifecycle Hooks', () => {
    it('should unsubscribe from subscriptions on ngOnDestroy', () => {
      const unsubscribeSpy = spyOn(component.subscription, 'unsubscribe');
      component.ngOnDestroy();
      expect(unsubscribeSpy).toHaveBeenCalled();
    });
  });

  afterEach(() => {
    fixture.destroy();
  });
});
