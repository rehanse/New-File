import { ComponentFixture, TestBed } from '@angular/core/testing';
import { GeneralPropertyComponent } from './general-property.component';
import { MatDialog } from '@angular/material/dialog';
import { FormBuilder } from '@angular/forms';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { CommonService } from '../../../../../shared/services/common.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';

describe('GeneralPropertyComponent', () => {
  let component: GeneralPropertyComponent;
  let fixture: ComponentFixture<GeneralPropertyComponent>;
  let dialogSpy: jasmine.SpyObj<MatDialog>;
  let reToolServiceSpy: jasmine.SpyObj<ReToolService>;
  let reToolTabServiceSpy: jasmine.SpyObj<ReToolTabService>;
  let calculationServiceSpy: jasmine.SpyObj<ReToolCalculationService>;
  let commonServiceSpy: jasmine.SpyObj<CommonService>;

  beforeEach(async () => {
    dialogSpy = jasmine.createSpyObj('MatDialog', ['open']);
    reToolServiceSpy = jasmine.createSpyObj('ReToolService', ['getPropertyMaster']);
    reToolTabServiceSpy = jasmine.createSpyObj('ReToolTabService', ['emit', 'on']);
    calculationServiceSpy = jasmine.createSpyObj('ReToolCalculationService', ['calculate']);
    commonServiceSpy = jasmine.createSpyObj('CommonService', ['getDateByTimeZone']);

    await TestBed.configureTestingModule({
      declarations: [GeneralPropertyComponent],
      providers: [
        FormBuilder,
        { provide: MatDialog, useValue: dialogSpy },
        { provide: ReToolService, useValue: reToolServiceSpy },
        { provide: ReToolTabService, useValue: reToolTabServiceSpy },
        { provide: ReToolCalculationService, useValue: calculationServiceSpy },
        { provide: CommonService, useValue: commonServiceSpy },
      ],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(GeneralPropertyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should open popup on cell click', () => {
    spyOn(component, 'openDialog');
    const event = new MouseEvent('click');
    const element = { value: 'TestValue' };
    component.openPopupOnCellClick(event, element, 'TestColumn');
    expect(component.openDialog).toHaveBeenCalled();
  });

  it('should open dialog', () => {
    component.openDialog({ columnName: 'TestColumn', value: 'TestValue' });
    expect(dialogSpy.open).toHaveBeenCalled();
  });

  it('should validate rating', () => {
    expect(component.isValidRating('Valid')).toBeTrue();
    expect(component.isValidRating(null)).toBeFalse();
    expect(component.isValidRating('NA')).toBeFalse();
  });

  it('should handle blur event correctly', () => {
    const event = { target: { value: '2.5' } } as any;
    component.handleBlur(event, 0);
    expect(event.target.value).toBe('2.5');
  });

  it('should update drop down selection', () => {
    spyOn(component, 'calculatePdIndexValue');
    component.updateDropDownSelection(0, 'TestKey', 5);
    expect(component.calculatePdIndexValue).toHaveBeenCalled();
  });

  it('should call private method getGidRowRecordDetail', () => {
    const result = component['getGidRowRecordDetail']('row-1_id-2_TestColumn_popup');
    expect(result.rowIndex).toBe(1);
    expect(result.rowPKId).toBe(2);
    expect(result.columnName).toBe('TestColumn');
  });

  it('should call private method setValidatorBasedOnConfidenceIndexSelected', () => {
    component['setValidatorBasedOnConfidenceIndexSelected']();
    expect(component.isConfidenceIndexSelect).toBeDefined();
  });

  it('should call private method getDeserializeRiskFactor', () => {
    const result = component['getDeserializeRiskFactor']('{}');
    expect(result).toBeDefined();
  });

  it('should call private method getSerializeRiskFactorFactors', () => {
    const result = component['getSerializeRiskFactorFactors']({});
    expect(result).toBeDefined();
  });

  it('should call private method calculateTotalPd', () => {
    const row = component['getFormGroup'](0);
    component['calculateTotalPd'](row);
    expect(row.get('TotalPD').value).toBeDefined();
  });

  it('should clean up subscriptions on destroy', () => {
    spyOn(component['subscription'], 'unsubscribe');
    component.ngOnDestroy();
    expect(component['subscription'].unsubscribe).toHaveBeenCalled();
  });

  afterEach(() => {
    fixture.destroy();
  });
});




--------------------------

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { GeneralPropertyComponent } from './general-property.component';
import { MatDialog } from '@angular/material/dialog';
import { FormBuilder } from '@angular/forms';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { CommonService } from '../../../../../shared/services/common.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';

describe('GeneralPropertyComponent', () => {
  let component: GeneralPropertyComponent;
  let fixture: ComponentFixture<GeneralPropertyComponent>;
  let dialogSpy: jasmine.SpyObj<MatDialog>;
  let reToolServiceSpy: jasmine.SpyObj<ReToolService>;
  let reToolTabServiceSpy: jasmine.SpyObj<ReToolTabService>;
  let calculationServiceSpy: jasmine.SpyObj<ReToolCalculationService>;
  let commonServiceSpy: jasmine.SpyObj<CommonService>;

  beforeEach(async () => {
    dialogSpy = jasmine.createSpyObj('MatDialog', ['open']);
    reToolServiceSpy = jasmine.createSpyObj('ReToolService', ['getPropertyMaster']);
    reToolTabServiceSpy = jasmine.createSpyObj('ReToolTabService', ['emit', 'on']);
    calculationServiceSpy = jasmine.createSpyObj('ReToolCalculationService', ['calculate']);
    commonServiceSpy = jasmine.createSpyObj('CommonService', ['getDateByTimeZone']);

    await TestBed.configureTestingModule({
      declarations: [GeneralPropertyComponent],
      providers: [
        FormBuilder,
        { provide: MatDialog, useValue: dialogSpy },
        { provide: ReToolService, useValue: reToolServiceSpy },
        { provide: ReToolTabService, useValue: reToolTabServiceSpy },
        { provide: ReToolCalculationService, useValue: calculationServiceSpy },
        { provide: CommonService, useValue: commonServiceSpy },
      ],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(GeneralPropertyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should open popup on cell click', () => {
    spyOn(component, 'openDialog');
    const event = new MouseEvent('click');
    const element = { value: 'TestValue' };
    component.openPopupOnCellClick(event, element, 'TestColumn');
    expect(component.openDialog).toHaveBeenCalled();
  });

  it('should validate rating', () => {
    expect(component.isValidRating('Valid')).toBeTrue();
    expect(component.isValidRating(null)).toBeFalse();
    expect(component.isValidRating('NA')).toBeFalse();
  });

  it('should handle blur event correctly', () => {
    const event = { target: { value: '2.5' } } as any;
    component.handleBlur(event, 0);
    expect(event.target.value).toBe('2.5');
  });

  it('should update drop down selection', () => {
    spyOn(component, 'calculatePdIndexValue');
    component.updateDropDownSelection(0, 'TestKey', 5);
    expect(component.calculatePdIndexValue).toHaveBeenCalled();
  });

  it('should call getGidRowRecordDetail', () => {
    const result = component['getGidRowRecordDetail']('row-1_id-2_TestColumn_popup');
    expect(result.rowIndex).toBe(1);
    expect(result.rowPKId).toBe(2);
    expect(result.columnName).toBe('TestColumn');
  });

  it('should update patch row from comment popup', () => {
    const row = { controls: { TestColumn: { value: '' }, Action: { value: '' } } };
    const result = { gridRecordDetail: { columnName: 'TestColumn' }, data: { Description: 'Updated Comment' } };
    component.updatePatchRowFromCommentPopup(row, result, 'Updated Comment');
    expect(row.controls.TestColumn.value).toBe('Updated Comment');
  });

  afterEach(() => {
    fixture.destroy();
  });
});
------------------------------------------------

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { GeneralPropertyComponent } from './general-property.component';
import { MatDialog } from '@angular/material/dialog';
import { FormBuilder, FormGroup, FormControl } from '@angular/forms';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { CommonService } from '../../../../../shared/services/common.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';
import { RiskFactor } from '../../../models/risk-factor';
import { Utility } from '../../../utility/mapper-util';

describe('GeneralPropertyComponent', () => {
  let component: GeneralPropertyComponent;
  let fixture: ComponentFixture<GeneralPropertyComponent>;
  let dialogSpy: jasmine.SpyObj<MatDialog>;
  let reToolServiceSpy: jasmine.SpyObj<ReToolService>;
  let reToolTabServiceSpy: jasmine.SpyObj<ReToolTabService>;
  let calculationServiceSpy: jasmine.SpyObj<ReToolCalculationService>;
  let commonServiceSpy: jasmine.SpyObj<CommonService>;

  beforeEach(async () => {
    dialogSpy = jasmine.createSpyObj('MatDialog', ['open']);
    reToolServiceSpy = jasmine.createSpyObj('ReToolService', ['getPropertyMaster']);
    reToolTabServiceSpy = jasmine.createSpyObj('ReToolTabService', ['emit', 'on']);
    calculationServiceSpy = jasmine.createSpyObj('ReToolCalculationService', ['calculate']);
    commonServiceSpy = jasmine.createSpyObj('CommonService', ['getDateByTimeZone']);

    await TestBed.configureTestingModule({
      declarations: [GeneralPropertyComponent],
      providers: [
        FormBuilder,
        { provide: MatDialog, useValue: dialogSpy },
        { provide: ReToolService, useValue: reToolServiceSpy },
        { provide: ReToolTabService, useValue: reToolTabServiceSpy },
        { provide: ReToolCalculationService, useValue: calculationServiceSpy },
        { provide: CommonService, useValue: commonServiceSpy },
      ],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(GeneralPropertyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should get weight distribution code', () => {
    const mockRow = new FormGroup({
      OccupancyTypeCode: new FormControl(5),
      OccupancyGroupCode: new FormControl(10)
    });
    spyOn(Utility, 'isValidOccupancyTypeCode').and.returnValue(true);
    const result = component['getWeightDistributionCode'](mockRow);
    expect(result).toBe(5);
  });

  it('should return occupancy group code if type code is invalid', () => {
    const mockRow = new FormGroup({
      OccupancyTypeCode: new FormControl(null),
      OccupancyGroupCode: new FormControl(10)
    });
    spyOn(Utility, 'isValidOccupancyTypeCode').and.returnValue(false);
    const result = component['getWeightDistributionCode'](mockRow);
    expect(result).toBe(10);
  });

  it('should return null if row value is empty', () => {
    const mockRow = new FormGroup({});
    const result = component['getWeightDistributionCode'](mockRow);
    expect(result).toBeNull();
  });

  it('should build redistributed weight data', () => {
    const mockData = [];
    component['buildRedistributedWeightData'](mockData);
    expect(component['redistributionWeights']).toBeDefined();
  });

  it('should get general property weight', () => {
    const mockData = [];
    spyOn(component as any, 'getGeneralPropertyWeight').and.callThrough();
    component['getGeneralPropertyWeight'](mockData);
    expect(component['weights']).toBeNull();
  });

  it('should get general property weight', () => {
    const mockData = [
      { OccupancyTypeCode: 5, OccupancyGroupCode: 10 },
      { OccupancyTypeCode: 3, OccupancyGroupCode: 7 }
    ];
    spyOn(Utility, 'isValidOccupancyTypeCode').and.callFake(code => code === 5);
    const mockResponse = [{ weight: 50 }, { weight: 30 }];
    reToolServiceSpy.getGeneralPropertyWeight.and.returnValue(of(mockResponse));
    spyOn(component as any, 'buildRedistributedWeightData');
    spyOn(calculationServiceSpy, 'setRedistributionWeights').and.callThrough();

    component['getGeneralPropertyWeight'](mockData as any);

    expect(reToolServiceSpy.getGeneralPropertyWeight).toHaveBeenCalledWith([5, 7]);
    expect(component['weights']).toEqual(mockResponse);
    expect(component['buildRedistributedWeightData']).toHaveBeenCalledWith(mockData);
    expect(calculationServiceSpy.setRedistributionWeights).toHaveBeenCalledWith(component['redistributionWeights']);
    expect(calculationServiceSpy.calculate).toHaveBeenCalled();
  });

  it('should enable PD Index Adjusted By', () => {
    const row = new FormGroup({});
    component['enablePDIndexAdjustedBy'](row);
    expect(row.controls['PropertyDamageIndexAdjusted']).toBeDefined();
  });

  it('should get property damage index display value', () => {
    const row = new FormGroup({});
    component['getPropertyDamageIndexDisplayValue'](row);
    expect(row.get('PropertyDamageIndexUpdated')).toBeDefined();
  });

  it('should set previous property damage index value', () => {
    const row = new FormGroup({});
    component['setPreviousPropertyDamageIndexValue'](row);
    expect(row.get('PropertyDamageIndexPrevious')).toBeDefined();
  });

  it('should disable PD Index Adjust By based on PD Index value', () => {
    component['disablePDIndexAdjustByBasedOnPDIndexValue']();
    expect(component.getFormArray()).toBeDefined();
  });

  it('should set property damage index display value', () => {
    const row = new FormGroup({});
    component['setPropertyDamageIndexDisplayValue'](row);
    expect(row.get('PropertyDamageIndexUpdated')).toBeDefined();
  });

it('should enable PD Index Adjusted By', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('10.0'),
      PropertyDamageIndexAdjusted: new FormControl('')
    });
    spyOn(row.controls['PropertyDamageIndexCalculated'], 'valueChanges').and.returnValue(of('5.0'));
    spyOn(component as any, 'setPropertyDamageIndexDisplayValue');

    component['enablePDIndexAdjustedBy'](row);

    row.controls['PropertyDamageIndexCalculated'].setValue('5.0');
    expect(component['setPropertyDamageIndexDisplayValue']).toHaveBeenCalledWith(row);
    expect(row.controls['PropertyDamageIndexAdjusted'].enabled).toBeTrue();
  });

  it('should disable PD Index Adjusted By when value is 0.0', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('10.0'),
      PropertyDamageIndexAdjusted: new FormControl('')
    });
    spyOn(row.controls['PropertyDamageIndexCalculated'], 'valueChanges').and.returnValue(of('0.0'));
    spyOn(component as any, 'setPropertyDamageIndexDisplayValue');

    component['enablePDIndexAdjustedBy'](row);

    row.controls['PropertyDamageIndexCalculated'].setValue('0.0');
    expect(component['setPropertyDamageIndexDisplayValue']).toHaveBeenCalledWith(row);
    expect(row.controls['PropertyDamageIndexAdjusted'].value).toBe('');
    expect(row.controls['PropertyDamageIndexCalculated'].value).toBe('0.0');
    expect(row.controls['PropertyDamageIndexAdjusted'].disabled).toBeTrue();
  });

it('should get property damage index display value', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('15.0'),
      PropertyDamageIndexAdjusted: new FormControl(''),
      PropertyDamageIndexUpdated: new FormControl('')
    });
    
    component['getPropertyDamageIndexDisplayValue'](row);
    
    expect(row.get('PropertyDamageIndexUpdated').value).toBe('15.0');
  });

  it('should not update PropertyDamageIndexUpdated if adjusted value is present', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('15.0'),
      PropertyDamageIndexAdjusted: new FormControl('20.0'),
      PropertyDamageIndexUpdated: new FormControl('')
    });
    
    component['getPropertyDamageIndexDisplayValue'](row);
    
    expect(row.get('PropertyDamageIndexUpdated').value).not.toBe('15.0');
  });

 it('should set previous property damage index value', () => {
    const row = new FormGroup({
      PropertyDamageIndexUpdated: new FormControl('10.0'),
      PropertyDamageIndexPrevious: new FormControl('')
    });

    spyOn(row.get('PropertyDamageIndexUpdated'), 'valueChanges').and.returnValue(of('15.0').pipe(startWith(null), pairwise()));
    component['setPreviousPropertyDamageIndexValue'](row);
    
    row.get('PropertyDamageIndexUpdated').setValue('15.0');
    expect(row.get('PropertyDamageIndexPrevious').value).toBe('10.0');
  });

it('should disable PD Index Adjust By Based On PD Index Value', () => {
    const row1 = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('0.0'),
      PropertyDamageIndexAdjusted: new FormControl('')
    });

    const row2 = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('10.0'),
      PropertyDamageIndexAdjusted: new FormControl('')
    });

    spyOn(component, 'getFormArray').and.returnValue(new FormArray([row1, row2]));
    component['disablePDIndexAdjustByBasedOnPDIndexValue']();
    
    expect(row1.get('PropertyDamageIndexAdjusted').disabled).toBeTrue();
    expect(row2.get('PropertyDamageIndexAdjusted').enabled).toBeTrue();
  });

  it('should set previous property damage index value', () => {
    const row = new FormGroup({
      PropertyDamageIndexUpdated: new FormControl('10.0'),
      PropertyDamageIndexPrevious: new FormControl('')
    });

    spyOn(row.get('PropertyDamageIndexUpdated'), 'valueChanges').and.returnValue(of('15.0').pipe(startWith(null), pairwise()));
    component['setPreviousPropertyDamageIndexValue'](row);
    
    row.get('PropertyDamageIndexUpdated').setValue('15.0');
    expect(row.get('PropertyDamageIndexPrevious').value).toBe('10.0');
  });

 it('should set property damage index display value correctly', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('10.0'),
      PropertyDamageIndexAdjusted: new FormControl('5.0'),
      PropertyDamageIndexUpdated: new FormControl('')
    });

    spyOn(component as any, 'setValidatorForPdIndexValue');
    component['setPropertyDamageIndexDisplayValue'](row);
    
    expect(row.get('PropertyDamageIndexUpdated').value).toBe('15.0');
    expect(component['setValidatorForPdIndexValue']).toHaveBeenCalledWith(row, 15.0);
  });

  it('should set PropertyDamageIndexUpdated to calculated value when adjusted value is empty', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('8.5'),
      PropertyDamageIndexAdjusted: new FormControl(''),
      PropertyDamageIndexUpdated: new FormControl('')
    });

    spyOn(component as any, 'setValidatorForPdIndexValue');
    component['setPropertyDamageIndexDisplayValue'](row);
    
    expect(row.get('PropertyDamageIndexUpdated').value).toBe('8.5');
    expect(component['setValidatorForPdIndexValue']).toHaveBeenCalledWith(row, 0.0);
  });
it('should get construction deserialize risk factor', () => {
    const mockRiskFactor = { constructionRisk: { factor: 5 } } as RiskFactor;
    spyOn(Utility, 'getConstructionRiskFactorDefaultValue').and.returnValue({ constructionRisk: { factor: 0 } } as RiskFactor);
    
    const result = component['getConstructionDeserializeRiskFactor'](JSON.stringify(mockRiskFactor));
    expect(result).toEqual(mockRiskFactor);
  });

  it('should return default value if parsed value is invalid', () => {
    spyOn(Utility, 'getConstructionRiskFactorDefaultValue').and.returnValue({ constructionRisk: { factor: 0 } } as RiskFactor);
    
    const result = component['getConstructionDeserializeRiskFactor']('{}');
    expect(result).toEqual(Utility.getConstructionRiskFactorDefaultValue());
  });

  it('should return default value if input is null', () => {
    spyOn(Utility, 'getConstructionRiskFactorDefaultValue').and.returnValue({ constructionRisk: { factor: 0 } } as RiskFactor);
    
    const result = component['getConstructionDeserializeRiskFactor'](null);
    expect(result).toEqual(Utility.getConstructionRiskFactorDefaultValue());
  });

it('should update patch row from construction popup', () => {
    const response: PopupResponse = {
      gridRecordDetail: { rowIndex: 0 },
      data: {
        constructionRisk: { riskValue: 8 },
        constructionCalculated: 10,
        constructionUpdated: 12,
        constructionUpdatedComment: 'Updated comment'
      }
    };
    const row = new FormGroup({
      RiskFactor: new FormControl('{}'),
      ConstructionDisplayValue: new FormControl(''),
      ConstructionCalculated: new FormControl(''),
      ConstructionUpdated: new FormControl(''),
      ConstructionUpdatedComment: new FormControl(''),
      Action: new FormControl('')
    });

    spyOn(component, 'getFormGroup').and.returnValue(row);
    spyOn(Utility, 'getConstructionRiskFactorDefaultValue').and.returnValue({ constructionRisk: { riskValue: 0 } });
    spyOn(Utility, 'isConstructionRiskFactor').and.returnValue(true);
    spyOn(component as any, 'getConstructionDisplayValue').and.returnValue('10.5');
    spyOn(component as any, 'getConstructionSerializeRiskFactors').and.returnValue('{}');
    spyOn(component as any, 'calculatePdIndexValue');

    component['updatePatchRowFromConstructionPopup'](response);

    expect(row.get('ConstructionDisplayValue').value).toBe('10.5');
    expect(row.get('ConstructionCalculated').value).toBe(10);
    expect(row.get('ConstructionUpdated').value).toBe(12);
    expect(row.get('ConstructionUpdatedComment').value).toBe('Updated comment');
    expect(row.get('RiskFactor').value).toBe('{}');
    expect(row.get('Action').value).toBe(ActionEnum.IsModified);
    expect(component['calculatePdIndexValue']).toHaveBeenCalledWith(row, ReToolConstants.constructionColumnField, 10.5);
  });

it('should serialize construction risk factors correctly', () => {
    const riskFactors = { constructionRisk: { riskValue: 5 } };
    spyOn(Utility, 'isConstructionRiskFactor').and.returnValue(true);
    const result = component['getConstructionSerializeRiskFactors'](riskFactors);
    expect(result).toBe(JSON.stringify(riskFactors));
  });

  it('should return null when serializing non-construction risk factors', () => {
    const riskFactors = { otherRisk: { riskValue: 5 } };
    spyOn(Utility, 'isConstructionRiskFactor').and.returnValue(false);
    const result = component['getConstructionSerializeRiskFactors'](riskFactors);
    expect(result).toBeNull();
  });

  it('should return updated construction display value if valid', () => {
    const result = component['getConstructionDisplayValue'](10, 15);
    expect(result).toBe('15.0');
  });

  it('should return NA when construction updated value is NA', () => {
    const result = component['getConstructionDisplayValue'](10, ReToolConstants.NA);
    expect(result).toBe(ReToolConstants.NA);
  });

  it('should return calculated value if updated value is empty', () => {
    const result = component['getConstructionDisplayValue'](10, null);
    expect(result).toBe('10.0');
  });

  it('should return 0.0 if both values are empty', () => {
    const result = component['getConstructionDisplayValue'](null, null);
    expect(result).toBe('0.0');
  });

it('should calculate PD index value', () => {
    const row = new FormGroup({
      PropertyDamageIndexCalculated: new FormControl('')
    });
    spyOn(component as any, 'getWeightDistributionCode').and.returnValue(5);
    spyOn(calculationServiceSpy, 'setPropertyData').and.returnValue(calculationServiceSpy);
    spyOn(calculationServiceSpy, 'setGroupOrTypeCode').and.returnValue(calculationServiceSpy);
    spyOn(calculationServiceSpy, 'setElement').and.returnValue(calculationServiceSpy);
    spyOn(calculationServiceSpy, 'updateWeightDistribution').and.returnValue(calculationServiceSpy);
    spyOn(calculationServiceSpy, 'getPDIndexValue').and.returnValue(8.5);

    component['calculatePdIndexValue'](row, 'SomeElementKey', 10);
    
    expect(row.get('PropertyDamageIndexCalculated').value).toBe('8.5');
  });

  it('should calculate total PD value', () => {
    const row = new FormGroup({
      BuildingValue: new FormControl('1,000.50'),
      EquipmentValue: new FormControl('500.25'),
      InventoryValue: new FormControl('200.75'),
      OtherValue: new FormControl('300.00'),
      TotalPD: new FormControl('')
    });

    spyOn(Utility, 'removeComma').and.callFake(value => value.replace(',', ''));
    component['calculateTotalPd'](row);
    
    expect(row.get('TotalPD').value).toBe(2001.5);
  });
it('should set validator for PD index value', () => {
    const row = new FormGroup({
      PDIndexIndexUpdatedValidationControl: new FormControl(),
      PropertyDamageIndexPrevious: new FormControl()
    });
    spyOn(reToolTabServiceSpy, 'showErrorMessage');

    component['setValidatorForPdIndexValue'](row, 12);
    expect(row.get('PDIndexIndexUpdatedValidationControl').errors).toEqual({ max: true });
    expect(reToolTabServiceSpy.showErrorMessage).toHaveBeenCalledWith(ReToolConstants.pdIndexUpdateValueRangeValidation, '');
  });

  it('should set loss prevention date', () => {
    const mockDate = '2023-10-15T00:00:00Z';
    spyOn(commonServiceSpy, 'getDateByTimeZone').and.returnValue(new Date(mockDate));
    
    const result = component['setLossPreventionDate'](mockDate);
    expect(result).toEqual(new Date(mockDate));
  });
it('should set updated value for NA correctly', () => {
    expect(component['setUpdatedValueForNA'](15)).toBe('15.0');
    expect(component['setUpdatedValueForNA'](ReToolConstants.NA)).toBe(ReToolConstants.NA);
    expect(component['setUpdatedValueForNA'](-1.0)).toBe(ReToolConstants.NA);
    expect(component['setUpdatedValueForNA'](null)).toBe('0.0');
  });

  it('should set calculated value correctly', () => {
    expect(component['setCalculatedValue'](12)).toBe('12.0');
    expect(component['setCalculatedValue'](null)).toBe('0.0');
  });

  it('should set NA value for GP risk factor dropdown correctly', () => {
    expect(component['setNaValueForGPRiskfactorDropDown'](ReToolConstants.riskFactorNaValue)).toBe(ReToolConstants.NA);
    expect(component['setNaValueForGPRiskfactorDropDown']('SomeValue')).toBe('SomeValue');
  });

 it('should validate PD index properties correctly', () => {
    const generalPropertyFormData = [
      {
        Action: ActionEnum.IsModified,
        PropertyDamageIndexAdjusted: 5,
        PropertyDamageIndexUpdated: 12,
        PropertyDamageIndexAdjustedComment: null
      },
      {
        Action: ActionEnum.IsNewRecord,
        PropertyDamageIndexAdjusted: 3,
        PropertyDamageIndexUpdated: -2,
        PropertyDamageIndexAdjustedComment: 'Valid Comment'
      }
    ];

    const result = component['isValidPDIndexProperties'](generalPropertyFormData as any);
    expect(result).toBeTrue();
    expect(component.invalidMessageForPDIndexUpdate).toBe(ReToolConstants.pdIndexUpdateValueRangeValidation);
  });

  it('should not validate PD index properties when no invalid values exist', () => {
    const generalPropertyFormData = [
      {
        Action: ActionEnum.IsModified,
        PropertyDamageIndexAdjusted: 5,
        PropertyDamageIndexUpdated: 8,
        PropertyDamageIndexAdjustedComment: 'Valid Comment'
      }
    ];

    const result = component['isValidPDIndexProperties'](generalPropertyFormData as any);
    expect(result).toBeFalse();
    expect(component.invalidMessageForPDIndexUpdate).toBeNull();
  });

  it('should set PD index adjust decimal value correctly', () => {
    expect(component['setPDIndexAdjustDecimalValue'](1.5)).toBe('1.5');
    expect(component['setPDIndexAdjustDecimalValue'](-1.5)).toBe('-1.5');
    expect(component['setPDIndexAdjustDecimalValue'](2)).toBe('2.0');
    expect(component['setPDIndexAdjustDecimalValue'](-2)).toBe('-2.0');
    expect(component['setPDIndexAdjustDecimalValue'](0)).toBe('');
    expect(component['setPDIndexAdjustDecimalValue'](3)).toBe('');
    expect(component['setPDIndexAdjustDecimalValue'](-3)).toBe('');
    expect(component['setPDIndexAdjustDecimalValue'](null)).toBe('');
  });

it('should build redistributed weight data correctly', () => {
    const mockWeights: GeneralPropertyWeightResponse[] = [
      {
        groupCode: 'A', occupancyGroupId: 1, typeCode: 100, humanElement: 10, construction: 20, constructionHazards: 30,
        detectionSecurity: 40, automaticSprinklers: 50, fireWaterSupply: 60, fireManualResponse: 70,
        specialHazards: 80, equipmentHazards: 90, externalExposures: 100
      }
    ];
    
    const mockGpData: GeneralProperty[] = [
      {
        OccupancyGroupCode: 1,
        OccupancyTypeCode: 100,
        HumanElementCalculated: 5,
        HumanElementUpdated: null,
        ConstructionCalculated: 10,
        ConstructionUpdated: null,
        ConstructionHazards: 'High',
        DetectionSecurity: 'Low',
        AutomaticSprinklers: 1,
        FireWaterSupply: 'Adequate',
        FireManualResponse: 'Good',
        SpecialHazards: 'Moderate',
        EquipmentHazards: 'Severe',
        ExternalExposures: 'High',
        Action: ActionEnum.IsModified
      } as GeneralProperty
    ];
    
    component['weights'] = mockWeights;
    spyOn(component as any, 'getHumanElementDisplayValue').and.returnValue('5.0');
    spyOn(component as any, 'getConstructionDisplayValue').and.returnValue('10.0');
    
    component['buildRedistributedWeightData'](mockGpData);
    
    expect(component['redistributionWeights'].length).toBe(1);
    expect(component['redistributionWeights'][0].inputWeights.humanElement).toBe('10');
    expect(component['redistributionWeights'][0].inputRatings.humanElement).toBe(5.0);
    expect(component['redistributionWeights'][0].inputRatings.construction).toBe(10.0);
  });

  afterEach(() => {
    fixture.destroy();
  });

  afterEach(() => {
    fixture.destroy();
  });
});
