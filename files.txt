only this logs appear: Debug: processExcelData executed

processExcelData(jsonData: any[], propertyValueData: any[]) {
    const mergedRecords: any = {};

    this.clearImportData();

    jsonData.forEach((row, index) => {
      const key = `${row.locationName}_${row.locationAddress}_${row.city}_${row.state}_${row.country}`;
      const propertyValueRow = propertyValueData.filter((x, propertyIndex) => `${x.LocationName}_${x.Address}_${x.City}_${x.StateProvince}_${x.Country}`?.toLowerCase() === key?.toLowerCase() && index === propertyIndex);
      const propertyValue = MapperUtil.mapRowToPropertyValueExcelFile(propertyValueRow, row);

      if (!propertyValue.ULId) {
        // find the existing record based on Location Name and Country Name
        console.log("Debug: Calling findMatchingRecordKey with", mergedRecords, propertyValue.LocationName, propertyValue.Country);
        const existingKey = this.findMatchingRecordKey(mergedRecords, propertyValue.LocationName, propertyValue.Country);
        if (existingKey) {
          this.mergeValues(mergedRecords, existingKey, propertyValue);
          return;
        }
      } else {
        //If ULID exists handle merging for already saved records or new records based on ULID, Location Name and CountryName key combination
        const locationKey = Utility.getLocationKeyCombination(propertyValue.ULId, propertyValue.LocationName, propertyValue.Country);
        // if the record is saved, update the existing one otherwise create a new entry
        if (mergedRecords[locationKey]) {
          this.mergeValues(mergedRecords, locationKey, propertyValue);
        } else {
          // if no record exist then create a new row
          mergedRecords[locationKey] = {
            ...propertyValue,
            StreetAddresses: [propertyValue.Address],
            CityNames: [propertyValue.City],
            StateProvinces: [propertyValue.StateProvince]
          };
        }
      }
    });

    const mergedDataArray = Object.values(mergedRecords);

    this.mergeImportedAndExistingPropertyValueData(mergedDataArray as PropertyValue[]);
    this.reToolTabService.hasFormChange$.next(true);
    this.isLoading.setLoaderStatus(false);
  }

private findMatchingRecordKey(mergedRecords: any, fullAddress: string, countryName: string): string | null {
    for (const key in mergedRecords) {
      if (mergedRecords.hasOwnProperty(key)) {
        const [ULId, storedFullAddress, storedCountryName] = key.split('_');
        if (storedFullAddress === fullAddress && storedCountryName === countryName) {
          return key;
        }
      }
    }
    return null;
  }
