import { Component, Input, OnInit } from '@angular/core';
import { CommonService } from '../../../../shared/services/common.service';
import { LoginService } from '../../../../core/services/login.service';
import 'froala-editor/js/plugins.pkgd.min.js';
import { ReToolService } from '../../service/re-tool.service';

@Component({
  selector: 'app-smart-editor',
  templateUrl: './smart-editor.component.html',
  styleUrls: ['./smart-editor.component.css']
})
export class SmartEditorComponent implements OnInit {
  @Input() content: string = 'Test content';
  licenseKey: string = '';
  editorInstance: any;

  public editorOptions: Object = {};

  constructor(
    private commonService: CommonService,
    private loginService: LoginService,
    private reToolService: ReToolService
  ) {}

  ngOnInit(): void {
    const userDetails = this.commonService.userDetails;
    this.licenseKey = userDetails?.licenseKey || '';
    if (!this.licenseKey) {
      this.getCurrentUserDetails();
    }

    this.initEditorOptions();
  }

  initEditorOptions() {
    this.editorOptions = {
      key: this.licenseKey,
      attribution: false,
      toolbarButtons: [
        'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript',
        'fontFamily', 'fontSize', 'textColor', 'backgroundColor',
        'outdent', 'indent', 'clearFormatting',
        'insertTable', 'insertImage', 'specialCharacters',
        'formatUL', 'formatOL',
        'lineHeight', 'paragraphFormat', 'paragraphStyle',
        'alignLeft', 'alignCenter', 'alignRight', 'alignJustify',
        'quote', 'undo', 'redo',
        'insertLink', 'insertFile',
        'insertHR', 'inlineStyle', 'selectAll',
      ],
      useClasses: false,
      imageAllowedTypes: ['jpeg', 'jpg', 'png'],
      events: {
        'image.beforeUpload': this.customImageUpload.bind(this)
      }
    };
  }

  customImageUpload(files: File[]) {
    if (!files || files.length === 0) return false;

    const file = files[0];
    const formData = new FormData();
    formData.append('file', file);

    this.reToolService.UploadImage(formData).subscribe({
      next: (response: any) => {
        const imageUrl = response?.filePath || response?.url || null;

        if (imageUrl) {
          // Insert the uploaded image into the editor manually
          const editorInstance = (window as any).FroalaEditor.INSTANCES[0]; // Or get from a ref
          editorInstance.image.insert(imageUrl, true, null, editorInstance.image.get(), null);
        }
      },
      error: (err) => {
        console.error('Image upload failed:', err);
      }
    });

    // Prevent Froala's default upload
    return false;
  }

  getCurrentUserDetails() {
    this.loginService.GetUserDetails().subscribe({
      next: (response) => {
        if (response?.licenseKey) {
          this.licenseKey = response.licenseKey;
          this.initEditorOptions(); // Reinitialize with new license key
        }
      },
      error: (error) => {
        console.error('Failed to fetch user details:', error);
      }
    });
  }
}
