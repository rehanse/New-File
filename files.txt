it('should process excel data and merge records when matching record is found', (done) => {
    // Arrange: Provide correct input format
    const jsonData = [{
        locationName: 'USA',
        locationAddress: '1 Park Avenue',
        city: 'New York',
        state: 'New York',
        country: 'United States',
        ULId: null
    }];

    const propertyValueData = [
        {
            ULId: '12345',
            PropertyLocationId: '1',
            LocationName: 'USA',
            Address: '1 Park Avenue',
            City: 'New York',
            StateProvince: 'New York',
            Country: 'United States',
            BuildingValue: '5000',
            EquipmentValue: '2000',
            InventoryValue: '3000',
            OtherValue: '400',
            BusinessInterruptionValue: '5000',
            BusinessInterruptionOtherValue: '600',
            IndemnityPeriod: '12',
            PayRollValue: '7000',
            PayRollDayValue: '250',
            CurrencyId: 1,
            UnitId: 1,
            Action: ActionEnum.IsNewRecord,
            VerCol: '',
            LocationAddressMapId: null
        }
    ];

    // ✅ Spy on `findMatchingRecordKey` and ensure it returns a key
    spyOn<any>(component, 'findMatchingRecordKey').and.returnValue('existingKey');

    // ✅ Spy on `mergeValues`
    spyOn<any>(component, 'mergeValues').and.callThrough();

    // ✅ Ensure component lifecycle methods are triggered
    fixture.detectChanges();
    component.ngOnInit(); // ✅ Manually trigger lifecycle hook

    // ✅ Act: Call the method inside `setTimeout` to ensure async execution
    setTimeout(() => {
        component.processExcelData(jsonData, propertyValueData);

        // ✅ Debugging Log
        console.log("Debug: processExcelData executed");

        // ✅ Verify `findMatchingRecordKey` was called
        expect(component['findMatchingRecordKey']).toHaveBeenCalledWith(
            jasmine.any(Object),
            'USA',
            'United States'
        );

        // ✅ Verify `mergeValues` was called with a valid `propertyValue`
        expect(component['mergeValues']).toHaveBeenCalledWith(
            jasmine.any(Object), // mergedRecords
            'existingKey',       // Matching record key
            jasmine.objectContaining({ BuildingValue: '5000' }) // Ensure correct propertyValue
        );

        done(); // ✅ Mark test as completed
    }, 100);
});
