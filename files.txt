Perfect ✅ — that means your logic is fine (click → toggle works, popover shows).
Now we just need to style it like a real popover with arrow, input, buttons, strict close.

Here’s a minimal working Angular Material example you can drop in:


---

fx-popover.component.ts

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-fx-popover',
  templateUrl: './fx-popover.component.html',
  styleUrls: ['./fx-popover.component.scss']
})
export class FxPopoverComponent {
  @Input() rowIndex!: number;
  @Input() colKey!: string;

  isOpen = false;
  formula = '';

  positionTop = 0;
  positionLeft = 0;
  arrowDirection: 'left' | 'right' = 'left';

  togglePopover(event: MouseEvent) {
    const target = event.target as HTMLElement;
    const rect = target.getBoundingClientRect();

    this.isOpen = !this.isOpen;

    if (this.isOpen) {
      // Default position
      this.positionTop = rect.bottom + window.scrollY;
      this.positionLeft = rect.left + window.scrollX + rect.width + 8;

      // If it overflows screen → flip to left
      if (this.positionLeft + 250 > window.innerWidth) {
        this.positionLeft = rect.left + window.scrollX - 260;
        this.arrowDirection = 'right';
      } else {
        this.arrowDirection = 'left';
      }
    }
  }

  onOk() {
    console.log(`Apply formula: ${this.formula} (row=${this.rowIndex}, col=${this.colKey})`);
    this.isOpen = false;
    this.formula = '';
  }

  onCancel() {
    this.isOpen = false;
    this.formula = '';
  }
}


---

fx-popover.component.html

<!-- FX Button -->
<button mat-icon-button (click)="togglePopover($event)">
  fx
</button>

<!-- Custom Popover -->
<div *ngIf="isOpen"
     class="fx-popover"
     [ngClass]="arrowDirection"
     [style.top.px]="positionTop"
     [style.left.px]="positionLeft"
     (click)="$event.stopPropagation()">

  <div class="arrow"></div>

  <mat-form-field appearance="outline" class="fx-input">
    <input matInput [(ngModel)]="formula" placeholder="Enter formula">
  </mat-form-field>

  <div class="fx-actions">
    <button mat-stroked-button color="primary" (click)="onOk()">OK</button>
    <button mat-stroked-button (click)="onCancel()">Cancel</button>
  </div>
</div>


---

fx-popover.component.scss

.fx-popover {
  position: absolute;
  width: 250px;
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  padding: 12px;
  z-index: 2000;

  .fx-input {
    width: 100%;
  }

  .fx-actions {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    margin-top: 8px;
  }

  .arrow {
    position: absolute;
    top: 12px;
    width: 0;
    height: 0;
    border: 8px solid transparent;
  }

  &.left .arrow {
    left: -16px;
    border-right-color: #fff;
  }

  &.right .arrow {
    right: -16px;
    border-left-color: #fff;
  }
}


---

✅ Behavior

Click fx → popover opens next to that column.

If space on the right → arrow points left.

If at last column (no space right) → flips left, arrow points right.

Only OK and Cancel close it.

Always stays attached to the clicked column.



---

⚡ Do you want me to now make this into a reusable directive (so you can attach it to any element, not just an fx button), or keep it as a standalone component?

