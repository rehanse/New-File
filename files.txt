console.log("Debug: Calling findMatchingRecordKey with", mergedRecords, propertyValue.LocationName, propertyValue.Country);
it('should process excel data and merge records when matching record is found', fakeAsync(() => {
    // ✅ Arrange: Provide correct input format
    const jsonData = [{
        locationName: 'USA',
        locationAddress: '1 Park Avenue',
        city: 'New York',
        state: 'New York',
        country: 'United States',
        ULId: null
    }];

    const propertyValueData = [
        {
            ULId: '12345',
            PropertyLocationId: '1',
            LocationName: 'USA',
            Address: '1 Park Avenue',
            City: 'New York',
            StateProvince: 'New York',
            Country: 'United States',
            BuildingValue: 5000,
            EquipmentValue: 2000,
            InventoryValue: 3000,
            OtherValue: 400,
            BusinessInterruptionValue: 5000,
            BusinessInterruptionOtherValue: 600,
            IndemnityPeriod: '12',
            PayRollValue: 7000,
            PayRollDayValue: 250,
            CurrencyId: 1,
            UnitId: 1,
            Action: ActionEnum.IsNewRecord,
            VerCol: '',
            LocationAddressMapId: null
        }
    ];

    // ✅ Spy on `findMatchingRecordKey` and ensure it returns a key
    spyOn<any>(component, 'findMatchingRecordKey').and.returnValue('existingKey');

    // ✅ Spy on `mergeValues`
    spyOn<any>(component, 'mergeValues').and.callThrough();

    // ✅ Mock `mapRowToPropertyValueExcelFile` to return a **complete object**
    spyOn(MapperUtil, 'mapRowToPropertyValueExcelFile').and.returnValue({
        ULId: '12345',
        PropertyLocationId: '1',
        LocationName: 'USA',
        Address: '1 Park Avenue',
        City: 'New York',
        StateProvince: 'New York',
        Country: 'United States',
        BuildingValue: 5000,
        EquipmentValue: 1000,
        InventoryValue: 2000,
        OtherValue: 300,
        TotalPD: 0,
        BusinessInterruptionValue: 4000,
        BusinessInterruptionOtherValue: 500,
        IndemnityPeriod: '12',
        PayRollValue: 6000,
        PayRollDayValue: 200,
        TotalTE: 0,
        Total: 0,
        CurrencyId: 1,
        UnitId: 1,
        Action: ActionEnum.IsNewRecord,
        VerCol: '',
        LocationAddressMapId: null,
        StreetAddresses: [],
        CityNames: [],
        StateProvinces: [],
        LocationAddressMapIds: []
    });

    // ✅ Act: Call processExcelData
    component.processExcelData(jsonData, propertyValueData);
    tick(); // ✅ Ensure async operations complete

    // ✅ Debugging Log
    console.log("Debug: processExcelData executed");

    // ✅ Verify `findMatchingRecordKey` was called
    expect(component['findMatchingRecordKey']).toHaveBeenCalledWith(
        jasmine.any(Object),
        'USA',
        'United States'
    );

    // ✅ Verify `mergeValues` was called with a valid `propertyValue`
    expect(component['mergeValues']).toHaveBeenCalledWith(
        jasmine.any(Object), // mergedRecords
        'existingKey',       // Matching record key
        jasmine.objectContaining({ BuildingValue: 5000 }) // Ensure correct propertyValue
    );
}));
