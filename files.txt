it("should call emit onSaveFormData when form is valid", fakeAsync(() => {
  // Mock service response for initialization event
  const formDataSource = { 
    data: mockTableData, 
    columns: mockTableColumns 
  };
  
  // Setup event listener mock
  (reToolTabServiceMock.on as jasmine.Spy).withArgs('onInitializeNormmalLossExpectancyData')
    .and.returnValue(of(formDataSource));

  // Initialize component properly
  component.ngOnInit();
  tick(); // Allow async operations to complete
  
  // Set valid values for required fields
  const firstRow = (component.getFormArray().at(0) as FormGroup);
  firstRow.get('NormalLossScenario').setValue('Valid Scenario');
  firstRow.get('NormalLossDeficiencyDriven').setValue(true);

  // Trigger submission
  component.onSubmit();

  // Verify expectations
  expect(reToolTabServiceMock.emit).toHaveBeenCalledWith(
    'onSaveFormData', 
    jasmine.objectContaining({
      formData: jasmine.any(Array),
      subTabIndex: 0
    })
  );
}));

----------------------------
it("should call emit onSaveFormData when form is valid", fakeAsync(() => {
    // Arrange: Ensure form is properly initialized with valid data
    component.initializeForm(); 
    component.normalLossExpectancyForm = new FormGroup({
        rows: new FormArray([
            new FormGroup({
                NormalLossScenario: new FormControl("test scenario", Validators.required),
                NormalLossDeficiencyDriven: new FormControl(true, Validators.required)
            })
        ])
    });

    spyOn(reToolTabServiceMock, 'emit');

    // Act: Mark form as touched and submit
    component.normalLossExpectancyForm.markAllAsTouched();
    component.normalLossExpectancyForm.updateValueAndValidity();
    component.onSubmit();

    // Assert: Expect emit to be called with expected parameters
    expect(reToolTabServiceMock.emit).toHaveBeenCalledWith('onSaveFormData', {
        formData: component['getNormalExpectancyFormData'],
        subTabIndex: 0
    });
}));
