it('should open human element popup on human element cell click and update human element calculated value in human element column', () => {
    // ✅ Ensure popup response structure is correct
    const popupResponse = {
        data: {
            humanElementCalculated: 3,
            humanElementUpdated: 0.0
        }
    };

    // ✅ Ensure event.target.id follows the expected format required by getGidRowRecordDetail()
    const mockPopupColumnEvent = {
        column: { field: 'HumanElementDisplayValue' },
        rowIndex: 0,
        event: {
            target: {
                id: 'row-0_dataKey-143_HumanElementDisplayValue_HumanElementRiskFactorCalculatorComponent' // ✅ Correct format
            }
        }
    };

    // ✅ Ensure mock row data is structured correctly
    const mockCellData = {
        value: {
            HumanElementCalculated: 0.0,
            HumanElementUpdated: 0.0,
            HumanElementUpdatedComment: ''
        }
    };

    // ✅ Spy on dialog open method
    dialogSpy.open.and.returnValue({
        afterClosed: () => of(popupResponse)
    } as any);

    // ✅ Call the method
    component.openPopupOnCellClick(mockPopupColumnEvent.event as any, mockCellData, 'HumanElementDisplayValue');

    // ✅ Verify that the dialog opens
    expect(dialogSpy.open).toHaveBeenCalled();

    // ✅ Validate dialog configuration data
    const dialogConfig: MatDialogConfig<any> = dialogSpy.open.calls.mostRecent().args[1];
    expect(dialogConfig.data.title).toBe('Property/Human Element Risk Factor Calculator');
    expect(dialogConfig.data.data.humanElementCalculated).toBe(0);

    // ✅ Ensure form array exists and has at least one entry
    const formArray = component['getFormArray']();
    expect(formArray).toBeTruthy();
    expect(formArray.length).toBeGreaterThan(0);

    // ✅ Get the first row in the form array and validate value update
    const row = formArray.at(0) as FormGroup;
    expect(row.get('HumanElementDisplayValue')?.value).toBe('3.0');
});
