import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule, FormBuilder } from '@angular/forms';
import { CoverComponent } from './cover.component';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { of, throwError } from 'rxjs';

describe('CoverComponent', () => {
  let component: CoverComponent;
  let fixture: ComponentFixture<CoverComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;

  beforeEach(async () => {
    mockReToolService = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getOccupancyType']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['emit', 'on', 'showErrorMessage', 'actionStateChange']);
    
    // Mock the `getOccupancyGroup` and `getOccupancyType` methods
    mockReToolService.getOccupancyGroup.and.returnValue(of({
      occupancyGroups: [{ text: 'Group A', value: 'A', category: 'CAT_A', defaultValue: 'Default A' }],
      hazard: [{ text: 'Hazard A', value: 'HA' }],
      equipmentBreakdown: [{ text: 'Breakdown A', value: 'BA' }]
    }));

    mockReToolService.getOccupancyType.and.returnValue(of([{ value: 'Type A', dependentValue: { occupancyTypeCode: 'OTC', hazard: 'HA', equipmentBreakdown: 'EB' } }]));

    await TestBed.configureTestingModule({
      declarations: [CoverComponent],
      imports: [ReactiveFormsModule],
      providers: [
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService },
        FormBuilder,
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(CoverComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should call loadOccupancyGroups and initializeForm on ngOnInit', () => {
    spyOn(component, 'loadOccupancyGroups');
    spyOn(component, 'initializeForm');
    component.ngOnInit();
    expect(component.loadOccupancyGroups).toHaveBeenCalled();
    expect(component.initializeForm).toHaveBeenCalled();
    expect(mockReToolTabService.emit).toHaveBeenCalledWith('onFormComponentInit', { encodedTabIndex: jasmine.any(Number) });
  });

  it('should load occupancy groups and set OccupancyGroupData', () => {
    component.loadOccupancyGroups();
    expect(component.OccupancyGroupData.length).toBeGreaterThan(0);
  });

  it('should initialize the form with required controls', () => {
    component.initializeForm();
    expect(component.coverForm.contains('ReportedBuildingValue')).toBeTruthy();
    expect(component.coverForm.contains('ReviewedBuilding')).toBeTruthy();
  });

  it('should mark the form as touched and show error for invalid data on onSubmit', () => {
    spyOn(component as any, 'updateCoverOccupancyData');
    component.coverForm.get('ReportedBuildingValue')?.setValue('');
    component.onSubmit();
    expect(mockReToolTabService.showErrorMessage).toHaveBeenCalled();
    expect(component['updateCoverOccupancyData']).not.toHaveBeenCalled();
  });

  it('should save form data on onSubmit with valid data', () => {
    spyOn(component as any, 'updateCoverOccupancyData');
    component.coverForm.get('ReportedBuildingValue')?.setValue('100');
    component.onSubmit();
    expect(mockReToolTabService.emit).toHaveBeenCalledWith('onSaveFormData', jasmine.any(Object));
    expect(component['updateCoverOccupancyData']).toHaveBeenCalled();
  });

  it('should calculate totalReportedTIV correctly', () => {
    component.coverForm.get('ReportedBuildingValue')?.setValue('200');
    component.coverForm.get('ReportedContentsValue')?.setValue('300');
    component.totalReportedTotalPD(component.coverForm);
    expect(component.coverForm.get('ReportedTIV')?.value).toBe('500.0');
  });

  it('should calculate percentages correctly', () => {
    component.coverForm.get('ReviewedBuilding')?.setValue('100');
    component.coverForm.get('ReportedBuildingValue')?.setValue('200');
    component['calculatedPercentageReviewedBuilding'](component.coverForm);
    expect(component.coverForm.get('ReviewedPercentageBuilding')?.value).toBe('50.0%');
  });

  it('should set recommended review frequency based on hazard value', () => {
    component.coverForm.get('OccupancyHighestHazardReview')?.setValue('3'); // High Hazard
    component['setRecommendedReviewFrequency'](component.coverForm);
    expect(component.coverForm.get('RecommendedReviewFrequency')?.value).toBe('12 months');
    expect(component.coverForm.get('RecommendedAccountPercentageTIV')?.value).toBe('40%');
  });

  it('should handle change in OccupancyGroup correctly', () => {
    spyOn(component as any, 'getOccupancyType');
    component.changeOccupancyGroup(0, 'A');
    expect(component['getOccupancyType']).toHaveBeenCalledWith(0, 'A', jasmine.any(Object), jasmine.any(Object));
  });

  it('should unsubscribe subscriptions on ngOnDestroy', () => {
    const unsubscribeSpy = spyOn(component.subscription, 'unsubscribe');
    component.ngOnDestroy();
    expect(unsubscribeSpy).toHaveBeenCalled();
  });

  it('should handle private method getOccupancyValuesSerialize correctly', () => {
    const data = { occupancyGroupTIV: 'A', hazardTIV: 'HA' };
    const serialized = component['getOccupancyValuesSerialize'](data);
    expect(serialized).toBe(JSON.stringify(data));
  });

  it('should handle private method getOccupancyValuesDeserialize correctly', () => {
    const serialized = '{"occupancyGroupTIV":"A","hazardTIV":"HA"}';
    const deserialized = component['getOccupancyValuesDeserialize'](serialized);
    expect(deserialized.occupancyGroupTIV).toBe('A');
    expect(deserialized.hazardTIV).toBe('HA');
  });

  it('should disable dropdown controls correctly', () => {
    component['disableDropdownControl'](0, component.coverForm, true);
    expect(component.coverForm.get('HazardTIV')?.disabled).toBeTrue();
  });

  afterEach(() => {
    fixture.destroy();
  });
});
