Got it üëç that‚Äôs a very common bug when implementing popover-style components in a table.

Right now, each <app-fx-popover> manages its own isOpen state, so if you click multiple fx buttons ‚Üí multiple popovers stay open.

We need a single source of truth so that only one popover is open at a time.


---

üîß Solution Approaches

Option 1 ‚Äì Manage State in Parent (Table Component)

Instead of letting each popover track its own state, keep the active cell (row + column) in the table component.

table.component.ts

activePopover: { rowIndex: number, colKey: string } | null = null;

openPopover(rowIndex: number, colKey: string) {
  this.activePopover = { rowIndex, colKey };
}

closePopover() {
  this.activePopover = null;
}

isActive(rowIndex: number, colKey: string): boolean {
  return this.activePopover?.rowIndex === rowIndex &&
         this.activePopover?.colKey === colKey;
}

table.component.html

<td mat-cell *matCellDef="let element; let i = index">
  {{element.salary}}
  <app-fx-popover
    [rowIndex]="i"
    colKey="salary"
    [isOpen]="isActive(i, 'salary')"
    (opened)="openPopover(i, 'salary')"
    (closed)="closePopover()"
  ></app-fx-popover>
</td>


---

Option 2 ‚Äì Use a Shared Service

Create a PopoverService with a BehaviorSubject<{rowIndex, colKey}>.
Each popover subscribes ‚Üí if it‚Äôs not the active one, it closes itself.

This is useful if popover components are scattered in many places.


---

Popover Component Update

fx-popover.component.ts:

import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-fx-popover',
  templateUrl: './fx-popover.component.html',
  styleUrls: ['./fx-popover.component.scss']
})
export class FxPopoverComponent {
  @Input() rowIndex!: number;
  @Input() colKey!: string;
  @Input() isOpen = false;

  @Output() opened = new EventEmitter<void>();
  @Output() closed = new EventEmitter<void>();

  formula: string = '';

  togglePopover(event: MouseEvent) {
    if (!this.isOpen) {
      this.opened.emit();
    } else {
      this.closed.emit();
    }
  }

  onOk() {
    console.log('Formula applied:', this.formula);
    this.closed.emit();
  }

  onCancel() {
    this.closed.emit();
  }
}


---

‚úÖ Behavior Now

When you click fx in row 1, col A ‚Üí popover opens.

When you click fx in row 2, col B ‚Üí previous closes automatically.

At most one popover open across entire table.



---

‚ö° Question for you: Do you prefer me to finish this with the parent-managed approach (Option 1, simpler) or the service-based approach (Option 2, scalable)?

