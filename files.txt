✅ Step 1: Add an anchor tag to open the app in read-only mode

In your component HTML (e.g., app.component.html):

html <a [routerLink]="['/']" [queryParams]="{ readonly: true }" target="_blank"> Open in Read-Only Mode </a>

This opens the same route with a query param readonly=true in a new tab.

 

✅ Step 2: Create ReadonlyModeService

Generate a service that tracks whether the app is in readonly mode.

readonly-mode.service.ts

typescript import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' }) export class ReadonlyModeService { private readonlyMode = false;

setReadonlyMode(value: boolean): void { this.readonlyMode = value; }

isReadonlyMode(): boolean { return this.readonlyMode; } }

 

✅ Step 3: Detect readonly mode from query params

Update your app.component.ts (or a global layout component) to read the readonly=true param:

typescript import { Component } from '@angular/core'; import { ActivatedRoute } from '@angular/router'; import { ReadonlyModeService } from './readonly-mode.service';

@Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent { constructor( private route: ActivatedRoute, private readonlyService: ReadonlyModeService ) { this.route.queryParams.subscribe(params => { const isReadonly = params['readonly'] === 'true'; this.readonlyService.setReadonlyMode(isReadonly); }); } }

 

✅ Step 4: Create the Global ReadOnly Directive

Create a directive to disable/readonly relevant elements globally.

global-readonly.directive.ts

typescript import { Directive, ElementRef, Renderer2, AfterViewInit } from '@angular/core'; import { ReadonlyModeService } from './readonly-mode.service';

@Directive({ selector: '[appGlobalReadonly]' }) export class GlobalReadonlyDirective implements AfterViewInit { constructor( private el: ElementRef, private renderer: Renderer2, private readonlyService: ReadonlyModeService ) {}

ngAfterViewInit() { if (!this.readonlyService.isReadonlyMode()) return;

typescript
Copy
Edit
const elements = this.el.nativeElement.querySelectorAll(
  `
  input,
  textarea,
  select,
  button,
  a,
  [matInput],
  mat-select,
  mat-slide-toggle,
  mat-checkbox
  `
);

elements.forEach((el: any) => {
  const tag = el.tagName?.toLowerCase();

  if (['input', 'textarea', 'select'].includes(tag) || el.hasAttribute('matinput')) {
    el.setAttribute('readonly', 'true');
    el.setAttribute('disabled', 'true');
  }

  if (['button', 'a'].includes(tag) || el.hasAttribute('mat-button') || el.hasAttribute('mat-icon-button')) {
    el.setAttribute('disabled', 'true');
  }

  if (el.tagName === 'MAT-SELECT' || el.tagName === 'MAT-SLIDE-TOGGLE' || el.tagName === 'MAT-CHECKBOX') {
    const ngContext = el.__ngContext__ || [];
    const componentInstance = ngContext.find((ctx: any) => typeof ctx === 'object' && 'disabled' in ctx);
    if (componentInstance) componentInstance.disabled = true;
  }

  this.renderer.addClass(el, 'readonly-disabled');
});
} }

 

✅ Step 5: Apply the Directive Globally

In app.component.html or a parent layout component:

html

<div appGlobalReadonly> <router-outlet></router-outlet> </div>
 

✅ Step 6: Optional CSS styling

styles.css

css .readonly-disabled { pointer-events: none; opacity: 0.6; }

 

✅ Step 7: Add the directive to your declarations

In app.module.ts:

typescript import { NgModule } from '@angular/core'; import { BrowserModule } from '@angular/platform-browser'; import { AppComponent } from './app.component'; import { GlobalReadonlyDirective } from './global-readonly.directive';

@NgModule({ declarations: [ AppComponent, GlobalReadonlyDirective ], imports: [ BrowserModule ], bootstrap: [AppComponent] }) export class AppModule {}

 

✅ Step 8: Test the Feature

Run your app and:

Click the “Open in Read-Only Mode” link.

It should open a new tab with ?readonly=true.

All form fields, buttons, and Angular Material components inside <div appGlobalReadonly> will be disabled or readonly.

You can still navigate between tabs/pages.
