// Add to the 'should handle occupancy type change' test case
beforeEach(fakeAsync(() => {
  // Mock occupancy group response
  mockReToolService.getOccupancyGroup.and.returnValue(of({
    occupancyGroups: [],
    hazard: [],
    equipmentBreakdown: []
  }));
  
  component.ngOnInit();
  tick();
  fixture.detectChanges();
}));

it('should handle occupancy type change', fakeAsync(() => {
  // Arrange
  const mockTypes = [{ 
    value: 'type1', 
    dependentValue: { 
      hazard: 'h1', 
      equipmentBreakdown: 'e1' 
    } 
  }];
  
  // Mock service responses
  mockReToolService.getOccupancyGroup.and.returnValue(of({
    occupancyGroups: [],
    hazard: [],
    equipmentBreakdown: []
  }));
  mockReToolService.getOccupancyType.and.returnValue(of(mockTypes));

  // Initialize component
  component.ngOnInit();
  tick();
  fixture.detectChanges();

  // Act
  component.changeOccupancyType(0, 'type1');
  tick();
  
  // Assert
  const row = component.getFormArray().at(0);
  expect(row.get('Hazard').value).toBe('h1');
  expect(row.get('EquipmentBreakdown').value).toBe('e1');
  expect(row.get('Action').value).toBe(ActionEnum.IsModified);
}));
