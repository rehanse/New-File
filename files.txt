calculateOverAllRatingNAP(rows: any[], tivPercent: number, aci: number): number | null {
    if (!rows?.length || tivPercent <= 0 || aci <= 0) return null;

    const tivReview = rows.reduce((sum, row) => sum + (row.ReviewedTIV ?? 0), 0);
    if (this.commonService.isValueEmpty(tivReview) || tivReview <= 0) return null;

    const countByCondition = (condition: (row: any) => boolean) => rows.filter(condition).length;
    
    const countHighEBR = countByCondition(row => Number(row.EquipmentBreakdown) === 3);
    const countNLEValue = countByCondition(row => row.NormalLossExpectancy > 0);
    const countPMLValue = countByCondition(row => row.ProbableMaximumLoss > 0);
    const countMFLValue = countByCondition(row => row.MaximumForeseeableLoss > 0);
    const countCountryValue = Number(localStorage.getItem('countryCount') ?? 0) || 1; // Avoid division by zero
    
    const countEBPML = countByCondition(row => Number(row.EquipmentBreakdown) === 3 && row.EBProbableMaximumLoss > 0);
    const countEBMFL = countByCondition(row => Number(row.EquipmentBreakdown) === 3 && row.EBMaximumForeseeableLoss > 0);
    
    const baseCalculation = tivPercent * (aci / 5) * (1 / 3) * (countNLEValue + countPMLValue + countMFLValue) / countCountryValue;
    
    let overAllRatingNAP = countHighEBR > 0 
        ? baseCalculation * (0.5 * (1 / 3) + 0.5 * 0.5 * (countEBPML + countEBMFL) / countHighEBR)
        : baseCalculation;

    return isFinite(overAllRatingNAP) ? Math.round(overAllRatingNAP) : 0;
}
-----------------------------------------------
calculateOverAllRatingNAP(rows: any[], tivPercent: number, aci: number): number | null {
    if (!rows?.length || tivPercent <= 0 || aci <= 0) return null;

    const tivReview = rows.reduce((sum, row) => sum + (row.ReviewedTIV ?? 0), 0);
    if (this.commonService.isValueEmpty(tivReview) || tivReview <= 0) return null;

    const countHighEBR = rows.filter(ebr => Number(ebr.EquipmentBreakdown) === 3).length;
    const countNLEValue = rows.filter(nle => nle.NormalLossExpectancy > 0).length;
    const countPMLValue = rows.filter(pml => pml.ProbableMaximumLoss > 0).length;
    const countMFLValue = rows.filter(mfl => mfl.MaximumForeseeableLoss > 0).length;
    const countCountryValue = Number(localStorage.getItem('countryCount') ?? 0) || 1; // Avoid division by zero
    
    const countEBPML = rows.filter(ebpml => Number(ebpml.EquipmentBreakdown) === 3 && ebpml.EBProbableMaximumLoss > 0).length;
    const countEBMFL = rows.filter(ebmfl => Number(ebmfl.EquipmentBreakdown) === 3 && ebmfl.EBMaximumForeseeableLoss > 0).length;

    let overAllRatingNAP = tivPercent * (aci / 5) * (1 / 3) * (countNLEValue + countPMLValue + countMFLValue) / countCountryValue;
    
    if (countHighEBR > 0) {
        overAllRatingNAP *= (0.5 * (1 / 3) * (countNLEValue + countPMLValue + countMFLValue) / countCountryValue + 0.5 * 0.5 * (countEBPML + countEBMFL) / countHighEBR);
    }

    return isFinite(overAllRatingNAP) ? Math.round(overAllRatingNAP) : 0;
}
