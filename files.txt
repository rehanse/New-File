import { ComponentFixture, TestBed } from '@angular/core/testing';
import { GeneralPropertyComponent } from './general-property.component';
import { FormBuilder, ReactiveFormsModule, FormGroup, FormControl, FormArray, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { of } from 'rxjs';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';
import { CommonService } from '../../../../../shared/services/common.service';

describe('GeneralPropertyComponent', () => {
  let component: GeneralPropertyComponent;
  let fixture: ComponentFixture<GeneralPropertyComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;
  let mockCalculationService: jasmine.SpyObj<ReToolCalculationService>;
  let mockCommonService: jasmine.SpyObj<CommonService>;
  let mockDialog: jasmine.SpyObj<MatDialog>;

  beforeEach(async () => {
    mockReToolService = jasmine.createSpyObj('ReToolService', ['getGeneralPropertyWeight', 'getPropertyMaster']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['emit', 'on', 'showErrorMessage', 'actionStateChange']);
    mockCalculationService = jasmine.createSpyObj('ReToolCalculationService', ['setRedistributionWeights']);
    mockCommonService = jasmine.createSpyObj('CommonService', ['getDateByTimeZone']);
    mockDialog = jasmine.createSpyObj('MatDialog', ['open']);

    mockReToolTabService.on.and.returnValue(of({}));
    mockReToolTabService.actionStateChange.and.callFake(() => {});
    mockReToolService.getGeneralPropertyWeight.and.returnValue(of([]));
    mockReToolService.getPropertyMaster.and.returnValue(of([]));
    mockCalculationService.setRedistributionWeights.and.returnValue({ calculate: jasmine.createSpy('calculate').and.returnValue({}) });
    mockCommonService.getDateByTimeZone.and.returnValue(of('2025-02-21'));
