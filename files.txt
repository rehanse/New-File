import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { OccupancyComponent } from './occupancy.component';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { FormBuilder, ReactiveFormsModule, FormControlStatus } from '@angular/forms';
import { MatTableModule } from '@angular/material/table';
import { MasterDataModel } from '../../../../dashboard/models/master-data';
import { Occupancy } from '../../../models/occupancy';
import { of, Subscription } from 'rxjs';
import { ActionEnum } from '../../../models/action-enum';
import { SubTabEncodedEnum } from '../../../models/re-tool-tabs-enum';
import { ReToolConstants } from '../../../constants/re-tool.constants';

describe('OccupancyComponent', () => {
  let component: OccupancyComponent;
  let fixture: ComponentFixture<OccupancyComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;
  const fb = new FormBuilder();

  beforeEach(async () => {
    mockReToolService = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getOccupancyType']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', 
      ['on', 'emit', 'mergePropertyValueData', 'showErrorMessage', 'actionStateChange']);
    
    await TestBed.configureTestingModule({
      imports: [ReactiveFormsModule, MatTableModule],
      declarations: [OccupancyComponent],
      providers: [
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService },
        FormBuilder
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(OccupancyComponent);
    component = fixture.componentInstance;
  });

  afterEach(() => {
    if (component.subscription) {
      component.subscription.unsubscribe();
    }
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('Initialization', () => {
    it('should initialize form and load occupancy groups on ngOnInit', () => {
      const mockMasterData: MasterDataModel[] = [{ value: '1', text: 'Group 1' }];
      mockReToolService.getOccupancyGroup.and.returnValue(of({
        occupancyGroups: mockMasterData,
        hazard: [],
        equipmentBreakdown: []
      }));
      
      component.ngOnInit();
      
      expect(mockReToolService.getOccupancyGroup).toHaveBeenCalledWith(0);
      expect(mockReToolTabService.emit).toHaveBeenCalledWith(
        'onFormComponentInit', 
        { encodedTabIndex: SubTabEncodedEnum.Occupancy }
      );
    });
  });

  describe('Form Initialization', () => {
    beforeEach(() => {
      component.occupancyData = [createMockOccupancy()];
      component.occupancyDisplayedColumns = ['LocationName'];
    });

    it('should initialize form with data from service', () => {
      const mockEvent = {
        data: [createMockOccupancy()],
        columns: ['LocationName']
      };
      
      mockReToolTabService.on.and.returnValue(of(mockEvent));
      mockReToolTabService.mergePropertyValueData.and.returnValue(mockEvent.data);
      
      component.initializeForm();
      
      expect(component.occupancyForm).toBeDefined();
      expect(component.occupancyDataSource).toBeTruthy();
      expect(component.tableRowsControls.length).toBe(1);
    });
  });

  describe('Form Interactions', () => {
    beforeEach(() => {
      initializeFormWithData();
    });

    it('should create form row with correct controls', () => {
      const row = component.createRow(createMockOccupancy());
      expect(row.get('LocationName').disabled).toBeTrue();
      expect(row.get('OccupancyGroup').validator).toBeTruthy();
    });

    it('should handle occupancy group change', () => {
      const mockTypes = [{ value: 'type1', dependentValue: { hazard: 'h1', equipmentBreakdown: 'e1' } }];
      mockReToolService.getOccupancyType.and.returnValue(of(mockTypes));
      
      component.changeOccupancyGroup(0, '1');
      const row = component.getFormArray().at(0);
      
      expect(row.get('OccupancyType').value).toBe(ReToolConstants.blank);
      expect(mockReToolService.getOccupancyType).toHaveBeenCalledWith('1');
    });

    it('should handle occupancy type change', () => {
      const row = component.getFormArray().at(0);
      component.rowValuesMap.set(0, {
        OccupancyTypeList: [{ value: 'type1', dependentValue: { hazard: 'h1', equipmentBreakdown: 'e1' } }]
      });
      
      component.changeOccupancyType(0, 'type1');
      
      expect(row.get('Hazard').value).toBe('h1');
      expect(row.get('EquipmentBreakdown').value).toBe('e1');
      expect(row.get('Action').value).toBe(ActionEnum.IsModified);
    });

    it('should update highlights when values differ from default', () => {
      const row = component.getFormArray().at(0);
      component.rowValuesMap.set(0, {
        OccupancyTypeList: [{ value: 'type1', dependentValue: { hazard: 'default', equipmentBreakdown: 'default' } }]
      });
      
      row.get('Hazard').setValue('modified');
      component.updateHighlight(0, 'type1', 'Hazard');
      
      expect(row.controls['Hazard'][ReToolConstants.isHighlighted]).toBeTrue();
      expect(row.get('IsHazardUpdated').value).toBeTrue();
    });
  });

  describe('Form Validation', () => {
    it('should mark form invalid when required fields are empty', () => {
      initializeFormWithData();
      const row = component.getFormArray().at(0);
      row.get('OccupancyGroup').setValue('');
      
      component.occupancyForm.markAllAsTouched();
      
      expect(component.occupancyForm.invalid).toBeTrue();
      expect(mockReToolTabService.formStatus).toBe(ReToolConstants.invalid);
    });
  });

  describe('Submission Handling', () => {
    it('should emit valid form data on submit', () => {
      initializeFormWithValidData();
      
      component.onSubmit();
      
      expect(mockReToolTabService.emit).toHaveBeenCalledWith(
        'onSaveFormData', 
        jasmine.objectContaining({ formData: jasmine.any(Array) })
      );
    });

    it('should show error message on invalid submission', () => {
      initializeFormWithData();
      const row = component.getFormArray().at(0);
      row.get('OccupancyGroup').setValue('');
      
      component.onSubmit();
      
      expect(mockReToolTabService.showErrorMessage).toHaveBeenCalledWith(
        ReToolConstants.requiredFieldsValidationMessage, 
        ''
      );
    });
  });

  describe('Private Methods', () => {
    it('should get form array through private method', () => {
      initializeFormWithData();
      const formArray = component['getFormArray']();
      expect(formArray).toBeInstanceOf(FormArray);
    });

    it('should disable dropdown controls when no group selected', () => {
      const row = fb.group({
        Hazard: new FormControl({ value: '', disabled: false }),
        EquipmentBreakdown: new FormControl({ value: '', disabled: false })
      });
      
      component['disableDropdownControl'](row, true);
      
      expect(row.get('Hazard').disabled).toBeTrue();
      expect(row.get('EquipmentBreakdown').disabled).toBeTrue();
    });
  });

  describe('Lifecycle Hooks', () => {
    it('should unsubscribe on destroy', () => {
      component.subscription = new Subscription();
      spyOn(component.subscription, 'unsubscribe');
      
      component.ngOnDestroy();
      
      expect(component.subscription.unsubscribe).toHaveBeenCalled();
    });
  });

  // Helper functions
  function createMockOccupancy(): Occupancy {
    return {
      ULId: '1',
      LocationName: 'Test Location',
      OccupancyGroup: '1',
      OccupancyType: 'type1',
      Hazard: 'h1',
      EquipmentBreakdown: 'e1',
      Action: ActionEnum.IsSaved
    };
  }

  function initializeFormWithData() {
    component.occupancyForm = fb.group({
      rows: fb.array([component.createRow(createMockOccupancy())])
    });
    component.occupancyDataSource = new MatTableDataSource(component.tableRowsControls);
  }

  function initializeFormWithValidData() {
    const occupancy = createMockOccupancy();
    occupancy.OccupancyGroup = 'valid';
    component.occupancyForm = fb.group({
      rows: fb.array([component.createRow(occupancy)])
    });
  }
});
