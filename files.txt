calculateOverAllRatingNAP(rows: any, tivPercent: number, aci: number): any | null {debugger
    let countHighEBR = 0;
    let countNLEValue = 0;
    let countPMLValue = 0;
    let countMFLValue = 0;
    let countCountryValue = 0;
    let countEBPML = 0;
    let countEBMFL = 0;
    let tivReview: any;

    let overAllRatingNAP: any = 0;

    // if reviewed TIV is less than or equal to 0 then it should return and PD index will be empty
    tivReview = rows.reduce((sum, row) => sum + (row.ReviewedTIV ?? 0), 0);

    if (this.commonService.isValueEmpty(tivReview) || tivReview <= 0) return null;

    countHighEBR = rows.filter(ebr => ebr.EquipmentBreakdown === '3' || ebr.EquipmentBreakdown === 3).length;
    countNLEValue = rows.filter(nle => nle.NormalLossExpectancy > 0).length;
    countPMLValue = rows.filter(pml => pml.ProbableMaximumLoss > 0).length;
    countMFLValue = rows.filter(mfl => mfl.MaximumForeseeableLoss > 0).length;
    countCountryValue = Number(localStorage.getItem('countryCount') ?? 0);
    countEBPML = rows.filter(ebpml => (ebpml.EquipmentBreakdown === '3' || ebpml.EquipmentBreakdown === 3) && ebpml.EBProbableMaximumLoss > 0).length;
    countEBMFL = rows.filter(ebmfl => (ebmfl.EquipmentBreakdown === '3' || ebmfl.EquipmentBreakdown === 3) && ebmfl.EBMaximumForeseeableLoss > 0).length;

    if (countHighEBR > 0) {
      overAllRatingNAP = tivPercent * (aci / 5) * (0.5 * (1 / 3) * (countNLEValue + countPMLValue + countMFLValue) / countCountryValue + 0.5 * 0.5 * (countEBPML + countEBMFL) / countHighEBR);
    }
    else {
      overAllRatingNAP = tivPercent * (aci / 5) * 1 * (1 / 3) * (countNLEValue + countPMLValue + countMFLValue) / countCountryValue;
    }

    if (overAllRatingNAP === null || isNaN(overAllRatingNAP) || overAllRatingNAP === undefined || overAllRatingNAP === Infinity)
      return 0
    else
      return Math.round(Number(overAllRatingNAP));
  }
}
