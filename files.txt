Perfect üëç let‚Äôs refactor the solution to use ng-bootstrap popover so that:

You just drop an fx button in any column.

The popover opens inline with an arrow, Excel-style.

It auto-adjusts (top/bottom/left/right) ‚Äî handled by ng-bootstrap.

It only closes on OK / Cancel (not background click).



---

‚úÖ Step 1 ‚Äì Install ng-bootstrap

If you haven‚Äôt already:

ng add @ng-bootstrap/ng-bootstrap


---

‚úÖ Step 2 ‚Äì Table HTML with Popover

<table class="table table-bordered custom-table">
  <thead>
    <tr>
      <th>Total PD</th>
      <th>IBI</th>
      <th>Other TE</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let row of data; let i = index">
      <td>{{ row.totalPD }}</td>

      <!-- Example column: IBI -->
      <td>
        {{ row.ibi }}
        <button type="button"
                class="btn btn-link p-0 fx-btn"
                [ngbPopover]="formulaTpl"
                popoverClass="formula-popover"
                placement="bottom"
                triggers="manual"
                #p="ngbPopover"
                (click)="togglePopover(p, i, 'ibi')">
          fx
        </button>
      </td>

      <!-- Example column: Other TE -->
      <td>
        {{ row.otherTE }}
        <button type="button"
                class="btn btn-link p-0 fx-btn"
                [ngbPopover]="formulaTpl"
                popoverClass="formula-popover"
                placement="bottom"
                triggers="manual"
                #p2="ngbPopover"
                (click)="togglePopover(p2, i, 'otherTE')">
          fx
        </button>
      </td>
    </tr>
  </tbody>
</table>

<!-- Popover Template (shared for all columns) -->
<ng-template #formulaTpl>
  <div class="formula-box">
    <input type="text"
           class="form-control form-control-sm"
           [(ngModel)]="formula"
           placeholder="@TotalPD*0.25-0.1" />
    <div class="popup-actions">
      <button class="btn btn-primary btn-sm" (click)="applyFormula(activeRow, activeCol, activePopover)">Ok</button>
      <button class="btn btn-secondary btn-sm" (click)="closePopover()">Cancel</button>
    </div>
  </div>
</ng-template>


---

‚úÖ Step 3 ‚Äì Component Logic

import { Component } from '@angular/core';
import { NgbPopover } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-my-table',
  templateUrl: './my-table.component.html',
  styleUrls: ['./my-table.component.scss']
})
export class MyTableComponent {
  data = [
    { totalPD: 26.8, ibi: 0, otherTE: 0 },
    { totalPD: 15.2, ibi: 0, otherTE: 0 }
  ];

  activeRow: number | null = null;
  activeCol: string | null = null;
  activePopover: NgbPopover | null = null;
  formula = '';

  togglePopover(popover: NgbPopover, rowIndex: number, col: string) {
    // Close previous popover if another is opened
    if (this.activePopover && this.activePopover !== popover) {
      this.activePopover.close();
    }

    if (this.activeRow === rowIndex && this.activeCol === col) {
      // Clicking same button -> close
      popover.close();
      this.activeRow = null;
      this.activeCol = null;
      this.activePopover = null;
    } else {
      popover.open();
      this.activeRow = rowIndex;
      this.activeCol = col;
      this.activePopover = popover;
      this.formula = '';
    }
  }

  applyFormula(rowIndex: number | null, col: string | null, popover: NgbPopover | null) {
    if (rowIndex === null || col === null) return;

    let expr = this.formula;
    Object.keys(this.data[rowIndex]).forEach(key => {
      expr = expr.replace(new RegExp(`@${key}`, 'g'), this.data[rowIndex][key]);
    });

    try {
      // ‚ö†Ô∏è Demo only: use a proper parser in production
      // eslint-disable-next-line no-eval
      this.data[rowIndex][col] = eval(expr);
    } catch {
      alert('Invalid formula');
    }

    if (popover) popover.close();
    this.resetActive();
  }

  closePopover() {
    if (this.activePopover) this.activePopover.close();
    this.resetActive();
  }

  private resetActive() {
    this.activeRow = null;
    this.activeCol = null;
    this.activePopover = null;
    this.formula = '';
  }
}


---

‚úÖ Step 4 ‚Äì Scoped Styling

my-table.component.scss

.fx-btn {
  font-weight: bold;
  color: blue;
  cursor: pointer;
  margin-left: 5px;
}

.formula-popover .popover-body {
  padding: 0 !important;
}

.formula-box {
  padding: 10px;
  width: 260px;
}

.popup-actions {
  display: flex;
  justify-content: flex-end;
  gap: 6px;
  margin-top: 6px;
}


---

üöÄ Result

Click fx ‚Üí inline popover appears with arrow pointing to column.

Popover auto-flips (top/left/right/bottom) to avoid being cut off.

Only OK / Cancel closes it (no outside click).

Reusable: just add fx button with [ngbPopover]="formulaTpl".



---

üëâ Do you also want me to extend this so the popover can be resized (like Excel formula bar), or should we keep it fixed width (260px)?

Perfect üëç Let‚Äôs make it fully reusable as its own Angular component.

We‚Äôll create a FxPopoverComponent that you can drop anywhere with an fx icon, and it will handle the input + OK/Cancel buttons internally.


---

‚úÖ Step 1: Create Component

ng generate component shared/fx-popover


---

‚úÖ fx-popover.component.ts

import { Component, EventEmitter, Input, Output } from '@angular/core';
import { NgbPopover } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-fx-popover',
  templateUrl: './fx-popover.component.html',
  styleUrls: ['./fx-popover.component.scss']
})
export class FxPopoverComponent {
  @Input() value: any;   // current value (e.g. column value)
  @Input() rowIndex!: number; // row index
  @Input() colKey!: string;   // column key (e.g. "ibi")

  @Output() formulaApplied = new EventEmitter<{ rowIndex: number; col: string; formula: string }>();

  formula: string = '';
  activePopover: NgbPopover | null = null;

  togglePopover(popover: NgbPopover) {
    if (this.activePopover && this.activePopover !== popover) {
      this.activePopover.close();
    }
    if (popover.isOpen()) {
      popover.close();
      this.activePopover = null;
    } else {
      popover.open();
      this.activePopover = popover;
    }
  }

  onOk() {
    this.formulaApplied.emit({
      rowIndex: this.rowIndex,
      col: this.colKey,
      formula: this.formula
    });
    this.closePopover();
  }

  onCancel() {
    this.closePopover();
  }

  private closePopover() {
    if (this.activePopover) {
      this.activePopover.close();
      this.activePopover = null;
    }
    this.formula = '';
  }
}


---

‚úÖ fx-popover.component.html

<button type="button"
        class="btn btn-link p-0 fx-btn"
        [ngbPopover]="fxTpl"
        popoverClass="fx-popover"
        placement="auto"
        triggers="manual"
        #p="ngbPopover"
        (click)="togglePopover(p)">
  fx
</button>

<ng-template #fxTpl>
  <div class="fx-container">
    <input type="text"
           class="form-control form-control-sm"
           [(ngModel)]="formula"
           placeholder="Enter formula" />

    <div class="fx-actions">
      <button class="btn btn-sm btn-primary" (click)="onOk()">OK</button>
      <button class="btn btn-sm btn-secondary" (click)="onCancel()">Cancel</button>
    </div>
  </div>
</ng-template>


---

‚úÖ fx-popover.component.scss

.fx-btn {
  font-weight: bold;
  color: blue;
  cursor: pointer;
  margin-left: 5px;
}

.fx-popover .popover-body {
  padding: 8px !important;
}

.fx-container {
  display: flex;
  flex-direction: column;
  gap: 6px;
  width: 220px;
}

.fx-actions {
  display: flex;
  justify-content: flex-end;
  gap: 6px;
}


---

‚úÖ Usage in Table (fx-table.component.html)

<table class="table table-bordered">
  <thead>
    <tr>
      <th>Total PD</th>
      <th>IBI</th>
      <th>Other TE</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let row of data; let i = index">
      <td>
        {{ row.totalPD }}
        <app-fx-popover
          [rowIndex]="i"
          colKey="totalPD"
          [value]="row.totalPD"
          (formulaApplied)="applyFormula($event)">
        </app-fx-popover>
      </td>

      <td>
        {{ row.ibi }}
        <app-fx-popover
          [rowIndex]="i"
          colKey="ibi"
          [value]="row.ibi"
          (formulaApplied)="applyFormula($event)">
        </app-fx-popover>
      </td>

      <td>
        {{ row.otherTE }}
        <app-fx-popover
          [rowIndex]="i"
          colKey="otherTE"
          [value]="row.otherTE"
          (formulaApplied)="applyFormula($event)">
        </app-fx-popover>
      </td>
    </tr>
  </tbody>
</table>


---

‚úÖ Parent Component Logic (fx-table.component.ts)

import { Component } from '@angular/core';

@Component({
  selector: 'app-fx-table',
  templateUrl: './fx-table.component.html'
})
export class FxTableComponent {
  data = [
    { totalPD: 26.8, ibi: 0, otherTE: 0 },
    { totalPD: 15.2, ibi: 0, otherTE: 0 }
  ];

  applyFormula(event: { rowIndex: number; col: string; formula: string }) {
    console.log('Formula applied:', event);

    try {
      const row = this.data[event.rowIndex];
      const expr = event.formula.replace('@TotalPD', row.totalPD.toString());

      // WARNING: using eval is risky in real apps. Replace with parser later.
      // eslint-disable-next-line no-eval
      const result = eval(expr);

      row[event.col] = result;
    } catch {
      alert('Invalid formula');
    }
  }
}


---

‚úÖ Now FxPopoverComponent is fully reusable:

You can drop <app-fx-popover> in any column.

It auto-adjusts (placement="auto").

Each popover is independent, but ensures only one stays open.

Emits event to parent when user clicks OK.



---

Do you want me to also add Excel-like formula placeholder replacement (e.g. @IBI, @TotalPD, etc. for any column), so it becomes smarter?


