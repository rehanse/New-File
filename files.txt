beforeEach(async () => {
    reToolServiceMock = jasmine.createSpyObj('ReToolService', ['generateFormElementIdAttribute']);
    reToolServiceMock.generateFormElementIdAttribute.and.callFake((rowIndex: number, dataId: number, columnName: string, popUp?: string) => {
        return `row-${rowIndex}_dataKey-${dataId}_${columnName}`;
    });

    reToolTabServiceMock = jasmine.createSpyObj('ReToolTabService', [
        'reviewRequestId', 
        'emit', 
        'showErrorMessage', 
        'actionStateChange', 
        'on'
    ]);

    // âœ… Fix: Mock `on()` to return a BehaviorSubject as an Observable
    reToolTabServiceMock.on.and.returnValue(new BehaviorSubject(null).asObservable());

    reToolTabServiceMock.hasFormChange$ = new BehaviorSubject<boolean>(false);

    await TestBed.configureTestingModule({
        declarations: [NormalLossExpectancyComponent],
        schemas: [NO_ERRORS_SCHEMA],
        imports: [
            ReactiveFormsModule,
            MatTableModule,
            HttpClientTestingModule,
            ToastrModule.forRoot()
        ],
        providers: [
            FormBuilder,
            { provide: ReToolService, useValue: reToolServiceMock },
            { provide: ReToolTabService, useValue: reToolTabServiceMock }  // Ensure mock is injected
        ]
    }).compileComponents();

    fixture = TestBed.createComponent(NormalLossExpectancyComponent);
    component = fixture.componentInstance;
    component.showHideColumn = true;
    component.normalLossExpectancyForm = new FormGroup({
        rows: new FormArray([
            new FormGroup({
                NormalLossScenario: new FormControl("test scenario", Validators.required),
                NormalLossDeficiencyDriven: new FormControl(true, Validators.required)
            })
        ])
    });

    fixture.detectChanges();
});
