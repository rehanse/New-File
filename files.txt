--------------------CoverComponent---------------------------------------
import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormControlStatus, FormGroup, Validators } from '@angular/forms';
import { ReToolService } from '../../../service/re-tool.service';
import { FormDataSource } from '../../../models/form-data-source';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { ActionEnum } from '../../../models/action-enum';
import { MasterDataModel } from '../../../../dashboard/models/master-data';
import { ReToolConstants } from '../../../constants/re-tool.constants';
import { SubTabEncodedEnum } from '../../../models/re-tool-tabs-enum';
import { Utility } from '../../../utility/mapper-util';
import { Cover } from '../../../models/cover';
import { PropertyLocation } from '../../../models/property-location';
import { HazardEnum } from '../../../models/hazard-enum';
import { Subscription } from 'rxjs';
import { CoverUnderwritingSummary } from '../../../models/cover-underwriting-summary';
import { PropertyMasterDataTypeEnum } from '../../../models/property-master-data-type-enum';
import { CommonService } from '../../../../../shared/services/common.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';

@Component({
  selector: 're-tool-cover',
  templateUrl: './cover.component.html',
  styleUrls: ['./cover.component.css']
})
export class CoverComponent implements OnInit, OnDestroy {
  coverForm!: FormGroup;
  coverDisplayedColumns: string[] = [];
  coverData: Cover;
  subscription: Subscription = new Subscription();
  OccupancyGroupData: MasterDataModel[] = [];
  HazardData: MasterDataModel[] = [];
  EquipmentBreakdownData: MasterDataModel[] = [];
  rowValuesMap: Map<number, any> = new Map();
  isDisableControlEmpty: boolean = false;
  occupancyData: CoverUnderwritingSummary = {
    occupancyGroupTIV: null,
    occupancyTypeTIV: null,
    occupancyCodeTIV: null,
    hazardTIV: null,
    deviationTIV: null,
    equipmentBreakdownTIV: null,
    isHazardTIVUpdated: null,
    isEquipmentBreakdownUpdatedTIV: null,
    occupancyHighestHazardReview: null,
    equipmentBreakdownHazardReview: null,
    deviationHighestHazardReview: null,
    isHazardReviewUpdated: null,
    isEBRHazardReviewUpdated: null
  }
  private previousFormStatus: FormControlStatus = ReToolConstants.valid;
  interdependencyMasterData: MasterDataModel[] = [];
  qualityOfSupplyChainInfoMasterData: MasterDataModel[] = [];
  supplyChainConfidenceValue: string = ReToolConstants.blank;
  isTimeElement: boolean = false;
  overAllRatingPDIndex: number | string | null;

  constructor(
    private reToolService: ReToolService,
    private fb: FormBuilder,
    private reToolTabService: ReToolTabService,
    private commonService: CommonService,
    private reToolCalculationService: ReToolCalculationService
  ) { }

  ngOnInit(): void {
    this.isTimeElement = false;
    this.supplyChainConfidenceValue = ReToolConstants.blank;
    this.initializeForm();
    this.getCoverMasterData();
    this.loadOccupancyGroups();
    this.reToolTabService.emit('onFormComponentInit', { encodedTabIndex: SubTabEncodedEnum.Cover });
    this.getOverAllRatingSessionData();
  }

  initializeForm() {
    this.coverForm = this.initializeCoverForm(this.coverData);

    const onInitializeCoverData = this.reToolTabService.on('onInitializeCoverData').subscribe({
      next: (event: FormDataSource) => {
        if (event.data) {
          this.coverDisplayedColumns = event.columns;
          this.coverData = event.data;
          this.coverData = this.setOccpancyValuesAfterDeserialize();
          this.initializeDataSource();
        }
      },
      error: (error) => {
        throw new Error(error);
      }
    });
    this.subscription.add(onInitializeCoverData);

    this.subscription.add(
      this.reToolTabService.on('onProcessingSave').subscribe((event) => {
        if (this.coverForm) {
          this.coverForm.markAllAsTouched();
          this.coverForm.markAsPristine();
          this.coverForm.updateValueAndValidity();
          this.updateCoverOccupancyData();
          this.checkDisableRequiredControl();
          this.reToolTabService.formStatus = this.coverForm.status;

          const hasFormError = this.coverForm.status === ReToolConstants.invalid;

          if (hasFormError || this.isDisableControlEmpty) {
            this.reToolTabService.showErrorMessage(ReToolConstants.requiredFieldsValidationMessage, '');
          } else {
            this.reToolTabService.emit('onSaveFormData', { formData: this.getCoverFormData, subTabIndex: 0, tabInfo: event.tabInfo, isTabChange: event.isTabChange });
          }
        }
      })
    );

    this.subscription.add(
      this.coverForm.statusChanges.subscribe((status) => {
        if (status !== this.previousFormStatus) {
          this.previousFormStatus = this.coverForm.status;
          this.reToolTabService.formStatus = this.coverForm.status;
        }
      })
    );
  }

  initializeDataSource() {
    this.rowValuesMap.clear();
    this.coverForm = this.initializeCoverForm(this.coverData)
    this.calculatedReviewedBuilding(this.coverForm);
    this.calculatedReviewedContents(this.coverForm);
    this.calculatedReviewedTotalPD(this.coverForm);
    this.calculatedReviewedTotalBI(this.coverForm);
    this.calculatedReviewedTIV(this.coverForm);
    this.totalReportedTotalPD(this.coverForm);
    this.calculatedPercentageReviewedBuilding(this.coverForm);
    this.calculatedPercentageReviewedContents(this.coverForm);
    this.calculatedPercentageReviewedTotalPD(this.coverForm);
    this.calculatedPercentageReviewedTotalBI(this.coverForm);
    this.calculatedPercentageReviewedTIV(this.coverForm);
    this.setRecommendedReviewFrequency(this.coverForm);
    this.setupCalculationSubscribers(this.coverForm);
    this.calculateSupplyChainConfidence(this.coverForm);
    this.getHighestFireAndEBBasedOnLocation(this.coverForm);

    for (let index = 0; index <= 1; index++) {
      this.rowValuesMap.set(index, {
        OccupancyTypeList: []
      });

      if (index === 0) {
        this.getOccupancyType(index, this.coverData.OccupancyGroupTIV || '0', this.rowValuesMap.get(index), this.coverForm);
        this.coverForm.controls['HazardTIV'][ReToolConstants.isHighlighted] = this.coverData.IsHazardTIVUpdated;
        this.coverForm.controls['EquipmentBreakdownTIV'][ReToolConstants.isHighlighted] = this.coverData.IsEquipmentBreakdownUpdatedTIV;
        this.reToolTabService.actionStateChange(this.coverForm);
        this.disableDropdownControl(index, this.coverForm, false);
      }
      else {
        this.getOccupancyBasedonHighestHazard(index, '0', this.rowValuesMap.get(index), this.coverForm);
        this.coverForm.controls['OccupancyHighestHazardReview'][ReToolConstants.isHighlighted] = this.coverForm.value.IsHazardUpdatedForHazard;;
        this.coverForm.controls['EquipmentBreakdownHazardReview'][ReToolConstants.isHighlighted] = this.coverForm.value.IsEquipmentBreakdownUpdatedForHazard;
        this.reToolTabService.actionStateChange(this.coverForm);
        this.disableDropdownControl(index, this.coverForm, false);

      }
    }
    this.isTimeElementExcluded(this.coverForm.controls["TimeElementExcluded"].value);
  }

  initializeCoverForm(data: Cover): FormGroup {
    if (data != undefined) this.isTimeElementExcluded(String(data.TimeElementExcluded));
    return this.fb.group({
      ReportedBuildingValue: new FormControl(data != undefined ? this.setDefaultValue(data.ReportedBuildingValue) || ReToolConstants.blank : ReToolConstants.blank, Validators.required),
      ReportedContentsValue: new FormControl(data != undefined ? this.setDefaultValue(data.ReportedContentsValue) || ReToolConstants.blank : ReToolConstants.blank, Validators.required),
      ReportedTotalPD: new FormControl({ value: data != undefined ? Utility.commaSepratedValueForDisabledInput(this.calculatedReportedTotalPD(data.ReportedBuildingValue, data.ReportedContentsValue)) || '0.0' : '0.0', disabled: true }, Validators.required),
      ReportedTotalBivalue: new FormControl({ value: data != undefined ? this.setDefaultValue(data.ReportedTotalBivalue) : ReToolConstants.blank, disabled: false }, Validators.required),
      ReportedTIV: new FormControl({ value: data != undefined ? Utility.commaSepratedValueForDisabledInput(this.calculatedReportedTotalTIV(data.ReportedTotalPD, data.ReportedTotalBivalue)) || '0.0' : '0.0', disabled: true }, Validators.required),
      ReviewedBuilding: new FormControl({ value: data != undefined ? data.ReviewedBuilding || '0.0' : '0.0', disabled: true }),
      ReviewedContents: new FormControl({ value: data != undefined ? data.ReviewedContents || '0.0' : '0.0', disabled: true }),
      ReviewedTotalPD: new FormControl({ value: data != undefined ? data.ReviewedTotalPD || '0.0' : '0.0', disabled: true }),
      ReviewedTotalBI: new FormControl({ value: data != undefined ? data.ReviewedTotalBI || '0.0' : '0.0', disabled: true }),
      ReviewedTIV: new FormControl({ value: data != undefined ? data.ReviewedTIV || '0.0' : '0.0', disabled: true }),
      ReviewedPercentageBuilding: new FormControl({ value: data != undefined ? data.ReviewedPercentageBuilding || '0.0' : '0%', disabled: true }),
      ReviewedPercentageContents: new FormControl({ value: data != undefined ? data.ReviewedPercentageContents || '0.0' : '0%', disabled: true }),
      ReviewedPercentageTotalPD: new FormControl({ value: data != undefined ? data.ReviewedPercentageTotalPD || '0.0' : '0%', disabled: true }),
      ReviewedPercentageTotalBI: new FormControl({ value: data != undefined ? data.ReviewedPercentageTotalBI || '0%': '0%', disabled: true }),
      ReviewedPercentageTIV: new FormControl({ value: data != undefined ? data.ReviewedPercentageTIV || '0%' : '0%', disabled: true }),
      TimeElementExcluded: new FormControl({ value: data != undefined ? data.TimeElementExcluded || false : false, disabled: false }, Validators.required),
      RecommendedReviewFrequency: new FormControl({ value: data != undefined ? data.RecommendedReviewFrequency || '' : '', disabled: true }, Validators.required),
      RecommendedAccountPercentageTIV: new FormControl({ value: data != undefined ? data.RecommendedAccountPercentageTIV || '' : '', disabled: true }, Validators.required),
      OccupancyGroupTIV: new FormControl({ value: data != undefined ? data.OccupancyGroupTIV || '' : '', disabled: false }, Validators.required),
      OccupancyTypeTIV: new FormControl({ value: data != undefined ? data.OccupancyTypeTIV || '' : '', disabled: false }, Validators.required),
      OccupancyCodeTIV: new FormControl({ value: data != undefined ? data.OccupancyCodeTIV || '' : '', disabled: true }, Validators.required),
      HazardTIV: new FormControl({ value: data != undefined ? data.HazardTIV || '' : '', disabled: false }, Validators.required),
      EquipmentBreakdownTIV: new FormControl({ value: data != undefined ? data.EquipmentBreakdownTIV || '' : '', disabled: false }, Validators.required),
      DeviationTIV: new FormControl({ value: data != undefined ? data.DeviationTIV || '' : '', disabled: false }, Validators.required),
      IsHazardTIVUpdated: new FormControl(data != undefined ? data.IsHazardTIVUpdated || false : false),
      IsEquipmentBreakdownUpdatedTIV: new FormControl(data != undefined ? data.IsEquipmentBreakdownUpdatedTIV || false : false),
      OccupancyGroupHighestHazardReview: new FormControl({ value: data != undefined ? data.OccupancyGroupHighestHazardReview || '' : '', disabled: true }),
      OccupancyTypeHighestHazardReview: new FormControl({ value: data != undefined ? data.OccupancyTypeHighestHazardReview || '' : '', disabled: true }),
      OccupancyCodeHighestHazardReview: new FormControl({ value: data != undefined ? data.OccupancyCodeHighestHazardReview || '' : '', disabled: true }),
      OccupancyHighestHazardReview: new FormControl({ value: data != undefined ? data.OccupancyHighestHazardReview || '' : '', disabled: false }, Validators.required),
      EquipmentBreakdownHazardReview: new FormControl({ value: data != undefined ? data.EquipmentBreakdownHazardReview || '' : '', disabled: false }, Validators.required),
      DeviationHighestHazardReview: new FormControl({ value: data != undefined ? data.DeviationHighestHazardReview || '' : '', disabled: false }, Validators.required),
      IsHighestHazardReviewUpdated: new FormControl(data != undefined ? data.IsHighestHazardReviewUpdated || false : false),
      IsEBRHighestHazardReviewUpdated: new FormControl(data != undefined ? data.IsEBRHighestHazardReviewUpdated || false : false),
      Occupancy: new FormControl(data != undefined ? data.Occupancy : null),
      PropertyAccountId: new FormControl(data != undefined ? data.PropertyAccountId || 0 : 0),
      PropertyAccountCoverId: new FormControl(data != undefined ? data.PropertyAccountCoverId : 0),
      ReviewRequestId: new FormControl(data != undefined ? data.ReviewRequestId : 0),
      EquipmentBreakdownMflcertified: new FormControl(data != undefined ? data.IsHazardUpdated || false : false),
      FireMflcertified: new FormControl(data != undefined ? data.IsHazardUpdated || false : false),
      Action: new FormControl(ActionEnum.IsSaved),
      PropertyLocations: new FormControl<PropertyLocation[]>(data != undefined ? data.PropertyLocations || [] : []),
      Interdependency: new FormControl({ value: data != undefined ? data.Interdependency || '' : '', disabled: false }),
      ContingentTimeElement: new FormControl({ value: data != undefined ? data.ContingentTimeElement || '' : '', disabled: false }),
      QualitySupplyChain: new FormControl({ value: data != undefined ? data.QualitySupplyChain || '' : '', disabled: false }),
      SupplyChainRiskManagement: new FormControl({ value: data != undefined ? data.SupplyChainRiskManagement || '' : '', disabled: false }),
      SupplyChainConfidence: new FormControl({ value: data != undefined ? this.getCalculatedSupplyChainConfidence(this.commonService.checkNullOrZero(data.Interdependency), this.commonService.checkNullOrZero(data.ContingentTimeElement), this.commonService.checkNullOrZero(data.QualitySupplyChain), this.commonService.checkNullOrZero(data.SupplyChainRiskManagement)) || '' : '', disabled: true }),
      HighestNormalLossExpectancy: new FormControl({ value: data != undefined ? data.HighestNormalLossExpectancy || '' : '', disabled: true }),
      HighestProbableMaximumLoss: new FormControl({ value: data != undefined ? data.HighestProbableMaximumLoss || '' : '', disabled: true }),
      HighestMaximumForeseeableLoss: new FormControl({ value: data != undefined ? data.HighestMaximumForeseeableLoss || '' : '', disabled: true }),
      HighestEBProbableMaximumLoss: new FormControl({ value: data != undefined ? data.HighestEBProbableMaximumLoss || '' : '', disabled: true }),
      HighestEBMaximumForeseeableLoss: new FormControl({ value: data != undefined ? data.HighestEBMaximumForeseeableLoss || '' : '', disabled: true }),
      HighestNormalLossExpectancyLocationName: new FormControl({ value: data != undefined ? data.HighestNormalLossExpectancyLocationName || '' : '', disabled: true }),
      HighestProbableMaximumLossLocationName: new FormControl({ value: data != undefined ? data.HighestProbableMaximumLossLocationName || '' : '', disabled: true }),
      HighestMaximumForeseeableLossLocationName: new FormControl({ value: data != undefined ? data.HighestMaximumForeseeableLossLocationName || '' : '', disabled: true }),
      HighestEBProbableMaximumLossLocationName: new FormControl({ value: data != undefined ? data.HighestEBProbableMaximumLossLocationName || '' : '', disabled: true }),
      HighestEBMaximumForeseeableLossLocationName: new FormControl({ value: data != undefined ? data.HighestEBMaximumForeseeableLossLocationName || '' : '', disabled: true }),
      StatusId: new FormControl(data != undefined ? data.StatusId || 1 : 1),
    });
  }

  loadOccupancyGroups(): void {
    const loadOccupancyGroups = this.reToolService.getOccupancyGroup(0).subscribe({
      next: (response) => {
        this.OccupancyGroupData = response.occupancyGroups;
        this.HazardData = response.hazard;
        this.EquipmentBreakdownData = response.equipmentBreakdown;
      },
      error: (error) => {
        throw new Error(error);
      }
    });
    this.subscription.add(loadOccupancyGroups);
  }

  changeOccupancyGroup(index: number, selectedGroupId: string): void {
    const data = this.coverForm;
    const currentValues = this.rowValuesMap.get(index);
    this.rowValuesMap.set(index, {
      ...currentValues,
      OccupancyGroup: selectedGroupId
    });

    data.patchValue({
      OccupancyTypeTIV: ReToolConstants.blank,
      OccupancyCodeTIV: ReToolConstants.blank,
      HazardTIV: ReToolConstants.blank,
      EquipmentBreakdownTIV: ReToolConstants.blank,
      OccupancyTypeList: [],
      IsHazardTIVUpdated: false,
      Action: ActionEnum.IsModified
    });

    if (selectedGroupId) {
      this.getOccupancyType(index, selectedGroupId, currentValues, data);
    }
    else {
      data.patchValue({
        OccupancyTypeForTIV: ReToolConstants.blank,
        OccupancyCodeTIV: ReToolConstants.blank,
        HazardTIV: ReToolConstants.blank,
        EquipmentBreakdownTIV: ReToolConstants.blank,
        OccupancyTypeList: [],
        IsHazardTIVUpdated: false,
        Action: ActionEnum.IsModified
      });
      this.rowValuesMap.get(index).OccupancyTypeList = [];
      this.disableDropdownControl(index, data, true);
    }
  }

  changeOccupancyType(index: number, selectedTypeId: string): void {
    const data = this.coverForm;

    if (selectedTypeId) {
      this.disableDropdownControl(index, data, false);
      const occupancyTypeMap = this.rowValuesMap.get(index).OccupancyTypeList.find(type => type.value === selectedTypeId);

      if (occupancyTypeMap) {
        data.patchValue({
          OccupancyCodeTIV: occupancyTypeMap.dependentValue.occupancyTypeCode,
          HazardTIV: occupancyTypeMap.dependentValue.hazard,
          EquipmentBreakdownTIV: occupancyTypeMap.dependentValue.equipmentBreakdown,
          IsHazardTIVUpdated: false,
          Action: ActionEnum.IsModified
        });
        this.rowValuesMap.set(index, {
          ...this.rowValuesMap.get(index),
          OccupancyTypeTIV: occupancyTypeMap.value,
          OccupancyCodeTIV: occupancyTypeMap.dependentValue.occupancyTypeCode,
          HazardTIV: occupancyTypeMap.dependentValue.hazard,
          IsHazardTIVUpdated: false,
          EquipmentBreakdownTIV: occupancyTypeMap.dependentValue.equipmentBreakdown
        });

      }
    } else {
      data.patchValue({
        OccupancyTypeTIV: ReToolConstants.blank,
        OccupancyCodeTIV: ReToolConstants.blank,
        HazardTIV: ReToolConstants.blank,
        EquipmentBreakdownTIV: ReToolConstants.blank,
        IsHazardTIVUpdated: false,
        Action: ActionEnum.IsModified
      });
      this.rowValuesMap.set(index, {
        ...this.rowValuesMap.get(index),
        OccupancyTypeTIV: ReToolConstants.blank,
        OccupancyCodeTIV: ReToolConstants.blank,
        HazardTIV: ReToolConstants.blank,
        EquipmentBreakdownTIV: ReToolConstants.blank,
        IsHazardTIVUpdated: false,
      });
      this.disableDropdownControl(index, data, true);
    }
    this.changeHazardForTIV(index, selectedTypeId);
    this.changeEquipmentBreakdownTIV(index, selectedTypeId);
  }

  changeHazardForHighestHazardReviewed(index: number, selectedTypeId: string): void {
    const data = this.coverForm;
    data.patchValue({ Action: ActionEnum.IsModified });
    this.setRecommendedReviewFrequency(data);
    this.updateHighlight(index, selectedTypeId, ReToolConstants.IsHighestHazardReviewUpdated, ReToolConstants.OccupancyHighestHazardReview);
    localStorage.removeItem('isOccupancyHazardChanged');
  }

  changeHazardForTIV(index: number, selectedTypeId: string): void {
    const data = this.coverForm;
    data.patchValue({ Action: ActionEnum.IsModified });
    this.updateHighlight(index, selectedTypeId, ReToolConstants.IsHazardTIVUpdated, ReToolConstants.HazardTIV);
  }

  changeEquipmentBreakdownTIV(index: number, selectedTypeId: string): void {
    const data = this.coverForm;
    data.patchValue({ Action: ActionEnum.IsModified });
    this.updateHighlight(index, selectedTypeId, ReToolConstants.IsEquipmentBreakdownUpdatedTIV, ReToolConstants.EquipmentBreakdownTIV);
  }

  changeEquipmentBreakdown(index: number, selectedTypeId: string): void {
    const data = this.coverForm;
    data.patchValue({ Action: ActionEnum.IsModified });
    this.updateHighlight(index, selectedTypeId, 'IsEBRHighestHazardReviewUpdated', 'EquipmentBreakdownHazardReview');
    localStorage.removeItem('isOccupancyHazardChanged');
  }

  setAction(selectedValue: any) {
    if (selectedValue != '') {
      const formData = this.coverForm;
      formData.patchValue({
        Action: ActionEnum.IsModified
      });
      this.isTimeElementExcluded(this.coverForm.controls["TimeElementExcluded"].value);
    }
  }

  onSubmit() {
    this.coverForm.markAllAsTouched();
    this.isTimeElementExcluded(this.coverForm.controls["TimeElementExcluded"].value);
    this.reToolTabService.formStatus = this.coverForm.status;
    this.updateCoverOccupancyData();
    this.checkDisableRequiredControl();

    if (this.coverForm.status == ReToolConstants.valid && !this.isDisableControlEmpty) {
      this.reToolTabService.emit('onSaveFormData', { formData: this.getCoverFormData, subTabIndex: 0 });
    } else {
      this.reToolTabService.showErrorMessage(ReToolConstants.requiredFieldsValidationMessage, '');
    }
  }

  calculateSupplyChainConfidence(formGroup: FormGroup<any>, isModified: boolean = false) {
    this.isTimeElementExcluded(formGroup.get("TimeElementExcluded")?.value);
    let interdependency = formGroup.get("Interdependency")?.value == ReToolConstants.blank ? 0 : Number(formGroup.get("Interdependency")?.value);
    let contingentTimeElement = formGroup.get("ContingentTimeElement")?.value == ReToolConstants.blank ? 0 : Number(formGroup.get("ContingentTimeElement")?.value);
    let qualityOfSupplyChainInfo = formGroup.get("QualitySupplyChain")?.value == ReToolConstants.blank ? 0 : Number(formGroup.get("QualitySupplyChain")?.value);
    let scRiskMgmt = formGroup.get("SupplyChainRiskManagement")?.value == ReToolConstants.blank ? 0 : Number(formGroup.get("SupplyChainRiskManagement")?.value);

    if (interdependency != 0 && contingentTimeElement != 0 && qualityOfSupplyChainInfo != 0 && scRiskMgmt != 0) {
      this.supplyChainConfidenceValue = ((interdependency + contingentTimeElement + qualityOfSupplyChainInfo + scRiskMgmt) / ReToolConstants.SupplyChainConfidenceAvg).toString();
    }
    else {
      this.supplyChainConfidenceValue = ReToolConstants.nullableValue;
    }
    if (isModified) {
      formGroup.patchValue({
        Action: ActionEnum.IsModified
      });
    }
  }

  private getCalculatedSupplyChainConfidence(Interdependency: number, ContingentTimeElement: number, QualitySupplyChain: number, SupplyChainRiskManagement: number): number {
    if (Interdependency != null && ContingentTimeElement != null && QualitySupplyChain != null && SupplyChainRiskManagement != null) {
      return (Interdependency + ContingentTimeElement + QualitySupplyChain + SupplyChainRiskManagement) / ReToolConstants.SupplyChainConfidenceAvg;
    }
    return ReToolConstants.nullableValue;
  }

  private getCoverMasterData(): void {
    const coverMasterData = this.reToolService.getPropertyMaster(PropertyMasterDataTypeEnum.Cover).subscribe({
      next: (response) => {
        this.interdependencyMasterData = response.interdependency;
        this.qualityOfSupplyChainInfoMasterData = response.qualityOfSupplyChainInfo
      },
      error: (error) => {
        throw new error;
      }
    });
    this.subscription?.add(coverMasterData);
  }

  private updateHighlight(index: number, selectedTypeId: string,
    controlUpdate: string, controlType: 'HazardTIV' | 'EquipmentBreakdownTIV' |
      'EquipmentBreakdownHazardReview' | 'OccupancyHighestHazardReview') {
    const occupancyTypeList = this.rowValuesMap.get(index).OccupancyTypeList;
    const selectedType = occupancyTypeList.find(item => item.value == selectedTypeId);
    let controlKey: string = '';
    if (index === 0) {
      controlKey = controlType === ReToolConstants.HazardTIV ? ReToolConstants.HazardTIV : ReToolConstants.EquipmentBreakdownTIV;
    }
    else {
      controlKey = controlType === ReToolConstants.OccupancyHighestHazardReview ? ReToolConstants.OccupancyHighestHazardReview : ReToolConstants.EquipmentBreakdownHazardReview;
    }
    const control = this.coverForm.get(controlKey);
    let isHighlighted: boolean = false;

    if (control) {
      const dropdownValue = control.value;

      if (selectedType) {

        if (index === 0) {
          isHighlighted = controlType === ReToolConstants.HazardTIV
            ? dropdownValue !== selectedType.dependentValue.hazard
            : dropdownValue !== selectedType.dependentValue.equipmentBreakdown;
        } else {
          isHighlighted = controlType === ReToolConstants.OccupancyHighestHazardReview
            ? dropdownValue !== selectedType.dependentValue.hazard
            : dropdownValue !== selectedType.dependentValue.equipmentBreakdown;
        }
        control[ReToolConstants.isHighlighted] = isHighlighted;
      }
    } else {
      control[ReToolConstants.isHighlighted] = isHighlighted;
    }
    this.coverForm.get(controlUpdate).setValue(isHighlighted);
  }

  private getOccupancyType(index: number, selectedGroupId: string, currentValues: any, data: any) {
    this.reToolService.getOccupancyType(selectedGroupId).subscribe(types => {
      const existingOccupancyType = currentValues?.OccupancyType || ReToolConstants.blank;
      const validType = types.find(type => type.value === existingOccupancyType);

      if (validType) {
        data.patchValue({
          OccupancyTypeTIV: validType.value,
          OccupancyCodeTIV: validType.dependentValue.occupancyTypeCode,
          HazardTIV: validType.dependentValue.hazard,
          EquipmentBreakdownTIV: validType.dependentValue.equipmentBreakdown,
          OccupancyTypeList: types
        });
      } else {
        this.rowValuesMap.set(index, {
          ...this.rowValuesMap.get(index),
          OccupancyTypeList: types
        })
      }
      this.rowValuesMap.set(index, {
        ...this.rowValuesMap.get(index),
        OccupancyTypeList: types
      })
    });
  }

  private getOccupancyBasedonHighestHazard(index: number, selectedGroupId: string, currentValues: any, data: any) {
    const propertyLocations = data.get('PropertyLocations').value;
    const maxHazard = Math.max(...propertyLocations.map(item => item.hazard));
    const occupancyHazard = localStorage.getItem('isOccupancyHazardChanged');

    if (maxHazard != undefined && !isNaN(maxHazard)) {
      const highestHazardData = propertyLocations.find(g => g.hazard === maxHazard);
      this.reToolService.getOccupancyType(highestHazardData.occupancyGroup).subscribe(types => {
        const existingOccupancyType = highestHazardData.occupancyType || ReToolConstants.blank;
        const validType = types.find(type => type.value == existingOccupancyType);
        const isHazardReviewUpdated = this.coverForm.get('IsHighestHazardReviewUpdated').value;
        const isEBRHazardReviewUpdated = this.coverForm.get('IsEBRHighestHazardReviewUpdated').value;
        const occupancyHighestHazardReview = this.coverForm.get('OccupancyHighestHazardReview').value;
        const equipmentBreakdownHazardReview = this.coverForm.get('EquipmentBreakdownHazardReview').value;

        if (validType) {

          if (occupancyHazard != null && occupancyHazard === ReToolConstants.valueTrue) {
            data.patchValue({
              OccupancyGroupHighestHazardReview: highestHazardData.occupancyGroup,
              OccupancyTypeHighestHazardReview: highestHazardData.occupancyType,
              OccupancyCodeHighestHazardReview: highestHazardData.occupancyCode,
              OccupancyHighestHazardReview: highestHazardData.hazard,
              EquipmentBreakdownHazardReview: highestHazardData.equipmentBreakdown,
              IsHighestHazardReviewUpdated: highestHazardData.isHazardUpdated,
              IsEBRHighestHazardReviewUpdated: highestHazardData.isEquipmentBreakdownUpdated,
              OccupancyTypeList: types
            });
          } else {
            data.patchValue({
              OccupancyGroupHighestHazardReview: highestHazardData.occupancyGroup,
              OccupancyTypeHighestHazardReview: highestHazardData.occupancyType,
              OccupancyCodeHighestHazardReview: highestHazardData.occupancyCode,
              OccupancyHighestHazardReview: occupancyHighestHazardReview != '' ? occupancyHighestHazardReview : highestHazardData.hazard,
              EquipmentBreakdownHazardReview: equipmentBreakdownHazardReview != '' ? equipmentBreakdownHazardReview : highestHazardData.equipmentBreakdown,
              IsHighestHazardReviewUpdated: isHazardReviewUpdated,
              IsEBRHighestHazardReviewUpdated: isEBRHazardReviewUpdated,
              OccupancyTypeList: types
            });
          }

        } else {
          this.rowValuesMap.set(index, {
            ...this.rowValuesMap.get(index),
            OccupancyTypeList: types
          })
        }
        this.setRecommendedReviewFrequency(data);
        this.rowValuesMap.set(index, {
          ...this.rowValuesMap.get(index),
          OccupancyTypeList: types
        })
      });
    }
  }

  private disableDropdownControl(index: number, coverForm: any, isDisabled: boolean): void {
    if (index === 0) {
      if (isDisabled) {
        coverForm.get('HazardTIV').disable();
        coverForm.get('EquipmentBreakdownTIV').disable();
      } else {
        coverForm.get('HazardTIV').enable();
        coverForm.get('EquipmentBreakdownTIV').enable();
      }
    } else {
      if (isDisabled) {
        coverForm.get('OccupancyHighestHazardReview').disable();
        coverForm.get('EquipmentBreakdownHazardReview').disable();
      } else {
        coverForm.get('OccupancyHighestHazardReview').enable();
        coverForm.get('EquipmentBreakdownHazardReview').enable();
      }
    }

  }

  private getFormValue(): Cover {
    return (this.coverForm.value as Cover);
  }

  private get getCoverFormData(): Cover {
    return this.getFormValue() as Cover;
  }

  private totalReportedTotalPD(formGroup: FormGroup<any>) {
    const ReportedBuildingValueValue = parseFloat(Utility.removeComma(formGroup.get('ReportedBuildingValue')?.value)) || 0.0;
    const reportedContentValue = parseFloat(Utility.removeComma(formGroup.get('ReportedContentsValue')?.value)) || 0.0;
    const reportedTotalPD = ReportedBuildingValueValue + reportedContentValue === 0 ? '0.0' : ReportedBuildingValueValue + reportedContentValue;
    formGroup.get('ReportedTotalPD').setValue(reportedTotalPD.toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
    this.totalReportedTIV(formGroup);
    this.calculatedPercentageReviewedTotalPD(formGroup);
  }

  private calculatedReportedTotalPD(reportedTotalPDValue: number, ReportedTotalBivalueValue: number): number {
    if (reportedTotalPDValue != undefined && ReportedTotalBivalueValue != undefined) {
      return reportedTotalPDValue + ReportedTotalBivalueValue;
    }
    else {
      return 0.0;
    }
  }

  private totalReportedTIV(formGroup: FormGroup<any>) {
    const reportedTotalPDValue = parseFloat(Utility.removeComma(formGroup.get('ReportedTotalPD')?.value)) || 0.0;
    const ReportedTotalBivalue = parseFloat(Utility.removeComma(formGroup.get('ReportedTotalBivalue')?.value)) || 0.0;
    const reportedTotalTIV = reportedTotalPDValue + ReportedTotalBivalue === 0 ? '0.0' : reportedTotalPDValue + ReportedTotalBivalue;
    formGroup.get('ReportedTIV').setValue(reportedTotalTIV.toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
    this.calculatedPercentageReviewedTIV(formGroup);
  }

  private calculatedReviewedBuilding(formGroup: FormGroup<any>) {
    const propertyLocations = this.coverForm.get('PropertyLocations').value;
    const propertyLocationBuildingValues = propertyLocations.reduce((sum, current) => sum + current.buildingValue, 0);
    formGroup.get('ReviewedBuilding').setValue((Math.round(propertyLocationBuildingValues)).toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
  }

  private calculatedReviewedContents(formGroup: FormGroup<any>) {
    const propertyLocations = this.coverForm.get('PropertyLocations').value;
    const propertyLocationContentsValues = propertyLocations.reduce((sum, value) => sum + (value.equipmentValue ?? 0) + (value.inventoryValue ?? 0) + (value.otherValue ?? 0), 0);
    formGroup.get('ReviewedContents').setValue((Math.round(propertyLocationContentsValues)).toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
  }

  private calculatedReviewedTotalPD(formGroup: FormGroup<any>) {
    const reviewedBuildingCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedBuilding')?.value)) || 0.0;
    const reviewedContentsCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedContents')?.value)) || 0.0;
    const reviewTotalPD = reviewedBuildingCalculated + reviewedContentsCalculated;
    formGroup.get('ReviewedTotalPD').setValue((Math.round(reviewTotalPD)).toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
  }

  private calculatedReviewedTotalBI(formGroup: FormGroup<any>) {
    const propertyLocations = this.coverForm.get('PropertyLocations').value;
    const propertyLocationTotalTE = propertyLocations.reduce((sum, value) => sum + (value.businessInterruptionOtherValue ?? 0) + (value.businessInterruptionValue ?? 0) + (value.payrollValue ?? 0), 0);
    formGroup.get('ReviewedTotalBI').setValue((Math.round(propertyLocationTotalTE)).toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma))
  }

  private calculatedReviewedTIV(formGroup: FormGroup<any>) {
    const reviewedTotalPDCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedTotalPD')?.value)) || 0.0;
    const reviewedTotalBICalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedTotalBI')?.value)) || 0.0;
    const calculatedReviewIV = reviewedTotalPDCalculated + reviewedTotalBICalculated;
    formGroup.get('ReviewedTIV').setValue((Math.round(calculatedReviewIV)).toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma));
  }

  private calculatedPercentageReviewedBuilding(formGroup: FormGroup<any>) {
    const reviewedBuildingCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedBuilding')?.value)) || 0.0;
    const ReportedBuildingValue = parseFloat(Utility.removeComma(formGroup.get('ReportedBuildingValue')?.value)) || 0.0;
    const calculatedReviewedPercentageBuilding = (reviewedBuildingCalculated / ReportedBuildingValue) * 100;
    const calculate = Math.round(parseFloat(calculatedReviewedPercentageBuilding.toFixed(1)));
    this.setPercentageReviewValue(calculate, formGroup, ReToolConstants.reviewedPercentageBuilding);
  }

  private calculatedPercentageReviewedContents(formGroup: FormGroup<any>) {
    const reviewedContentsCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedContents')?.value)) || 0.0;
    const ReportedContentsValue = parseFloat(Utility.removeComma(formGroup.get('ReportedContentsValue')?.value)) || 0.0;
    const calculatedReviewedPercentageContents = (reviewedContentsCalculated / ReportedContentsValue) * 100;
    const calculate = Math.round(parseFloat(calculatedReviewedPercentageContents.toFixed(1)));
    this.setPercentageReviewValue(calculate, formGroup, ReToolConstants.reviewedPercentageContents);
  }

  private calculatedPercentageReviewedTotalPD(formGroup: FormGroup<any>) {
    const reviewedTotalPDCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedTotalPD')?.value)) || 0.0;
    const reportedTotalPDCalculated = parseFloat(Utility.removeComma(formGroup.get('ReportedTotalPD')?.value)) || 0.0;
    const calculatedReviewedPercentageTotalPD = (reviewedTotalPDCalculated / reportedTotalPDCalculated) * 100;
    const calculate = Math.round(parseFloat(calculatedReviewedPercentageTotalPD.toFixed(1)));
    this.setPercentageReviewValue(calculate, formGroup, ReToolConstants.reviewedPercentageTotalPD);
  }

  private calculatedPercentageReviewedTotalBI(formGroup: FormGroup<any>) {
    const reviewedTotalBICalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedTotalBI')?.value)) || 0.0;
    const reportedTotalBivalue = parseFloat(Utility.removeComma(formGroup.get('ReportedTotalBivalue')?.value)) || 0.0;
    const calculatedReviewedPercentageTotalBI = (reviewedTotalBICalculated / reportedTotalBivalue) * 100;
    const calculate = Math.round(parseFloat(calculatedReviewedPercentageTotalBI.toFixed(1)));
    this.setPercentageReviewValue(calculate, formGroup, ReToolConstants.reviewedPercentageTotalBI);
  }

  private calculatedPercentageReviewedTIV(formGroup: FormGroup<any>) {
    const reviewedTIVCalculated = parseFloat(Utility.removeComma(formGroup.get('ReviewedTIV')?.value)) || 0.0;
    const reportedTIV = parseFloat(Utility.removeComma(formGroup.get('ReportedTIV')?.value)) || 0.0;
    const calculatedReviewedPercentageTIV = (reviewedTIVCalculated / reportedTIV) * 100;
    const calculate = Math.round(parseFloat(calculatedReviewedPercentageTIV.toFixed(1)));
    const tivPercent = calculate === Infinity || isNaN(calculate) ? 0 : calculate;
    this.setPercentageReviewValue(calculate, formGroup, ReToolConstants.reviewedPercentageTIV);
    this.reToolCalculationService.updateOverAllRating(this.overAllRatingPDIndex, tivPercent);
  }

  private setRecommendedReviewFrequency(formGroup: FormGroup<any>) {
    const selectedHazardValue = formGroup.get('OccupancyHighestHazardReview').value;

    switch (Number(selectedHazardValue)) {
      case HazardEnum.Low:
        formGroup.get('RecommendedReviewFrequency').setValue(ReToolConstants.Review36Months);
        formGroup.get('RecommendedAccountPercentageTIV').setValue(ReToolConstants.TIV20Review);
        break;
      case HazardEnum.Moderate:
        formGroup.get('RecommendedReviewFrequency').setValue(ReToolConstants.Review24Months);
        formGroup.get('RecommendedAccountPercentageTIV').setValue(ReToolConstants.TIV30Review);
        break;
      case HazardEnum.High:
        formGroup.get('RecommendedReviewFrequency').setValue(ReToolConstants.Review12Months);
        formGroup.get('RecommendedAccountPercentageTIV').setValue(ReToolConstants.TIV40Review);
        break;
      case HazardEnum.Severe:
        formGroup.get('RecommendedReviewFrequency').setValue(ReToolConstants.Review12Months);
        formGroup.get('RecommendedAccountPercentageTIV').setValue(ReToolConstants.TIV50Review);
        break;
      default:
        formGroup.get('RecommendedReviewFrequency').setValue(ReToolConstants.blank);
        formGroup.get('RecommendedAccountPercentageTIV').setValue(ReToolConstants.blank);
        break;
    }

  }

  private calculatedReportedTotalTIV(ReportedBuildingValueValue: number, reportedContentValue: number): number {
    if (ReportedBuildingValueValue != undefined && reportedContentValue != undefined) {
      return ReportedBuildingValueValue + reportedContentValue;
    }
    else {
      return 0.0;
    }
  }

  private setUpReportedPropertyTIVCalculation(formData: FormGroup<any>) {
    const reportedPropertyTotalPDValue = formData.get('ReportedTotalPD')?.valueChanges.subscribe(({
      next: (res) => {
        if (res !== undefined && res !== null) {
          this.totalReportedTIV(formData);
        }
      },
      error: (error) => {
        throw new error;
      },
    }));
    this.subscription?.add(reportedPropertyTotalPDValue);

    const ReportedTotalBivalue = formData.get('ReportedTotalBivalue')?.valueChanges.subscribe(({
      next: (res) => {
        if (res !== undefined && res !== null) {
          this.setAction(res);
          this.totalReportedTIV(formData)
          this.calculatedPercentageReviewedTotalBI(formData);
        }
      },
      error: (error) => {
        throw new error;
      },
    }));
    this.subscription?.add(ReportedTotalBivalue);
  }

  private setUpReportedPropertyDamagedTotalCalculation(formData: FormGroup<any>) {
    const reportedPropertyDamageValue = formData.get('ReportedBuildingValue')?.valueChanges.subscribe(({
      next: (res) => {
        if (res !== undefined && res !== null) {
          this.setAction(res);
          this.totalReportedTotalPD(formData);
          this.calculatedPercentageReviewedBuilding(formData);
        }
      },
      error: (error) => {
        throw new error;
      },
    }));
    this.subscription?.add(reportedPropertyDamageValue);

    const reportedContentValue = formData.get('ReportedContentsValue')?.valueChanges.subscribe(({
      next: (res) => {

        if (res !== undefined && res !== null) {
          this.setAction(res);
          this.totalReportedTotalPD(formData)
          this.calculatedPercentageReviewedContents(formData);
        }
      },
      error: (error) => {
        throw new error;
      },
    }));
    this.subscription?.add(reportedContentValue);
  }

  private setupCalculationSubscribers(formData: FormGroup<any>) {
    this.setUpReportedPropertyDamagedTotalCalculation(formData);
    this.setUpReportedPropertyTIVCalculation(formData);
  }

  private updateCoverOccupancyData() {

    let occupancy = this.coverForm.get('Occupancy')?.value;

    if (!occupancy && !Utility.isCoverOccupancyValue(JSON.parse(occupancy)))
      occupancy = Utility.getCoverOccupancyDefaultValue();
    else
      occupancy = JSON.parse(occupancy);

    this.setOccupancyValuesForSerialize();
    const occupancySerialzed = this.getOccupancyValuesSerialize(this.occupancyData);
    this.coverForm.get('Occupancy')?.setValue(occupancySerialzed);
  }

  private getOccupancyValuesSerialize(occupancyValues: any): any {
    if (occupancyValues != null && occupancyValues != undefined) {
      return JSON.stringify(occupancyValues);
    }
    return null;
  }

  private setOccupancyValuesForSerialize(): void {

    this.occupancyData = {
      occupancyGroupTIV: this.coverForm.get('OccupancyGroupTIV')?.value,
      occupancyTypeTIV: this.coverForm.get('OccupancyTypeTIV')?.value,
      occupancyCodeTIV: this.coverForm.get('OccupancyCodeTIV')?.value,
      hazardTIV: this.coverForm.get('HazardTIV')?.value,
      deviationTIV: this.coverForm.get('DeviationTIV')?.value,
      equipmentBreakdownTIV: this.coverForm.get('EquipmentBreakdownTIV')?.value,
      isHazardTIVUpdated: this.coverForm.get('IsHazardTIVUpdated')?.value,
      isEquipmentBreakdownUpdatedTIV: this.coverForm.get('IsEquipmentBreakdownUpdatedTIV')?.value,
      occupancyHighestHazardReview: this.coverForm.get('OccupancyHighestHazardReview')?.value,
      equipmentBreakdownHazardReview: this.coverForm.get('EquipmentBreakdownHazardReview')?.value,
      deviationHighestHazardReview: this.coverForm.get('DeviationHighestHazardReview')?.value,
      isHazardReviewUpdated: this.coverForm.get('IsHighestHazardReviewUpdated')?.value,
      isEBRHazardReviewUpdated: this.coverForm.get('IsEBRHighestHazardReviewUpdated')?.value
    }
  }

  private setOccpancyValuesAfterDeserialize(): Cover {

    const coverData = this.coverData;
    const occupancyValue = this.getOccupancyValuesDeserialize(coverData.Occupancy);

    if (occupancyValue != null && occupancyValue != undefined) {
      coverData.OccupancyGroupTIV = occupancyValue.occupancyGroupTIV;
      coverData.OccupancyTypeTIV = occupancyValue.occupancyTypeTIV;
      coverData.OccupancyCodeTIV = occupancyValue.occupancyCodeTIV;
      coverData.HazardTIV = occupancyValue.hazardTIV;
      coverData.DeviationTIV = occupancyValue.deviationTIV;
      coverData.EquipmentBreakdownTIV = occupancyValue.equipmentBreakdownTIV;
      coverData.IsHazardTIVUpdated = occupancyValue.isHazardTIVUpdated;
      coverData.IsEquipmentBreakdownUpdatedTIV = occupancyValue.isEquipmentBreakdownUpdatedTIV;
      coverData.OccupancyHighestHazardReview = occupancyValue.occupancyHighestHazardReview;
      coverData.EquipmentBreakdownHazardReview = occupancyValue.equipmentBreakdownHazardReview;
      coverData.DeviationHighestHazardReview = occupancyValue.deviationHighestHazardReview;
      coverData.IsHighestHazardReviewUpdated = occupancyValue.isHazardReviewUpdated;
      coverData.IsEBRHighestHazardReviewUpdated = occupancyValue.isEBRHazardReviewUpdated;
    }
    return coverData;
  }

  private getOccupancyValuesDeserialize(value: string): CoverUnderwritingSummary {

    if (value) {
      const parseValue = JSON.parse(value) as CoverUnderwritingSummary;
      if (parseValue && parseValue != undefined && parseValue != null)
        return parseValue;
      else
        return Utility.getCoverOccupancyDefaultValue();
    }

    return Utility.getCoverOccupancyDefaultValue();
  }

  private setDefaultValue(ReportedValue: any): any {
    if (ReportedValue != 0 && ReportedValue != undefined && ReportedValue != '') {
      return ReportedValue.toString().replace(ReToolConstants.numberCommaSepratedREGEX, ReToolConstants.comma);
    }
    else {
      return '';
    }
  }

  private checkDisableRequiredControl() {
    const occupancyTypeHighestHazardReview = this.coverForm.get('OccupancyTypeHighestHazardReview').value;
    const occupancyCodeHighestHazardReview = this.coverForm.get('OccupancyCodeHighestHazardReview').value;
    if (occupancyTypeHighestHazardReview === ReToolConstants.blank
      || occupancyCodeHighestHazardReview === ReToolConstants.blank
    ) {
      return this.isDisableControlEmpty = true;
    }

    return this.isDisableControlEmpty = false;
  }

  private isTimeElementExcluded(isTimeElementExcluded: string) {
    this.isTimeElement = isTimeElementExcluded.toString() == ReToolConstants.valueTrue ? true : false;
    if (!this.isTimeElement) {
      this.removeValidators();
    }
    else {
      this.addValidators();
    }
  }

  private addValidators() {
    this.coverForm.get('Interdependency').setValidators([Validators.required]);
    this.coverForm.get('ContingentTimeElement').setValidators([Validators.required]);
    this.coverForm.get('QualitySupplyChain').setValidators([Validators.required]);
    this.coverForm.get('SupplyChainRiskManagement').setValidators([Validators.required]);

    this.coverForm.get('Interdependency').updateValueAndValidity();
    this.coverForm.get('ContingentTimeElement').updateValueAndValidity();
    this.coverForm.get('QualitySupplyChain').updateValueAndValidity();
    this.coverForm.get('SupplyChainRiskManagement').updateValueAndValidity();
  }

  private removeValidators() {
    this.coverForm.get('Interdependency').setValidators(null);
    this.coverForm.get('ContingentTimeElement').setValidators(null);
    this.coverForm.get('QualitySupplyChain').setValidators(null);
    this.coverForm.get('SupplyChainRiskManagement').setValidators(null);

    this.coverForm.get('Interdependency').updateValueAndValidity();
    this.coverForm.get('ContingentTimeElement').updateValueAndValidity();
    this.coverForm.get('QualitySupplyChain').updateValueAndValidity();
    this.coverForm.get('SupplyChainRiskManagement').updateValueAndValidity();
  }

  private setPercentageReviewValue(calculate: number, formGroup: FormGroup<any>, controlName: string) {
    if (calculate === Infinity || isNaN(calculate))
      formGroup.get(controlName).setValue('0%');
    else
      formGroup.get(controlName).setValue(calculate + '%');
  }

  private getHighestFireAndEBBasedOnLocation(formGroup: FormGroup<any>) {
    const propertyLocations = this.coverForm.get('PropertyLocations').value;
    const highestNormalLossExpectancy = propertyLocations.reduce((prev, current) =>
      (prev.normalLossExpectancy >= current.normalLossExpectancy ? prev : current));

    if (highestNormalLossExpectancy !== null
      && highestNormalLossExpectancy.normalLossExpectancy !== null
      && highestNormalLossExpectancy.normalLossExpectancy !== undefined
      && highestNormalLossExpectancy.normalLossExpectancy > 0) {
      formGroup.get('HighestNormalLossExpectancy').setValue(highestNormalLossExpectancy.normalLossExpectancy.toFixed(1));
      formGroup.get('HighestNormalLossExpectancyLocationName').setValue(highestNormalLossExpectancy.locationName);
    }

    const highestProbableMaximumLoss = propertyLocations.reduce((prev, current) =>
      (prev.probableMaximumLoss >= current.probableMaximumLoss ? prev : current));

    if (highestProbableMaximumLoss !== null
      && highestProbableMaximumLoss.probableMaximumLoss !== null
      && highestProbableMaximumLoss.probableMaximumLoss !== undefined
      && highestProbableMaximumLoss.probableMaximumLoss > 0) {
      formGroup.get('HighestProbableMaximumLoss').setValue(highestProbableMaximumLoss.probableMaximumLoss.toFixed(1));
      formGroup.get('HighestProbableMaximumLossLocationName').setValue(highestProbableMaximumLoss.locationName);
    }

    const highestMaximumForeseeableLoss = propertyLocations.reduce((prev, current) =>
      (prev.maximumForeseeableLoss >= current.maximumForeseeableLoss ? prev : current));

    if (highestMaximumForeseeableLoss !== null
      && highestMaximumForeseeableLoss.maximumForeseeableLoss !== null
      && highestMaximumForeseeableLoss.maximumForeseeableLoss !== undefined
      && highestMaximumForeseeableLoss.maximumForeseeableLoss > 0) {
      formGroup.get('HighestMaximumForeseeableLoss').setValue(highestMaximumForeseeableLoss.maximumForeseeableLoss.toFixed(1));
      formGroup.get('HighestMaximumForeseeableLossLocationName').setValue(highestMaximumForeseeableLoss.locationName);
    }

    const highestEBProbableMaximumLoss = propertyLocations.reduce((prev, current) =>
      (prev.ebProbableMaximumLoss >= current.ebProbableMaximumLoss ? prev : current));

    if (highestEBProbableMaximumLoss !== null
      && highestEBProbableMaximumLoss.ebProbableMaximumLoss !== null
      && highestEBProbableMaximumLoss.ebProbableMaximumLoss !== undefined
      && highestEBProbableMaximumLoss.ebProbableMaximumLoss > 0) {
      formGroup.get('HighestEBProbableMaximumLoss').setValue(highestEBProbableMaximumLoss.ebProbableMaximumLoss.toFixed(1));
      formGroup.get('HighestEBProbableMaximumLossLocationName').setValue(highestEBProbableMaximumLoss.locationName);
    }

    const highestEBMaximumForeseeableLoss = propertyLocations.reduce((prev, current) =>
      (prev.ebMaximumForeseeableLoss >= current.ebMaximumForeseeableLoss ? prev : current));

    if (highestEBMaximumForeseeableLoss !== null
      && highestEBMaximumForeseeableLoss.ebMaximumForeseeableLoss !== null
      && highestEBMaximumForeseeableLoss.ebMaximumForeseeableLoss !== undefined
      && highestEBMaximumForeseeableLoss.ebMaximumForeseeableLoss > 0) {
      formGroup.get('HighestEBMaximumForeseeableLoss').setValue(highestEBMaximumForeseeableLoss.ebMaximumForeseeableLoss.toFixed(1));
      formGroup.get('HighestEBMaximumForeseeableLossLocationName').setValue(highestEBMaximumForeseeableLoss.locationName);
    }
  }

  private getOverAllRatingSessionData() {
    const overAllRatingSessionData = sessionStorage.getItem(ReToolConstants.overAllRatingSessionKey);
    if (overAllRatingSessionData) {
      const parsedData = JSON.parse(overAllRatingSessionData);
      this.overAllRatingPDIndex = parseFloat(parsedData?.PDIndex).toFixed(1);
    }  
  }

  ngOnDestroy() {
    if (this.subscription) {
      this.subscription?.unsubscribe();
    }
  }
}

------------------------------------Cover class------------------------------

import { ActionEnum } from "./action-enum"
import { PropertyLocation } from "./property-location";

export class Cover {
    PropertyAccountCoverId: number = 0;
    ReviewRequestId: number = 0;
    PropertyAccountId: number = 0;
    ReportedBuildingValue : number = 0.0;
    ReportedContentsValue : number = 0.0;
    ReportedTotalPD : number = 0.0;
    ReportedTotalBivalue :number = 0.0;
    ReportedTIV : number = 0.0;
    ReviewedBuilding? : number = 0.0;
    ReviewedContents? : number = 0.0;
    ReviewedTotalPD? : number = 0.0;
    ReviewedTotalBI? :Number = 0.0;
    ReviewedTIV? : number = 0.0;
    ReviewedPercentageBuilding? : number = 0.0;
    ReviewedPercentageContents? : number = 0.0;
    ReviewedPercentageTotalPD? : number = 0.0;
    ReviewedPercentageTotalBI? :Number = 0.0;
    ReviewedPercentageTIV? : number = 0.0;
    TimeElementExcluded: boolean;
    RecommendedReviewFrequency: string = '';
    RecommendedAccountPercentageTIV: string = '';
    OccupancyGroupTIV: string = '';
    OccupancyTypeTIV: string = '';
    OccupancyCodeTIV: number = 0;
    HazardTIV: string = '';
    DeviationTIV: boolean;
    EquipmentBreakdownTIV: string = '';
    IsHazardTIVUpdated: boolean = false;
    IsEquipmentBreakdownUpdatedTIV: boolean = false;
    OccupancyGroupHighestHazardReview: string = '';
    OccupancyTypeHighestHazardReview: string = '';
    OccupancyCodeHighestHazardReview: number = 0;
    OccupancyHighestHazardReview: string = '';
    EquipmentBreakdownHazardReview: string = '';
    DeviationHighestHazardReview: boolean;
    IsHighestHazardReviewUpdated: boolean = false;
    IsEBRHighestHazardReviewUpdated: boolean = false;
    IsHazardUpdated: boolean = false;
    IsEquipmentBreakdownUpdated: boolean = false;
    PropertyLocations: PropertyLocation[] = null;
    Occupancy?: any = null;
    EquipmentBreakdownMflcertified: boolean = false;
    FireMflcertified: boolean = false;
    Interdependency: string = null;
    ContingentTimeElement: string = null;
    SupplyChainRiskManagement: string = null;
    QualitySupplyChain: string = null;
    HighestNormalLossExpectancy?: number;
    HighestProbableMaximumLoss?: number;
    HighestMaximumForeseeableLoss?: number;
	HighestEBProbableMaximumLoss?: number;
    HighestEBMaximumForeseeableLoss?: number;
    HighestNormalLossExpectancyLocationName?: string = '';
    HighestProbableMaximumLossLocationName?: string = '';
    HighestMaximumForeseeableLossLocationName?: string = '';
	HighestEBProbableMaximumLossLocationName?: string = '';
    HighestEBMaximumForeseeableLossLocationName?: string = '';
    Action: ActionEnum = ActionEnum.IsNewRecord;
    StatusId: number = 1;
}
-------------------------------------MasterDataModel---------------------

export class MasterDataModel {
  text: string;
  value: string;
  category: string;
  defaultValue: string;
  dependentValue: any;
  disabled: boolean = false;
  fullText:string;
}
---------------ReToolService---------------
import { Injectable } from '@angular/core';
import { PropertyValue } from '../models/property-value';
import { catchError, Observable, Subject, tap, throwError } from 'rxjs';
import { ReToolConstants } from '../constants/re-tool.constants';
import { environment } from '../../../../environments/environment';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { NormalLossExpectancy } from '../models/normal-loss-expectancy';
import { ProbableMaximumLoss } from '../models/probable-maximum-loss';
import { MaximumForeseeableLoss } from '../models/maximum-foreseeable-loss';
import { EquipmentProbableMaximumLoss } from '../models/equipment-probable-maximum-loss';
import { PropertyMasterDataTypeEnum } from '../models/property-master-data-type-enum';
import { GeneralPropertyWeightResponse } from '../models/general-property-weight-response';
import { Cover } from '../models/cover';
import { PropertyLocationImportRequest } from '../models/property-location-import-request';
import { LocationFilterModel } from '../../loc-address/models/location-name-address';
import { ActionEnum } from '../models/action-enum';

const httpOptions = {
  headers: new HttpHeaders({
    'Content-Type': 'application/json'
  })
};

@Injectable({
  providedIn: 'root'
})

export class ReToolService {
  public addNewLocationSubject = new Subject<void>();
  addNewLocation$ = this.addNewLocationSubject.asObservable();
  public currencyUnitSubject = new Subject<any>();
  currencyUnit$ = this.currencyUnitSubject.asObservable();
  public locationApiDataSubscribe$ = new Subject<any>();
  public countrySearchSubject$ = new Subject<any>();
  public humanElementRiskFactorSubject = new Subject<any>();
  humanElementRiskFactor$ = this.humanElementRiskFactorSubject.asObservable();
  private importDataSubject = new Subject<{ locationData: any, propertyValueData: any }>();
  importData$ = this.importDataSubject.asObservable();
  public emptyPropertyLocationSubject$ = new Subject<any>();

  private readonly httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  };

  constructor(private http: HttpClient) { }

  getLocationProperties(reviewRequestId: number, isGeneralProperty: boolean): Observable<PropertyValue[]> {
    return this.get<any>(`${environment.baseUrl}Property/GetAllProperty/${reviewRequestId}/${isGeneralProperty}`);
  }

  getCoverWithPropertyValues(reviewRequestId: number): Observable<Cover> {
    return this.get<any>(`${environment.baseUrl}Property/GetPropertyAccountCover/${reviewRequestId}`);
  }

  generateFormElementIdAttribute(rowIndex: number, dataId: number, columnName: string, popUp?: string): string {
    return `row-${rowIndex}_dataKey-${dataId}_${columnName}_${popUp}`;
  }

  getLocationByAddress(query: string): Observable<any> {
    return this.http.get<any>(`${environment.baseUrl}Location/GetAddressSearch/${query}`, httpOptions);
  }

  getLocationByGeoCode(query: string): Observable<any> {
    return this.http.get<any>(`${environment.baseUrl}Location/GetGeoCode/${query}`, httpOptions);
  }

  getPropertyMaster(type: PropertyMasterDataTypeEnum): Observable<any> {
    let params = new HttpParams();
    if (type == PropertyMasterDataTypeEnum.HumanElementRiskFactor) {
      params = params.set(ReToolConstants.propertyMasterType, this.getEnumPropertyName(type)); // add query parameter if provided by user
    }

    if (type == PropertyMasterDataTypeEnum.BIRiskFactor) {
      params = params.set(ReToolConstants.propertyMasterType, this.getEnumPropertyName(type)); // add query parameter if provided by user
    }

    if (type == PropertyMasterDataTypeEnum.Cover) {
      params = params.set(ReToolConstants.propertyMasterType, this.getEnumPropertyName(type)); // add query parameter if provided by user
    }

    const options = {
      ...this.httpOptions,
      params
    }

    if (type === PropertyMasterDataTypeEnum.CurrencyAndUnit) {
      return this.http.get<any>(`${environment.baseUrl}Property`, options)
        .pipe(
          tap(data => this.currencyUnitSubject.next(data)),
          catchError(error => {
            return throwError(() => new Error(error.message));
          })
        );
    }
    else
      return this.http.get<any>(`${environment.baseUrl}Property`, options);
  };

  getEnumPropertyName = (value: number): string => {
    return PropertyMasterDataTypeEnum[value];
  };

  getOccupancyGroup(productLine: any) {
    return this.http.get<any>(`${environment.baseUrl}Master/GetRequestCompleteMaster/?productLine=${productLine}`, httpOptions);
  }

  getOccupancyType(occupancyGroupId: any) {
    return this.http.get<any>(`${environment.baseUrl}Master/GetOccupancyType/?occupancyGroupId=${occupancyGroupId}`, httpOptions);
  }

  // Generic POST request for submitting the data to the api
  // could update once backend API ready
  post<T>(url: string, body: any): Observable<T> {
    return this.http.post<any>(url, body, this.httpOptions).pipe(catchError(this.handleError));
  }

  //Generic GET request for api calling
  // could update once backend API ready
  get<T>(url: string): Observable<T> {
    return this.http.get<T>(url, this.httpOptions).pipe(
      tap((response) => response),
      catchError(this.handleError)
    );
  }

  handleError(error: any): Observable<never> {
    throw new Error(error.message);
  }

  getPropertyFireLocations(reviewRequestId: number): Observable<NormalLossExpectancy[]> {
    return this.get<any>(`${environment.baseUrl}Property/GetPropertyFireLocations?reviewRequestId=${reviewRequestId}`);
  }

  getProbableMaximumLoss(reviewRequestId: number): Observable<ProbableMaximumLoss[]> {
    return this.get<any>(`${environment.baseUrl}Property/GetNormalLossExpectancy?reviewRequestId=${reviewRequestId}`);
  }

  getMaximumForeseeableLoss(reviewRequestId: number): Observable<MaximumForeseeableLoss[]> {
    return this.get<any>(`${environment.baseUrl}Property/GetNormalLossExpectancy?reviewRequestId=${reviewRequestId}`);
  }

  getPropertyEquipmentBreakdownLocations(reviewRequestId: number): Observable<EquipmentProbableMaximumLoss[]> {
    return this.get<any>(`${environment.baseUrl}Property/GetPropertyEquipmentBreakdownLocations?reviewRequestId=${reviewRequestId}`);
  }

  getGeneralPropertyWeight(occupancyCodes: any): Observable<GeneralPropertyWeightResponse[]> {
    return this.post<GeneralPropertyWeightResponse[]>(`${environment.baseUrl}Master/GetGeneralPropertyWeight`, occupancyCodes);
  }

  importData(data: any, propertyValueData: any) {
    this.importDataSubject.next({ locationData: data, propertyValueData: propertyValueData });
  }

  importPropertyLocations(data: PropertyLocationImportRequest[]): any {
    const apiURL = `${environment.baseUrl}Property/PropertyLocationImport`;
    return this.http.post(apiURL, data);
  }

  searchLocationByName(locationFilter: LocationFilterModel) {
    const body = JSON.stringify(locationFilter);
    return this.http.post<any>(`${environment.baseUrl}Property/GetLocationSuggestionByName`, body, httpOptions);
  }
  
  searchCountryName(query: string): Observable<any> {
    return this.http.get<any>(`${environment.baseUrl}Property/GetCountrySuggestionByName/${query}`, httpOptions);
  }
}
-------------------------ReToolTabService-------------
import { Injectable } from '@angular/core';
import { FormControlStatus, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, catchError, filter, map, Observable, of, Subject, Subscription, switchMap } from 'rxjs';
import { environment } from '../../../../environments/environment';
import { AppConstants } from '../../../shared/constants/app.constants';
import { ReToolConstants } from '../constants/re-tool.constants';
import { ActionEnum } from '../models/action-enum';
import { Cover } from '../models/cover';
import { PropertyEquipmentLocation } from '../models/property-equipment-location';
import { PropertyFireLocation } from '../models/property-fire-location';
import { PropertyLocation } from '../models/property-location';
import { PropertyValue } from '../models/property-value';
import { SavePropertyLocationRequestModel } from '../models/savePropertyRequest';
import { ReToolService } from './re-tool.service';
import { OverAllRating } from '../models/overall-ratings';

interface DynamicAccessiblePropertyItem {
  ULId?: string;
  Address: string;
  City?: string;
  StateProvince: string;
  LocationAddressMapId?: number;
}

@Injectable({
  providedIn: 'root'
})
export class ReToolTabService {
  reviewRequestId: number;
  private dataSourceSubject$ = new Subject<{ event: string, payload: any }>();
  public hasFormChange$ = new BehaviorSubject<boolean>(false);
  public selectedCurrencyUnitSubject$ = new BehaviorSubject<any>(null);
  private selectedLocAddressData = new BehaviorSubject<any>(null);
  selectedLocAddressData$ = this.selectedLocAddressData.asObservable();
  formStatus: FormControlStatus = ReToolConstants.valid;
  subscription: Subscription | undefined = new Subscription();
  propertyLocationForm: FormGroup;
  tabIndex: number;
  subTabIndex: number;
  productLineId: number = 0;
  currencyUnitValid: boolean = true;
  allPropertyValuesDeleted: boolean = false;
  private locAddressPopupClosedSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  locAddressPopupClosedSubject$ = this.locAddressPopupClosedSubject.asObservable();
  propertyLocationColumns: string[] = [
    "ULID",
    "LocationName",
    "StreetAddress",
    "CityName",
    "StateName",
    "CountryName",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "BusinessInterruptionValue",
    "BusinessInterruptionOtherValue",
    "IndemnityPeriod",
    "PayRollValue",
    "PayRollDayValue",
    "TotalTE",
    "Total",
    "Delete"
  ];

  occupancyColumns: string[] = [
    "ULID",
    "LocationName",
    "StreetAddress",
    "CountryName",
    "OccupancyGroup",
    "OccupancyType",
    "OccupancyCode",
    "Hazard",
    "EquipmentBreakdown",
    "GroupBuildingArea",
    "BuildingValuePerSquareFeet",
    "AutomaticSprinklersPercentage",
    "AutomaticSprinklersNeededPercentage"
  ];

  generalPropertyColumns: string[] = [
    "ULID",
    "LocationName",
    "StreetAddress",
    "CountryName",
    "NormalLossExpectancy",
    "ProbableMaximumLoss",
    "MaximumForeseeableLoss",
    "HumanElementCalculated",
    "ConstructionCalculated",
    "ConstructionHazards",
    "DetectionSecurity",
    "AutomaticSprinklers",
    "FireWaterSupply",
    "FireManualResponse",
    "SpecialHazards",
    "EquipmentHazards",
    "ExternalExposures",
    "BusinessInterruptionCalculated",
    "PropertyDamageIndexUpdated",
    "PropertyDamageIndexAdjusted",
    "BusinessInterruptionIndexCalculated",
    "LocationQualityIndexCalculated",
    "ConfidenceIndex",
    "LossPreventionSource",
    "LossPreventionDate",
    "LossPreventionComments"
  ];

  normalLossExpectancyColumns: string[] = [
    "ULID",
    "FullAddress",
    "StreetAddress",
    "CountryName",
    "GroupBuildingArea",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "AnnualBusinessInterruptionValue",
    "IndemnityPeriodMonth",
    "PayRollValue",
    "PayRollDayValue",
    "NormalLossCompare",
    "NormalLossScenario",
    "NormalLossDeficiencyDriven",
    "NormalLossPropertyDamage",
    "NormalLossOtherPropertyDamage",
    "TotalPDNLE",
    "NormalLossBusinessInterruption",
    "NormalLossInterBusinessInterruption",
    "NormalLossOtherTimeElement",
    "TotalTE",
    "NLEActual",
    "NormalLossIndemnityPeriodBI",
    "IPFactTotal",

  ];

  probableMaximumLossColumns: string[] = [
    "ULID",
    "FullAddress",
    "StreetAddress",
    "CountryName",
    "GroupBuildingArea",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "AnnualBusinessInterruptionValue",
    "IndemnityPeriodMonth",
    "PayRollValue",
    "PayRollDayValue",
    "ProbableLossCompare",
    "ProbableLossScenario",
    "ProbableLossPropertyDamage",
    "ProbableLossOtherPropertyDamage",
    "TotalPDPML",
    "ProbableLossBusinessInterruption",
    "ProbableLossInterBusinessInterruption",
    "ProbableLossOtherTimeElement",
    "TotalTE",
    "PML",
    "ProbableLossIndemnityPeriodBI",
    "IPFactTotal",
  ];

  maximumForeseeableLossColumns: string[] = [
    "ULID",
    "FullAddress",
    "StreetAddress",
    "CountryName",
    "GroupBuildingArea",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "AnnualBusinessInterruptionValue",
    "IndemnityPeriodMonth",
    "PayRollValue",
    "PayRollDayValue",
    "MaximumLossCompare",
    "MaximumLossScenario",
    "MaximumLossPropertyDamage",
    "MaximumLossOtherPropertyDamage",
    "TotalPDMFL",
    "MaximumLossBusinessInterruption",
    "MaximumLossInterBusinessInterruption",
    "MaximumLossOtherTimeElement",
    "TotalTE",
    "MFL",
    "MaximumLossIndemnityPeriodBI",
    "IPFactTotal",
  ];

  equipmentProbableMaximumLossColumns: string[] = [
    "ULID",
    "FullAddress",
    "StreetAddress",
    "CountryName",
    "GroupBuildingArea",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "AnnualBusinessInterruptionValue",
    "IndemnityPeriodMonth",
    "PayRollValue",
    "PayRollDayValue",
    "ProbableLossCompare",
    "ProbableLossScenario",
    "ProbableLossPropertyDamage",
    "ProbableLossOtherPropertyDamage",
    "TotalPDPML",
    "ProbableLossBusinessInterruption",
    "ProbableLossInterBusinessInterruption",
    "ProbableLossOtherTimeElement",
    "TotalTE",
    "EBPML",
    "ProbableLossIndemnityPeriodBI",
    "IPFactTotal"
  ];

  equipmentMaximumForeseeableLossColumns: string[] = [
    "ULID",
    "FullAddress",
    "StreetAddress",
    "CountryName",
    "GroupBuildingArea",
    "BuildingValue",
    "EquipmentValue",
    "InventoryValue",
    "OtherValue",
    "TotalPD",
    "AnnualBusinessInterruptionValue",
    "IndemnityPeriodMonth",
    "PayRollValue",
    "PayRollDayValue",
    "MaximumLossCompare",
    "MaximumLossScenario",
    "MaximumLossPropertyDamage",
    "MaximumLossOtherPropertyDamage",
    "TotalPDMFL",
    "MaximumLossBusinessInterruption",
    "MaximumLossInterBusinessInterruption",
    "MaximumLossOtherTimeElement",
    "TotalTE",
    "EBMFL",
    "MaximumLossIndemnityPeriodBI",
    "IPFactTotal"
  ];

  coverColumns: string[] = [
    "ReportedBuildingValue",
    "ReportedContentsValue",
    "ReportedTotalPD",
    "ReportedTotalBivalue",
    "ReportedTIV",
    "ReviewedBuilding",
    "ReviewedContents",
    "ReviewedTotalPD",
    "ReviewedTotalBI",
    "ReviewedTIV",
    "ReviewedPercentageBuilding",
    "ReviewedPercentageContents",
    "ReviewedPercentageTotalPD",
    "ReviewedPercentageTotalBI",
    "ReviewedPercentageTIV",
    "TimeElementExcluded",
    "RecommendedReviewFrequency",
    "RecommendedAccountPercentageTIV",
    "OccupancyGroupTIV",
    "OccupancyTypeTIV",
    "OccupancyCodeTIV",
    "HazardTIV",
    "EquipmentBreakdownTIV",
    "DeviationTIV",
    "IsHazardTIVUpdated",
    "IsEquipmentBreakdownUpdatedTIV",
    "OccupancyGroupHighestHazardReview",
    "OccupancyTypeHighestHazardReview",
    "OccupancyCodeHighestHazardReview",
    "OccupancyHighestHazardReview",
    "EquipmentBreakdownHazardReview",
    "DeviationHighestHazardReview",
    "IsHighestHazardReviewUpdated",
    "IsEBRHighestHazardReviewUpdated",
    "IsHazardUpdated",
    "IsEquipmentBreakdownUpdated",
    "Interdependency",
    "ContingentTimeElement",
    "QualityOfSupplyChainInfo",
    "SCRiskMgmt",
    "SupplyChainConfidence"
  ];

  constructor(private reToolService: ReToolService, private toastr: ToastrService) { }

  emit(event: string, ds: any) {
    this.dataSourceSubject$.next({ event: event, payload: ds });
  }

  on(event: string): Observable<any> {
    return this.dataSourceSubject$.asObservable().pipe(
      filter(e => e.event === event),
      map(e => e.payload)
    );
  }

  setUpPropertyValuesData(isGeneralProperty: boolean = false): Observable<any> {
    return this.reToolService.getLocationProperties(this.reviewRequestId, isGeneralProperty);
  }

  setUpCoverWithPropertyValuesData(): Observable<any> {
    return this.reToolService.getCoverWithPropertyValues(this.reviewRequestId);
  }

  setUpPropertyValueWithDefaultData(): Observable<any> {
    return of([new PropertyValue(), new PropertyValue()]);
  }

  setUpPropertyFireLocationData(): Observable<any> {
    return this.reToolService.getPropertyFireLocations(this.reviewRequestId);
  }

  setUpProbableMaximumLossData(): Observable<any> {
    return this.reToolService.getProbableMaximumLoss(this.reviewRequestId);
  }

  setUpMaximumForeseeableLossData(): Observable<any> {
    return this.reToolService.getMaximumForeseeableLoss(this.reviewRequestId);
  }

  setUpPropertyEquipmentLocationData(): Observable<any> {
    return this.reToolService.getPropertyEquipmentBreakdownLocations(this.reviewRequestId);
  }

  // The purpose of this logic is to maintain a parent and sub tab association
  // which can be used individually as a single value to determine tab relationships
  encodeTabIndex(parentTabIndex: number, subTabIndex: number): number {
    if (parentTabIndex === 0) return 1;
    return ((parentTabIndex << 3) | subTabIndex);
  }

  // This is to fetch parent and sub tab indexes out of association value
  // it could be removed if not needed in future
  decodeTabIndex(encodedTabIndexValue: number): { parentTabIndex: number, subtabIndex: number } {
    const parentIndex = (encodedTabIndexValue >> 3) & 7;//shift right by 3 bits and mask with 7 (0111)
    const subIndex = encodedTabIndexValue & 7;
    return { parentTabIndex: parentIndex, subtabIndex: subIndex } as any;
  }

  saveUpdateDeleteAndFetchThePropertyValueFormData(data: SavePropertyLocationRequestModel, isTabChange: boolean = false): Observable<any> {
    const isGeneralProperty = false;
    const postUrl = `${environment.baseUrl}Property`;
    const getUrl = `${environment.baseUrl}Property/GetAllProperty/${this.reviewRequestId}/${isGeneralProperty}`;
    return this.saveUpdateAndFetchTheLatestActiveFormData(postUrl, data, !isTabChange ? getUrl : null);
  }

  updatePropertyLocationFormData(data: PropertyLocation[], isTabChange: boolean = false, isGeneralProperty: boolean = false): Observable<any> {
    const postUrl = `${environment.baseUrl}Property/UpdateOccupancyOrGeneralProperty`;
    const getUrl = `${environment.baseUrl}Property/GetAllProperty/${this.reviewRequestId}/${isGeneralProperty}`;
    return this.saveUpdateAndFetchTheLatestActiveFormData(postUrl, data, !isTabChange ? getUrl : null);
  }

  saveUpdateAndFetchThePropertyFireLocationFormData(data: PropertyFireLocation[], isTabChange: boolean = false): Observable<any> {
    const postUrl = `${environment.baseUrl}Property/AddOrUpdatePropertyFireLocation`;
    const getUrl = `${environment.baseUrl}Property/GetPropertyFireLocations?reviewRequestId=${this.reviewRequestId}`;
    return this.saveUpdateAndFetchTheLatestActiveFormData(postUrl, data, !isTabChange ? getUrl : null);
  }

  private saveUpdateAndFetchTheLatestActiveFormData<T>(postUrl: string, data: any, getUrl: string): Observable<T> {
    return this.reToolService.post(postUrl, data).pipe(
      switchMap((postResponse) => {
        if (getUrl) {
          return this.reToolService.get<T>(getUrl);
        } else {
          return of(postResponse as T);
        }
      }),
      catchError(this.reToolService.handleError)
    )
  }

  showErrorMessage(message: string, action: string) {
    this.toastr.error(message, '', {
      timeOut: AppConstants.snackbarDuration,
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right"
    });
  }

  showSuccessMessage(message: string, action: string) {
    this.toastr.success(message, '', {
      timeOut: AppConstants.snackbarDuration,
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right"
    });
  }

  actionStateChange(formGroup: FormGroup) {
    this.subscription?.add(
      formGroup?.get('Action').valueChanges.subscribe(value => {
        this.hasFormChange$.next((value != ActionEnum.IsSaved))
      })
    );
  }

  saveUpdateAndFetchThePropertyEquipmentLocationFormData(data: PropertyEquipmentLocation[], isTabChange: boolean = false): Observable<any> {
    const postUrl = `${environment.baseUrl}Property/UpdatePropertyEquipmentBreakdownLocation`;
    const getUrl = `${environment.baseUrl}Property/GetPropertyEquipmentBreakdownLocations?reviewRequestId=${this.reviewRequestId}`;
    return this.saveUpdateAndFetchTheLatestActiveFormData(postUrl, data, !isTabChange ? getUrl : null);
  }

  saveUpdateAndFetchTheCoverFormData(data: Cover, isTabChange: boolean = false): Observable<any> {
    const postUrl = `${environment.baseUrl}Property/SaveOrUpdatePropertyAccountCover`;
    const getUrl = `${environment.baseUrl}Property/GetPropertyAccountCover/${this.reviewRequestId}`;
    return this.saveUpdateAndFetchTheLatestActiveFormData(postUrl, data, !isTabChange ? getUrl : null);
  }

  mergePropertyValueData<T extends DynamicAccessiblePropertyItem>(data: T[]): T[] {
    const mergeMap = new Map<string, Partial<T & {
      StreetAddresses: string[],
      CityNames: string[],
      StateProvinces: string[],
      LocationAddressMapIds: number[]
    }>>();

    let mergedData: any[] = [];
    data.forEach(item => {
      const key = item.ULId;

      if (!mergeMap.has(key)) {
        mergeMap.set(key, {
          ...item,
          StreetAddresses: [],
          CityNames: [],
          StateProvinces: [],
          LocationAddressMapIds: []
        });
      }

      const existing = mergeMap.get(key);
      existing.StreetAddresses.push(item.Address);
      existing.CityNames.push(item.City);
      existing.StateProvinces.push(item.StateProvince);
      if (item instanceof PropertyValue)
        existing.LocationAddressMapIds.push(item.LocationAddressMapId);
    });

    mergedData = Array.from(mergeMap.values());
    mergedData.forEach(x => this.setAddressAndToolTip(x));
    return mergedData;
  }

  // handle tooltip and final grid values
  setAddressAndToolTip(data: any) {
    if (data.Action === ActionEnum.IsDeleted) return;
    
    if (Array.from(new Set(data.StreetAddresses)).length > 1
      || Array.from(new Set(data.CityNames)).length > 1
      || Array.from(new Set(data.StateProvinces)).length > 1) {
      data.Address = ReToolConstants.multiple;
    } else {
      data.Address = data.StreetAddresses[0];
    }

    if (Array.from(new Set(data.CityNames)).length > 1) {
      data.City = ReToolConstants.multiple;
    } else {
      data.City = data.CityNames[0];
    }

    if (Array.from(new Set(data.StateProvinces)).length > 1) {
      data.StateProvince = ReToolConstants.multiple;
    } else {
      data.StateProvince = data.StateProvinces[0];
    }

    const streetAddressToolTip = [];
    streetAddressToolTip.push(data.StreetAddresses.map((address, index) => {
      const city = data.CityNames[index] ? `${data.CityNames[index]}, ` : '';
      const state = data.StateProvinces[index] ? `${data.StateProvinces[index]}, ` : '';
      return `${address}, ${city} ${state}`
    }));

    data.StreetAddressToolTip = [...new Set(streetAddressToolTip[0])].join('\n');
  }

  SetLocAddressSelectedData(data: any[]) {
    this.selectedLocAddressData.next(data);
  }
  
  setLocAddressPopupClosedSubject(status: boolean): void {
    this.locAddressPopupClosedSubject.next(status);
  }
  
  getSessionStorage(sessionKey: string): any {
    const storedData = sessionStorage.getItem(sessionKey);
    return storedData ? JSON.parse(storedData) : new OverAllRating();
  }
  
  setSessionStorage(sessionKey: string, data: OverAllRating | null): void {
    sessionStorage.setItem(sessionKey, JSON.stringify(data));
  }
}
-------------------------CommonService--------------------------
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { RoleNameEnum } from '../enums/rolename.enum';
import { UserDetailsModel } from '../../core/models/user-details-model';
import { MatSnackBar } from '@angular/material/snack-bar'
import { AppConstants } from '../constants/app.constants';
import { ProductLineEnum } from '../enums/productline.enum';
import { FormGroup } from '@angular/forms';
import { RequestStatusCount } from '../../features/dashboard/models/request-status-count';
import { UserFeatureEnum } from '../enums/userfeature.enum';
import { DatePipe } from '@angular/common';
import { AppMaintenanceModel } from '../../core/models/app-maintenance';
@Injectable({
  providedIn: 'root'
})
export class CommonService {
  private subjectToggleView = new Subject<boolean>();
  subjectToggleView$ = this.subjectToggleView.asObservable();
  userDetails: UserDetailsModel | undefined;
  private subjectRequestStatusCountSub = new Subject<RequestStatusCount>();
  subjectRequestStatusCountSub$ = this.subjectRequestStatusCountSub.asObservable();
  private subjectAccountClearedSource = new Subject<void>();
  subjectAccountClearedSub$ = this.subjectAccountClearedSource.asObservable();
  private loadSavedFiltersSource = new Subject<void>();
  loadSavedFiltersSub$ = this.loadSavedFiltersSource.asObservable();
  appMaintainenanceDetails: AppMaintenanceModel | undefined;
  private appMaintainenaceSub = new BehaviorSubject<boolean>(false);
  appMaintainenaceSub$ = this.appMaintainenaceSub.asObservable();
  private headerVisible = new Subject<boolean>();
  headerVisible$ = this.headerVisible.asObservable();

  constructor(private snackBar: MatSnackBar, private datePipe: DatePipe) { }

  loadSavedFilters() {
    this.loadSavedFiltersSource.next();
  }

  snackbarSuccessMessage(message: string, Title: string = "", _horizontalPosition: any = AppConstants.snackbarHorizontalPosition, _verticalPosition: any = AppConstants.snackbarVerticalPosition) {
    this.snackBar.open(message, Title, {
      duration: AppConstants.snackbarDuration,
      horizontalPosition: _horizontalPosition,
      verticalPosition: _verticalPosition,
      panelClass: [AppConstants.snackbarSuccessStyle],
    });
  }

  snackbarErrorMessage(message: string, Title: string = "", _horizontalPosition: any = AppConstants.snackbarHorizontalPosition, _verticalPosition: any = AppConstants.snackbarVerticalPosition) {
    this.snackBar.open(message, Title, {
      duration: AppConstants.snackbarDuration,
      horizontalPosition: _horizontalPosition,
      verticalPosition: _verticalPosition,
      panelClass: [AppConstants.snackbarErrorStyle],
    });
  }

  getDateByTimeZone(date, minutes) {
    if (minutes < 0) {
      date.setMinutes(date.getMinutes() + (minutes * -1));
    }
    else if (minutes > 0) {
      date.setMinutes(date.getMinutes() - (minutes * +1));
    }
    return date;
  }

  isUserFromUnderwriterGroup() {
    return this.userDetails?.roleId == RoleNameEnum.Underwriter || this.userDetails?.roleId == RoleNameEnum.UnderwriterTechnician || this.userDetails?.roleId == RoleNameEnum.UnderwriterManager;
  }

  isUserFromRiskEngineerGroup() {
    return this.userDetails?.roleId == RoleNameEnum.RiskEngineer || this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader || this.userDetails?.roleId == RoleNameEnum.GlobalLeader;
  }

  isUserFromValuationGroup() {
    return this.userDetails?.roleId == RoleNameEnum.ValuationLeader || this.userDetails?.roleId == RoleNameEnum.ValuationSpecialist;
  }

  isUserFromRiskEngineerGroupByToggleView(iSToggleShow: boolean) {
    return iSToggleShow ? this.userDetails?.roleId == RoleNameEnum.RiskEngineer || this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader : this.userDetails?.roleId == RoleNameEnum.RiskEngineer || this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader || this.userDetails?.roleId == RoleNameEnum.GlobalLeader;
  }

  isUserFromRiskEngineerGroupExceptGlobalLeader() {
    return this.userDetails?.roleId == RoleNameEnum.RiskEngineer || this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader;
  }

  isRoleFromRiskEngineerGroupExceptGlobalLeader(roleId) {
    return roleId == RoleNameEnum.RiskEngineer || roleId == RoleNameEnum.CountryLeader || roleId == RoleNameEnum.RegionalLeader;
  }

  isRoleFromValuationGroup(roleId) {
    return roleId == RoleNameEnum.ValuationLeader || roleId == RoleNameEnum.ValuationSpecialist;
  }

  isRoleFromUnderwriterGroup(roleId) {
    return roleId == RoleNameEnum.Underwriter || roleId == RoleNameEnum.UnderwriterTechnician || roleId == RoleNameEnum.UnderwriterManager;
  }

  isUserFromLeaderRole() {
    return this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader || this.userDetails?.roleId == RoleNameEnum.ValuationLeader;
  }

  isUserFromUWGroupOrRiskEngineer() {
    return this.userDetails?.roleId == RoleNameEnum.Underwriter || this.userDetails?.roleId == RoleNameEnum.UnderwriterTechnician || this.userDetails?.roleId == RoleNameEnum.UnderwriterManager || this.userDetails?.roleId == RoleNameEnum.RiskEngineer;
  }

  isUserAssociatedwithBuiderRiskOrMarine() {
    return (this.userDetails?.productLineId == ProductLineEnum.BuildersRisk || this.userDetails?.productLineId == ProductLineEnum.Marine)
  }

  addValidators(formGroup: FormGroup, validator: any) {
    for (const key in formGroup.controls) {
      formGroup.get(key).setValidators(validator[key]);
      formGroup.get(key).updateValueAndValidity();
    }
  }

  removeValidators(formGroup: FormGroup,) {
    formGroup.clearValidators();
    formGroup.updateValueAndValidity();
  }

  checkNullValue(value: any): any {
    return value == "" || value == undefined || value == null ? null : value
  }

  isValueEmpty(value: any): any {
    return value == "" || value == undefined || value == null || value.length <= 0 || value == 'null'
  }

  isValueEmptyAndNotLessThanZero(value: any): any {
    return value === "" || value === undefined || value === null || value === 'null'
  }

  checkNullOrBlank(value: any): any {
    return value == null || value == '' || value == undefined ? '-' : value
  }

  checkNullOrZero(value: any): any {
    return value == "" || value == "0" || value == undefined || value == null ? null : value
  }

  sendRequestStatusCount(requestStatusCount: RequestStatusCount) {
    this.subjectRequestStatusCountSub.next(requestStatusCount);
  }

  getPermissionStatus(featureId: number): boolean {
    const userPermission = this.userDetails?.userPermission
      .find(
        permission => permission.userFeatureId == featureId
      );

    return userPermission != null && userPermission != undefined;
  }

  triggerAccountCleared() {
    this.subjectAccountClearedSource.next();
  }

  snackbarErrorMessageforAlert(message: string, Title: string = "", _horizontalPosition: any = AppConstants.snackbarHorizontalPosition, _verticalPosition: any = AppConstants.snackbarVerticalPosition) {
    this.snackBar.open(message, Title, {
      duration: AppConstants.snackbarDurationforAlert,
      horizontalPosition: _horizontalPosition,
      verticalPosition: _verticalPosition,
      panelClass: [AppConstants.snackbarErrorStyleForAlert],
    });
  }

  removeYearSubFolder(filepath: string): string {
    //split the filepath by '\\'
    const parts = filepath.split('\\');

    //find index of year part
    const yearIndex = parts.findIndex(part => /^\d{4}$/.test(part));

    //keep the parts upto and including the year
    const newParts = yearIndex !== -1 ? parts.slice(0, yearIndex) : parts;

    const newFilepath = newParts.join('/');
    return newFilepath;
  }

  isUserFromRiskEngineerGroupExceptRiskEngineer() {
    return this.userDetails?.roleId == RoleNameEnum.CountryLeader || this.userDetails?.roleId == RoleNameEnum.RegionalLeader || this.userDetails?.roleId == RoleNameEnum.GlobalLeader;
  }

  isUserAdmin() {
    const admin = this.userDetails?.userPermission.find(permission =>
      permission.userFeatureId == UserFeatureEnum.userAdmin
    );
    return admin != null && admin != undefined;
  }

  getDropdownSelectValue(value: any): any {
    return (value == "" || value == undefined || value == null || value == 0) ? AppConstants.defaultDropDownValue : value.toString()
  }

  convertToMediumDateFromat(value: Date): any {
    return (value == null || value == undefined) ? '-' : this.datePipe.transform(value, 'mediumDate')
  }

  setAppMaintainenance(status: boolean) {
    this.appMaintainenaceSub.next(status);
  }

  showHeader() {
    this.headerVisible.next(true);
  }

  hideHeader() {
    this.headerVisible.next(false);
  }

  getProductLineParameterForEdW(productLineId) {
    switch (productLineId.toString()) {

      case ProductLineEnum.GeneralCorporateProperty.toString():
      case ProductLineEnum.Mining.toString():
      case ProductLineEnum.PowerGeneration.toString():
      case ProductLineEnum.OilGasAndPetrochemical.toString():
      case ProductLineEnum.BuildersRisk.toString():
      case ProductLineEnum.MidMarketMittelstandProperty.toString():
        return AppConstants.productLineProperty;

      case ProductLineEnum.Marine.toString():
        return AppConstants.productLineMarine;

      case ProductLineEnum.Programs.toString():
        return AppConstants.productLinePrograms;

      case ProductLineEnum.Other.toString():
      default:
        return null;
    }
  }

  formatToDate(date: string | Date): any {
    if (!date) return '-';
    const parsedDate = new Date(date);
    return isNaN(parsedDate.getTime()) ? '-' : parsedDate.setHours(0,0,0,0);
  }
  
  convertExcelDate(cell: any): void {
    if (cell && typeof cell.v === 'number') {
      const excelDate = new Date(cell.v); //Directly used JS Date object, we are getting in milliseconds no need of further conversion
      excelDate.setHours(0, 0, 0, 0);
      
      // check if excel date is invalid
      if(isNaN(excelDate.getTime())){
        return;
      }

      let serialDate = (excelDate.getTime() - new Date(1900, 0, 1).getTime()) / (1000 * 60 * 60 * 24) + 3;
      serialDate = Math.floor(serialDate);
      cell.v = serialDate;
      cell.t = 'n';
      cell.z = 'DD-MMM-YYYY';
    }
  }
}
------------------ReToolCalculationService--------------------
import { Injectable } from '@angular/core';
import { ReToolConstants } from '../constants/re-tool.constants';
import { GeneralProperty } from '../models/general-property';
import { GeneralPropertyTypeCodeWeightsEnum } from '../models/general-property-type-code-weights-enum';
import { RedistributionWeight } from '../models/redistribution-weights';
import { RiskFactorElementEnum } from '../models/risk-factor-element-enum';
import { Utility } from '../utility/mapper-util';
import { CommonService } from '../../../shared/services/common.service';
import { BehaviorSubject } from 'rxjs';
import { OverAllRating } from '../models/overall-ratings';
import { ReToolTabService } from './re-tool-tab.service';

@Injectable({
  providedIn: 'root'
})
export class ReToolCalculationService {
  exchangeCurrencyRate: number = 2;
  private redistributionWeights: RedistributionWeight[] = [];
  private fractionDigits: number = ReToolConstants.nine;
  private overAllRatingCalculationSubject = new BehaviorSubject<OverAllRating>(this.reToolTabService.getSessionStorage(ReToolConstants.overAllRatingSessionKey));
  overAllRatingCalculation$ = this.overAllRatingCalculationSubject.asObservable();
  overAllRatingPDIndex: number | string | null;
  overAllRatingTIVReviewedPercent: number;

  constructor(private commonService: CommonService, private reToolTabService: ReToolTabService) { }

  //#region 'calculate overall rating'

  calculateOverAllRatingPDIndex<T>(rows: T[], reviewedTIV: number): number | null {
    if (this.commonService.isValueEmpty(reviewedTIV) || reviewedTIV === 0) return null;

    let totalPdIndexWeight = 0;
    let totalTIVAndMFL = 0;

    rows.forEach((row: T) => {
      let rowValues = row as any;
      const tivTransactionalCurrency = this.calculateTIVTransactionalCurrency(rowValues);
      const mfl = Number(rowValues.MaximumForeseeableLoss) || this.safeParseFloat(rowValues.MaximumForeseeableLoss);

      if (isNaN(tivTransactionalCurrency)) return;

      const totalTIVandMFLForRow = tivTransactionalCurrency + mfl;
      let propertyDamageIndexAdjusted = rowValues?.PropertyDamageIndexAdjusted;

      if (!this.commonService.isValueEmpty(propertyDamageIndexAdjusted) && propertyDamageIndexAdjusted <= 2) {
        totalPdIndexWeight += (Number(rowValues?.PropertyDamageIndexUpdated) * totalTIVandMFLForRow);
      } else {
        totalPdIndexWeight += (Number(rowValues?.PropertyDamageIndexCalculated) * totalTIVandMFLForRow);
      }

      totalTIVAndMFL += totalTIVandMFLForRow;
    });

    if (totalTIVAndMFL === 0 || isNaN(totalPdIndexWeight)) return 0;

    return Utility.roundToOneDecimalPlace(totalPdIndexWeight / totalTIVAndMFL);
  }

  calculateReviewedTIV<T>(rows: T[]): number {
    const reviewedTIVTotal =
      rows.reduce((sum, location) => {
        let propertyValues = location as any;
        return sum
          + this.safeParseFloat(propertyValues.BuildingValue)
          + this.safeParseFloat(propertyValues.EquipmentValue)
          + this.safeParseFloat(propertyValues.InventoryValue)
          + this.safeParseFloat(propertyValues.OtherValue)
          + this.safeParseFloat(propertyValues.BusinessInterruptionValue)
          + this.safeParseFloat(propertyValues.BusinessInterruptionOtherValue)
          + this.safeParseFloat(propertyValues.PayRollValue);
      }, 0);

    return Math.round(reviewedTIVTotal);
  }

  calculateReviewedTIVPercentage<T>(rows: T[]): number {
    const calculatedReviewedTIV = this.calculateReviewedTIV(rows);
    const totalReviewedReportedTIV = this.calculateTotalReportedTIV(rows);

    if (totalReviewedReportedTIV === 0 || !isFinite(totalReviewedReportedTIV)) {
      return 0;
    }

    return Math.round((calculatedReviewedTIV / totalReviewedReportedTIV) * 100);
  }

  calculateTotalReportedTIV<T>(rows: T[]): number {
    const initialRow = rows[0] as any;
    return this.safeParseFloat(initialRow.ReportedBuildingValue) + this.safeParseFloat(initialRow.ReportedContentsValue) + this.safeParseFloat(initialRow.ReportedTotalBIValue);
  }

  updateOverAllRating(pdIndex: number | string | null, tivReviewedPercent: number): void {
    const currentOverAllRating = this.reToolTabService.getSessionStorage(ReToolConstants.overAllRatingSessionKey);
    const updateOverAllRating = new OverAllRating();

    if (pdIndex === null || pdIndex === ReToolConstants.NaN) {
      updateOverAllRating.PDIndex = null;
    } else {
      updateOverAllRating.PDIndex = (pdIndex !== null && pdIndex !== undefined) ? pdIndex : currentOverAllRating.PDIndex;
    }

    updateOverAllRating.TIVReviewedPercent = (tivReviewedPercent !== null && tivReviewedPercent !== undefined) ? tivReviewedPercent : currentOverAllRating.TIVReviewedPercent;
    this.overAllRatingCalculationSubject.next(updateOverAllRating);
    this.reToolTabService.setSessionStorage(ReToolConstants.overAllRatingSessionKey, updateOverAllRating);
  }
  //#endregion 'calculate overall rating'

  //#region 'Weight calculation region'

  setRedistributionWeights(redistributionWeights: RedistributionWeight[]) {
    this.redistributionWeights = redistributionWeights;
    return {
      calculate: this.calculateAll.bind(this)
    };
  }

  setPropertyData<T>(row: T): any {
    return {
      setGroupOrTypeCode: (code: number) => this.setGroupOrTypeCode(row, code),
    }
  }

  private calculateAll(): void {
    this.redistributionWeights.forEach((rdWeights) => {
      this.calculate(rdWeights);
    });
  }

  private calculate(redistributionWeight: RedistributionWeight): RedistributionWeight {
    let sum = 0;
    for (const key in redistributionWeight.inputWeights) {
      if (this.isValidInput(redistributionWeight.inputRatings[key])) {
        sum = Number((sum + redistributionWeight.inputWeights[key] / 100).toFixed(this.fractionDigits));
      }
    }

    Object.entries(redistributionWeight.inputRatings).forEach(([key]) => {
      if (this.isValidInput(redistributionWeight.inputRatings[key])) {
        const weight = ((redistributionWeight.inputWeights[key] / sum) / 100);
        redistributionWeight.redistributedWeights[key] = parseFloat(weight.toFixed(this.fractionDigits));
      }
      else
        redistributionWeight.redistributedWeights[key] = 0;
    });

    return redistributionWeight;
  }

  private getWeightDistributionByCode(code: number) {
    return this.redistributionWeights[this.getIndexByCode(code)];
  }

  private getWeightDistributionRiskFactorByElement(code: number, element: RiskFactorElementEnum): number {
    const redistributionWeight: RedistributionWeight
      = this.getWeightDistributionByCode(code);
    return parseFloat(
      (
        Number(this.isValidInput(redistributionWeight.inputRatings[element]) ? redistributionWeight.inputRatings[element] : 0) *
        Number(redistributionWeight.redistributedWeights[element])
      ).toFixed(this.fractionDigits));
  }

  private updateWeightDistribution(row: any, code: number, value: string | number | null, element: RiskFactorElementEnum): any {
    let index = this.getIndexByCode(code);
    if (index === -1) {
      return {
        getRiskFactor: () => -1,
        getPDIndexValue: () => -1,
        getLQIIndexValue: () => -1
      }
    }

    let redistributionWeight = this.getWeightDistributionByCode(code);
    redistributionWeight.inputRatings[element] = value;
    const updatedDistributedWeight = this.calculate(redistributionWeight);
    this.redistributionWeights[index] = updatedDistributedWeight;

    return {
      getRiskFactor: () => this.getWeightDistributionRiskFactorByElement(code, element),
      getPDIndexValue: () => this.getPDIndexValue(row, code),
      getLQIIndexValue: () => this.getLQIIndexValue(row, code, this.getPDIndexValue(row, code))
    }
  }

  private setGroupOrTypeCode(row: any, code: number): any {
    return {
      setElement: (element: RiskFactorElementEnum) => this.setElement(row, code, element),
      getLQIIndexValue: () => this.getLQIIndexValue(row, code, this.getPDIndexValue(row, code))
    }
  }

  private setElement(row: any, code: number, element: RiskFactorElementEnum): any {
    return {
      updateWeightDistribution: (value: string | number | null) => this.updateWeightDistribution(row, code, value, element)
    }
  }

  private getIndexByCode(code: number): number {
    if (code === GeneralPropertyTypeCodeWeightsEnum.SemiconductorCrystalGrowing
      || code === GeneralPropertyTypeCodeWeightsEnum.SemiconductorWaferFabrication) {
      return this.redistributionWeights.findIndex(w => w.groupTypeCode === code);
    }
    else {
      return this.redistributionWeights.findIndex(w => w.occupancyGroupId === code);
    }
  }

  private isValidInput(rating: string | number): boolean {
    return rating !== ReToolConstants.NA && rating !== null && !isNaN(Number(rating));
  }

  private getRedistributedFactorsSum(code: number): number {
    let sum = 0;
    let redistributionWeight = this.getWeightDistributionByCode(code);
    Object.entries(redistributionWeight.redistributedWeights).forEach(([key]) => {
      const calculatedWeight = this.getWeightDistributionRiskFactorByElement(code, key as RiskFactorElementEnum);
      sum = Number((sum + calculatedWeight).toFixed(this.fractionDigits));
    });
    return sum;
  }

  private getPDIndexValue(property: GeneralProperty, code: number): number | null {
    return this.getRedistributedFactorsSum(code) * this.getMultiplierFactor(property);
  }

  private getMultiplierFactor(property: GeneralProperty) {
    const probableMaximumLossRate: number = Number(Utility.removeComma(property.ProbableMaximumLoss)) * this.exchangeCurrencyRate;
    const maximumForeseeableLossRate: number = Number(Utility.removeComma(property.MaximumForeseeableLoss)) * this.exchangeCurrencyRate;
    const normalLossExpectancyRate: number = Number(Utility.removeComma(property.NormalLossExpectancy)) * this.exchangeCurrencyRate;
    const businessInterruptionValue: number = Number(property.BusinessInterruptionValue);
    const businessInterruptionOtherValue: number = Number(property.BusinessInterruptionOtherValue);
    const totalPD: number = Number(property.TotalPD);
    const payRollValue: number = Number(property.PayRollValue);
    const indemnityPeriod: number = Number(property.IndemnityPeriod);
    const normalLossDeficiencyDriven: boolean = property.NormalLossDeficiencyDriven || false;

    const totalPdBIOrOtherAndPayRoll = Number((totalPD
      + (12 * (businessInterruptionValue + businessInterruptionOtherValue)
        / indemnityPeriod) + payRollValue)
      ?.toFixed(1));

    const totalPdBIOrOtherAndPayRollRate = totalPdBIOrOtherAndPayRoll * this.exchangeCurrencyRate;
    const totalPdBIOrOtherAndPayRollRateFactor = 0.25 * totalPdBIOrOtherAndPayRollRate;

    if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 1;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 0.95;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 0.75;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 0.65;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.95;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.9;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.7;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.6;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 1;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 0.975;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 1;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) < (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate < 100)))
    ) {
      return 0.95;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 1;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) < (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.95;
    }
    else if (((probableMaximumLossRate) < (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 1;
    }
    else if (((probableMaximumLossRate) === (maximumForeseeableLossRate)
      && (normalLossExpectancyRate) === (probableMaximumLossRate)
      && !normalLossDeficiencyDriven)
      && (((totalPdBIOrOtherAndPayRollRate) < 400
        && (normalLossExpectancyRate) >= (totalPdBIOrOtherAndPayRollRateFactor))
        || ((totalPdBIOrOtherAndPayRollRate) >= 400
          && (normalLossExpectancyRate >= 100)))
    ) {
      return 0.9;
    }
    else
      return 0;
  }
  //#endregion 'Weight calculation'

  //#region 'LQI INdex calculation region'
  private getLQIIndexValue(row: any, code: number, pdIndexValue: number) {
    const redistributionWeight = this.getWeightDistributionByCode(code);
    if (!redistributionWeight) return 0.0;
    if (row.TimeElementExcluded) return pdIndexValue;
    if (redistributionWeight.groupCode === 1200
      && !this.commonService.isValueEmpty(redistributionWeight.inputRatings.humanElement))
      return this.evaluateLQIExpression(pdIndexValue, row.BusinessInterruptionIndexCalculated, redistributionWeight);
    if (redistributionWeight.groupTypeCode === 1409
      || redistributionWeight.groupTypeCode === 1410
      || redistributionWeight.groupCode === 1100
      || redistributionWeight.groupCode === 1300
      || redistributionWeight.groupCode === 1400
      || redistributionWeight.groupCode === 1500
      || redistributionWeight.groupCode === 1600
      || redistributionWeight.groupCode === 1700
      || redistributionWeight.groupCode === 1800
      || redistributionWeight.groupCode === 1900
      || redistributionWeight.groupCode === 2000
      || redistributionWeight.groupCode === 2200
      || redistributionWeight.groupCode === 2400
      || redistributionWeight.groupCode === 2600
      || redistributionWeight.groupCode === 2700
      || redistributionWeight.groupCode === 2900
      || redistributionWeight.groupCode === 3000
      || redistributionWeight.groupCode === 3100
      || redistributionWeight.groupCode === 3200)
      return this.evaluateLQIExpression(pdIndexValue, row.BusinessInterruptionIndexCalculated, redistributionWeight);
    return 0.0;
  }

  private evaluateLQIExpression(pdIndexValue: number, businessInterruptionIndexCalculated: number, redistributionWeight: RedistributionWeight) {
    if (Number.isNaN(pdIndexValue)) pdIndexValue = 0;
    if (Number.isNaN(businessInterruptionIndexCalculated)) businessInterruptionIndexCalculated = 0;
    return parseFloat(
      Number(pdIndexValue * (Number(redistributionWeight.inputWeights.totalPropertyDamage) / 100)
        + businessInterruptionIndexCalculated
        * (Number(redistributionWeight.inputWeights.totalBusinessInterruption) / 100)
      )
        .toFixed(this.fractionDigits));
  }
  //#endregion 'LQI INdex calculation region'

  private calculateTIVTransactionalCurrency<T>(row: T): number {
    let rowValues = row as any;
    let totalPD = rowValues.TotalPD ? this.safeParseFloat(rowValues.TotalPD) : Number(Utility.removeComma(rowValues.TotalPD));
    let businessInterruptionValue = rowValues.BusinessInterruptionValue ? this.safeParseFloat(rowValues.BusinessInterruptionValue) : Number(rowValues.BusinessInterruptionValue);
    let businessInterruptionOtherValue = rowValues.BusinessInterruptionOtherValue ? this.safeParseFloat(rowValues.BusinessInterruptionOtherValue) : Number(rowValues.BusinessInterruptionOtherValue);
    let indemnityPeriod = Number(rowValues.IndemnityPeriod);
    let payRollValue = rowValues.PayRollValue ? this.safeParseFloat(rowValues.PayRollValue) : Number(rowValues.PayRollValue);

    let calculatedBIValues: number = 0;
    if (indemnityPeriod > 0 && !isNaN(indemnityPeriod))
      calculatedBIValues = (12 * (businessInterruptionValue + businessInterruptionOtherValue) / indemnityPeriod);

    return Number((totalPD + calculatedBIValues + payRollValue)?.toFixed(1));
  }

  private safeParseFloat(value: string | undefined | null): number {
    const parsedValue = parseFloat(Utility.removeComma(value || '0.0'));
    return isNaN(parsedValue) ? 0 : parsedValue;
  }

  calculateOverAllRating(formData: any): void {
    const reviewedTIV = this.calculateReviewedTIV(formData);
    const pdIndex = this.calculateOverAllRatingPDIndex(formData, reviewedTIV);
    const tivPercent = this.calculateReviewedTIVPercentage(formData);
    if (pdIndex === null) {
      this.updateOverAllRating(pdIndex, 0);
    } else {
      this.updateOverAllRating(pdIndex.toFixed(1), tivPercent);
    }
  }
  
  getOverAllRatingSessionData() {
    const overAllRatingSessionData = sessionStorage.getItem(ReToolConstants.overAllRatingSessionKey);
    if (overAllRatingSessionData) {
      const parsedData = JSON.parse(overAllRatingSessionData);
      this.overAllRatingPDIndex = parsedData.PDIndex;
      this.overAllRatingTIVReviewedPercent = parsedData.TIVReviewedPercent;
    }
  }
}
-------------------CoverComponent.spec.ts--------------
Unit test case :-

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule, FormBuilder } from '@angular/forms';
import { CoverComponent } from './cover.component';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { of } from 'rxjs';
import { Utility } from '../../../utility/mapper-util';
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { CommonService } from '../../../../../shared/services/common.service';
import { DatePipe } from '@angular/common';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';

fdescribe('CoverComponent', () => {
  let component: CoverComponent;
  let fixture: ComponentFixture<CoverComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;
  let mockCommonService: jasmine.SpyObj<CommonService>;
  let mockCalculationService: jasmine.SpyObj<ReToolCalculationService>;
  beforeEach(async () => {
    // Mock Services
    mockReToolService = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getOccupancyType','getPropertyMaster']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['emit', 'on', 'showErrorMessage', 'actionStateChange','getSessionStorage']);
    mockCommonService = jasmine.createSpyObj('CommonService', ['checkNullOrZero']);
    mockCalculationService = jasmine.createSpyObj('ReToolCalculationService', ['updateOverAllRating']);

    // Mock Observables
    mockReToolService.getOccupancyGroup.and.returnValue(of({
      occupancyGroups: [{ text: 'Group A', value: 'A', category: 'CAT_A', defaultValue: 'Default A' }],
      hazard: [{ text: 'Hazard A', value: 'HA' }],
      equipmentBreakdown: [{ text: 'Breakdown A', value: 'BA' }]
    }));

    mockReToolTabService.on.and.returnValue(of({
      data: { ReportedBuildingValue: '100', ReportedContentsValue: '200' },
      columns: ['Column1', 'Column2']
    }));

    await TestBed.configureTestingModule({
      declarations: [CoverComponent],
      schemas: [NO_ERRORS_SCHEMA],
      imports: [ReactiveFormsModule],
      providers: [
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService },
        { provide: CommonService, useValue: mockReToolService },
        { provide: ReToolCalculationService, useValue: mockCalculationService },
        { provide: CommonService, useValue: DatePipe },
        FormBuilder,
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(CoverComponent);
    component = fixture.componentInstance;
    component['fb'] = TestBed.inject(FormBuilder); // Ensure FormBuilder is injected
    fixture.detectChanges();
    
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize the form and load occupancy groups on ngOnInit', () => {
    spyOn(component, 'loadOccupancyGroups');
    spyOn(component, 'initializeForm');

    component.ngOnInit();

    expect(component.loadOccupancyGroups).toHaveBeenCalled();
    expect(component.initializeForm).toHaveBeenCalled();
    expect(mockReToolTabService.emit).toHaveBeenCalledWith('onFormComponentInit', { encodedTabIndex: 1 });
  });


  it('should show error message on onSubmit with invalid data', () => {
    component.coverForm.get('ReportedBuildingValue')?.setValue('');
    component.onSubmit();
    expect(mockReToolTabService.showErrorMessage).toHaveBeenCalled();
  });

  it('should calculate totalReportedTIV correctly', () => {
    
    spyOn(Utility, 'removeComma').and.callFake((value) => {
      if (value === undefined || value === null || value === '') return '0';
      return value.toString().replace(/,/g, '');
    });
  
    spyOn(Utility, 'commaSepratedValueForDisabledInput').and.callFake((value) => {
      return value.toString();
    });
  
    const form = component['fb'].group({
      ReportedTotalPD: ['100'],
      ReportedTotalBivalue: ['200'],
      ReportedTIV: [''], 
    });
  
    const reportedTotalPDControl = form.get('ReportedTotalPD');
    const reportedTotalBivalueControl = form.get('ReportedTotalBivalue');
    const reportedTIVControl = form.get('ReportedTIV');
  
    expect(reportedTotalPDControl).not.toBeNull();
    expect(reportedTotalBivalueControl).not.toBeNull();
    expect(reportedTIVControl).not.toBeNull();
  
    if (reportedTIVControl) {
      try {
        component['totalReportedTIV'](form);
        expect(reportedTIVControl.value).toBe('300');
      } catch (error) {
        console.error('Error during totalReportedTIV execution:', error);
      }
    } else {
      throw new Error('Form control ReportedTIV does not exist');
    }
  });
  
  it('should calculate reviewed percentages correctly for building', () => {
    const form = component['fb'].group({
      ReviewedBuilding: ['100'],
      ReportedBuildingValue: ['200'],
      ReviewedPercentageBuilding: [''],
    });
    component['calculatedPercentageReviewedBuilding'](form);
    expect(form.get('ReviewedPercentageBuilding')?.value).toBe('0.5%');
  });

  it('should calculate percentages for total TIV correctly', () => {
    const form = component['fb'].group({
      ReviewedTIV: ['300'],
      ReportedTIV: ['600'],
      ReviewedPercentageTIV: [''],
    });
    component['calculatedPercentageReviewedTIV'](form);
    expect(form.get('ReviewedPercentageTIV')?.value).toBe('0.5%');
  });

  it('should set recommended review frequency based on hazard value', () => {
    const form = component['fb'].group({
      OccupancyHighestHazardReview: ['3'], // High Hazard
      RecommendedReviewFrequency: [''],
      RecommendedAccountPercentageTIV: [''],
    });
    component['setRecommendedReviewFrequency'](form);
    expect(form.get('RecommendedReviewFrequency')?.value).toBe('12 months');
    expect(form.get('RecommendedAccountPercentageTIV')?.value).toBe('40%');
  });

  it('should serialize occupancy values correctly', () => {
    const occupancyData = {
      occupancyGroupTIV: 'GroupA',
      occupancyTypeTIV: 'TypeB',
      hazardTIV: 'HazardC',
      equipmentBreakdownTIV: 'BreakdownD',
      isHazardTIVUpdated: true,
    };
    component.occupancyData = occupancyData as any;
    const serialized = component['getOccupancyValuesSerialize'](occupancyData);
    expect(serialized).toBe(JSON.stringify(occupancyData));
  });

  it('should deserialize occupancy values correctly', () => {
    const serialized = '{"occupancyGroupTIV":"GroupA","occupancyTypeTIV":"TypeB"}';
    const deserialized = component['getOccupancyValuesDeserialize'](serialized);
    expect(deserialized.occupancyGroupTIV).toBe('GroupA');
    expect(deserialized.occupancyTypeTIV).toBe('TypeB');
  });

  it('should calculate reported total PD', () => {
    
    spyOn(Utility, 'removeComma').and.callFake((value) => {
      if (value === undefined || value === null || value === '') return '0';
      return value.toString().replace(/,/g, '');
    });
  
    spyOn(Utility, 'commaSepratedValueForDisabledInput').and.callFake((value) => {
      return value.toString();
    });
  
    const form = component['fb'].group({
      ReportedBuildingValue: ['100'],
      ReportedContentsValue: ['200'],
      ReportedTotalPD: [''], 
    });
  
    const reportedBuilding = form.get('ReportedBuildingValue');
    const reportedContents = form.get('ReportedContentsValue');
    const reportedTotalPD = form.get('ReportedTotalPD');
  
    expect(reportedBuilding).not.toBeNull();
    expect(reportedContents).not.toBeNull();
    expect(reportedTotalPD).not.toBeNull();
  
    if (reportedTotalPD) {
      try {
        component['totalReportedTIV'](form);
        expect(reportedTotalPD.value).toBe('300');
      } catch (error) {
        console.error('Error during totalReportedTIV execution:', error);
      }
    } else {
      throw new Error('Form control ReportedTIV does not exist');
    }
  });

  it('should update highlight status correctly', () => {
    const form = component['fb'].group({
      HazardTIV: [''],
      IsHazardTIVUpdated: [false],
    });
    const rowValuesMap = new Map<number, any>();
    rowValuesMap.set(0, { OccupancyTypeList: [{ value: 'Type1', dependentValue: { hazard: 'Hazard1' } }] });
    component.rowValuesMap = rowValuesMap;
    component['updateHighlight'](0, 'Type1', 'IsHazardTIVUpdated', 'HazardTIV');
    expect(form.get('IsHazardTIVUpdated')?.value).toBe(false);
  });

  it('should unsubscribe from subscriptions on ngOnDestroy', () => {
    const unsubscribeSpy = spyOn(component.subscription, 'unsubscribe');
    component.ngOnDestroy();
    expect(unsubscribeSpy).toHaveBeenCalled();
  });
});

CoverComponent > should create the component
TypeError: Cannot read properties of undefined (reading 'subscribe')
