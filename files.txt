import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { CoverCompleteReviewEmailComponent } from './cover-complete-review-email.component';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ReToolService } from '../../service/re-tool.service';
import { ReToolTabService } from '../../service/re-tool-tab.service';
import { ReactiveFormsModule } from '@angular/forms';
import { of, throwError } from 'rxjs';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatChipsModule } from '@angular/material/chips';
import { MatAutocompleteModule } from '@angular/material/autocomplete';

describe('CoverCompleteReviewEmailComponent', () => {
  let component: CoverCompleteReviewEmailComponent;
  let fixture: ComponentFixture<CoverCompleteReviewEmailComponent>;
  let mockReToolService: jasmine.SpyObj<ReToolService>;
  let mockReToolTabService: jasmine.SpyObj<ReToolTabService>;
  let dialogRefSpy: jasmine.SpyObj<MatDialogRef<CoverCompleteReviewEmailComponent>>;

  const mockDialogData = {
    title: 'Test Title',
    data: {
      underWritter: 'uw@test.com',
      ccUserMailIds: 'ccuser@test.com',
      ccMailIds: ['cc1@test.com'],
      propertyAccountId: 1,
      reviewRequestId: 2,
      accountName: 'TestAccount',
      subject: 'Subject',
      message: 'Message'
    }
  };

  beforeEach(async () => {
    mockReToolService = jasmine.createSpyObj('ReToolService', ['sendCoverCompleteMailRequest', 'getActiveUserNameAndEmail']);
    mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['showSuccessMessage', 'showErrorMessage']);
    dialogRefSpy = jasmine.createSpyObj('MatDialogRef', ['close']);

    await TestBed.configureTestingModule({
      declarations: [CoverCompleteReviewEmailComponent],
      imports: [ReactiveFormsModule, BrowserAnimationsModule, MatChipsModule, MatAutocompleteModule],
      providers: [
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService },
        { provide: MatDialogRef, useValue: dialogRefSpy },
        { provide: MAT_DIALOG_DATA, useValue: mockDialogData },
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(CoverCompleteReviewEmailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component and initialize form', () => {
    expect(component).toBeTruthy();
    expect(component.coverCompleteReviewEmailForm).toBeDefined();
    expect(component.coverCompleteReviewEmailForm.value.UnderWritter).toEqual(mockDialogData.data.underWritter);
  });

  it('should close the dialog on onClose()', () => {
    component.onClose(true);
    expect(dialogRefSpy.close).toHaveBeenCalled();
  });

  it('should add a valid CC email', () => {
    const event: any = { value: 'valid@test.com', chipInput: { clear: () => {} } };
    component.addCCEmail(event);
    expect(component.ccReceiver().includes('valid@test.com')).toBeTrue();
  });

  it('should remove a CC email', () => {
    component.ccReceiver.set(['test@company.com']);
    spyOn(component['announcer'], 'announce');
    component.removeCcEmail('test@company.com');
    expect(component.ccReceiver()).not.toContain('test@company.com');
    expect(component['announcer'].announce).toHaveBeenCalledWith('Removed test@company.com');
  });

  it('should handle selected CC email from autocomplete', () => {
    const event = { option: { value: 'auto@test.com', deselect: () => {} } } as any;
    component.selectedCCEmail(event);
    expect(component.ccReceiver()).toContain('auto@test.com');
  });

  it('should call getActiveEmail on input with 3+ chars', () => {
    mockReToolService.getActiveUserNameAndEmail.and.returnValue(of([{ email: 'test@test.com', userName: 'Test User' }]));
    component.currentMailReceiver.set('tes');
    component.getActiveEmail('tes');
    expect(mockReToolService.getActiveUserNameAndEmail).toHaveBeenCalled();
    expect(component.filteredEmails.length).toBeGreaterThan(0);
  });

  it('should save and send email when form is valid', fakeAsync(() => {
    component.coverCompleteReviewEmailForm.patchValue({
      ToEmailValue: '',
      CCEmailValue: '',
      Subject: 'Sub',
      Message: 'Msg'
    });
    component.toReceiver.set(['to@test.com']);
    component.ccReceiver.set(['cc@test.com']);
    mockReToolService.sendCoverCompleteMailRequest.and.returnValue(of(true));

    component.onSave(true);
    tick();

    expect(mockReToolService.sendCoverCompleteMailRequest).toHaveBeenCalled();
    expect(mockReToolTabService.showSuccessMessage).toHaveBeenCalled();
    expect(dialogRefSpy.close).toHaveBeenCalled();
  }));

  it('should show error if sendCoverCompleteMailRequest returns false', fakeAsync(() => {
    component.coverCompleteReviewEmailForm.patchValue({
      Subject: 'Subject',
      Message: 'Message'
    });
    component.toReceiver.set(['to@test.com']);
    component.ccReceiver.set(['cc@test.com']);
    mockReToolService.sendCoverCompleteMailRequest.and.returnValue(of(false));

    component.onSave(true);
    tick();

    expect(mockReToolTabService.showErrorMessage).toHaveBeenCalledWith(jasmine.any(String), '');
  }));

  it('should show validation error if form is invalid', () => {
    component.coverCompleteReviewEmailForm.get('Subject').setValue('');
    component.onSave(true);
    expect(mockReToolTabService.showErrorMessage).toHaveBeenCalledWith(jasmine.any(String), '');
  });
});
