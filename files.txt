import { ComponentFixture, TestBed } from '@angular/core/testing';
import { CoverComponent } from './cover.component';
import { ReactiveFormsModule, FormBuilder } from '@angular/forms';
import { ReToolService } from '../../../service/re-tool.service';
import { ReToolTabService } from '../../../service/re-tool-tab.service';
import { CommonService } from '../../../../../shared/services/common.service';
import { ReToolCalculationService } from '../../../service/re-tool-calculation-service';
import { of, Subject } from 'rxjs';

describe('CoverComponent', () => {
  let component: CoverComponent;
  let fixture: ComponentFixture<CoverComponent>;
  let reToolTabServiceMock: jasmine.SpyObj<ReToolTabService>;
  let reToolServiceMock: jasmine.SpyObj<ReToolService>;
  let commonServiceMock: jasmine.SpyObj<CommonService>;
  let reToolCalculationServiceMock: jasmine.SpyObj<ReToolCalculationService>;

  beforeEach(async () => {
    // Create mocks with spies
    reToolTabServiceMock = jasmine.createSpyObj('ReToolTabService', ['on', 'emit', 'showErrorMessage', 'actionStateChange'], { formStatus: 'VALID' });
    reToolServiceMock = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getPropertyMaster']);
    commonServiceMock = jasmine.createSpyObj('CommonService', ['checkNullOrZero']);
    reToolCalculationServiceMock = jasmine.createSpyObj('ReToolCalculationService', ['updateOverAllRating']);

    // Mocking on() to return observable
    reToolTabServiceMock.on.and.callFake((eventName: string) => {
      return of({}); // Return an empty observable or mock event data as needed
    });

    // Mocking API methods to return observable
    reToolServiceMock.getOccupancyGroup.and.returnValue(of({ occupancyGroups: [], hazard: [], equipmentBreakdown: [] }));
    reToolServiceMock.getPropertyMaster.and.returnValue(of({ interdependency: [], qualityOfSupplyChainInfo: [] }));
    commonServiceMock.checkNullOrZero.and.returnValue(0); // Default mock value

    await TestBed.configureTestingModule({
      imports: [ReactiveFormsModule],
      declarations: [CoverComponent],
      providers: [
        FormBuilder,
        { provide: ReToolService, useValue: reToolServiceMock },
        { provide: ReToolTabService, useValue: reToolTabServiceMock },
        { provide: CommonService, useValue: commonServiceMock },
        { provide: ReToolCalculationService, useValue: reToolCalculationServiceMock }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(CoverComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // Triggers ngOnInit
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  // Example for testing form initialization
  it('should initialize form', () => {
    expect(component.coverForm).toBeTruthy();
    expect(component.coverForm instanceof Object).toBeTrue();
  });
});
