it('should process excel data and merge records when matching record is found', () => {
  const jsonData = [{
    locationName: 'USA',
    locationAddress: '1 Park Avenue',
    city: 'New York',
    state: 'New York',
    country: 'United States'
  }];

  const propertyValueData = [{
    locationName: 'USA',
    locationAddress: '1 Park Avenue',
    city: 'New York',
    state: 'New York',
    country: 'United States'
  }];

  mockFindMatchingRecordKey.and.returnValue('existingKey');
  component.processExcelData(jsonData, propertyValueData);

  expect(mockFindMatchingRecordKey).toHaveBeenCalledWith(
    jasmine.any(Object),
    'USA',
    'United States'
  );

  expect(mockMergeValues).toHaveBeenCalledWith(
    jasmine.any(Object),
    'existingKey',
    jasmine.any(Object)
  );
});

--------------------

it('should create new records when no matching record is found', () => {
  mockFindMatchingRecordKey.and.returnValue(null);

  const jsonData = [{
    locationName: 'Indiana',
    locationAddress: '2 Park Avenue',
    city: 'New York',
    state: 'New York',
    country: 'United States'
  }];

  const propertyValueData = [{
    locationName: 'Texas',
    locationAddress: '3 Park Avenue',
    city: 'Houston',
    state: 'Texas',
    country: 'United States'
  }];

  component.processExcelData(jsonData, propertyValueData);

  expect(mockFindMatchingRecordKey).toHaveBeenCalled();
  expect(mockMergeValues).not.toHaveBeenCalled();
  expect(component['mergeValues']).toBeDefined();
});
-------------------------
it('should handle ULID and update existing records correctly', () => {
  const jsonData = [{
    ULId: 'ULID123',
    locationName: 'New York',
    locationAddress: '5th Avenue',
    city: 'New York',
    state: 'NY',
    country: 'United States'
  }];

  const propertyValueData = [{
    ULId: 'ULID123',
    locationName: 'New York',
    locationAddress: '5th Avenue',
    city: 'New York',
    state: 'NY',
    country: 'United States'
  }];

  mockFindMatchingRecordKey.and.returnValue('ULID123');
  component.processExcelData(jsonData, propertyValueData);

  expect(mockFindMatchingRecordKey).toHaveBeenCalledWith(
    jasmine.any(Object),
    'New York',
    'United States'
  );

  expect(mockMergeValues).toHaveBeenCalledWith(
    jasmine.any(Object),
    'ULID123',
    jasmine.any(Object)
  );
});
------------------------------------------
it('should process excel data and merge records when matching record is found', () => {
    const jsonData = [{ 
        locationName: 'USA', 
        locationAddress: '1 Park Avenue', 
        city: 'New York', 
        state: 'New York', 
        country: 'United States',
        ULId: null
    }];
    
    const propertyValueData = [{ 
        locationName: 'USA', 
        locationAddress: '1 Park Avenue', 
        city: 'New York', 
        state: 'New York', 
        country: 'United States',
        ULId: '12345'
    }];

    mockFindMatchingRecordKey.and.returnValue('existingKey');
    spyOn(component, 'mergeValues').and.callThrough();

    component.processExcelData(jsonData, propertyValueData);

    expect(mockFindMatchingRecordKey).toHaveBeenCalledWith(
        jasmine.any(Object),
        'USA',
        'United States'
    );

    expect(component.mergeValues).toHaveBeenCalledWith(
        jasmine.any(Object), 'existingKey', jasmine.any(Object)
    );
});
------------------------------------
it('should create new records when no matching record is found', () => {
    const jsonData = [{ 
        locationName: 'Indiana', 
        locationAddress: '2 Park Avenue', 
        city: 'New York', 
        state: 'New York', 
        country: 'United States',
        ULId: null
    }];

    const propertyValueData = [{ 
        locationName: 'California', 
        locationAddress: '3 Park Avenue', 
        city: 'Los Angeles', 
        state: 'California', 
        country: 'United States',
        ULId: null
    }];

    mockFindMatchingRecordKey.and.returnValue(null);
    spyOn(component, 'mergeImportedAndExistingPropertyValueData').and.callThrough();

    component.processExcelData(jsonData, propertyValueData);

    expect(mockFindMatchingRecordKey).toHaveBeenCalled();
    expect(component.mergeImportedAndExistingPropertyValueData).toHaveBeenCalled();
});
--------------------------
it('should handle ULID and update existing records correctly', () => {
    const jsonData = [{ 
        locationName: 'Texas', 
        locationAddress: '4 Park Avenue', 
        city: 'Austin', 
        state: 'Texas', 
        country: 'United States',
        ULId: '67890'
    }];

    const propertyValueData = [{ 
        locationName: 'Texas', 
        locationAddress: '4 Park Avenue', 
        city: 'Austin', 
        state: 'Texas', 
        country: 'United States',
        ULId: '67890'
    }];

    spyOn(component, 'mergeValues').and.callThrough();
    spyOn(component, 'findMatchingRecordKey').and.returnValue('existingKey');

    component.processExcelData(jsonData, propertyValueData);

    expect(component.findMatchingRecordKey).toHaveBeenCalledWith(
        jasmine.any(Object), 
        'Texas', 
        'United States'
    );

    expect(component.mergeValues).toHaveBeenCalledWith(
        jasmine.any(Object), 'existingKey', jasmine.any(Object)
    );
});


