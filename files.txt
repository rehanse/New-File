beforeEach(async () => {
  mockReToolService = jasmine.createSpyObj('ReToolService', ['getOccupancyGroup', 'getOccupancyType']);
  mockReToolTabService = jasmine.createSpyObj('ReToolTabService', ['emit', 'on', 'showErrorMessage', 'actionStateChange']);

  // Mock return value for getOccupancyGroup
  mockReToolService.getOccupancyGroup.and.returnValue(of({
    occupancyGroups: [{ text: 'Group A', value: 'A', category: 'CAT_A', defaultValue: 'Default A' }],
    hazard: [{ text: 'Hazard A', value: 'HA' }],
    equipmentBreakdown: [{ text: 'Breakdown A', value: 'BA' }]
  }));

  // Mock return value for getOccupancyType
  mockReToolService.getOccupancyType.and.returnValue(of([
    { value: 'Type A', dependentValue: { occupancyTypeCode: 'OTC', hazard: 'HA', equipmentBreakdown: 'EB' } }
  ]));

  await TestBed.configureTestingModule({
    declarations: [CoverComponent],
    imports: [ReactiveFormsModule],
    providers: [
      { provide: ReToolService, useValue: mockReToolService },
      { provide: ReToolTabService, useValue: mockReToolTabService },
      FormBuilder,
    ],
  }).compileComponents();

  fixture = TestBed.createComponent(CoverComponent);
  component = fixture.componentInstance;
  fixture.detectChanges();
});
it('should load occupancy groups and set OccupancyGroupData', () => {
  component.loadOccupancyGroups();

  // Verify that OccupancyGroupData, HazardData, and EquipmentBreakdownData are updated
  expect(component.OccupancyGroupData.length).toBe(1);
  expect(component.OccupancyGroupData[0].text).toBe('Group A');
  expect(component.HazardData.length).toBe(1);
  expect(component.HazardData[0].text).toBe('Hazard A');
  expect(component.EquipmentBreakdownData.length).toBe(1);
  expect(component.EquipmentBreakdownData[0].text).toBe('Breakdown A');
});
