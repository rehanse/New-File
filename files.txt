import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ActivityTaskReviewPopupComponent } from './activity-task-review-popup.component';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonService } from '../../../../shared/services/common.service';
import { ReToolService } from '../../service/re-tool.service';
import { ReToolTabService } from '../../service/re-tool-tab.service';
import { of } from 'rxjs';
import { NO_ERRORS_SCHEMA } from '@angular/core';

describe('ActivityTaskReviewPopupComponent', () => {
  let component: ActivityTaskReviewPopupComponent;
  let fixture: ComponentFixture<ActivityTaskReviewPopupComponent>;
  let mockDialogRef: any;
  let mockReToolService: any;
  let mockReToolTabService: any;
  let mockCommonService: any;

  const mockDialogData = {
    title: 'Test Title',
    data: {
      addNewReview: true,
      propertyAccountId: 123,
      activityTaskId: 456,
      typeOfLossEstimate: 1,
      assignedTo: 1,
      description: 'Test description',
      taskDueDate: new Date().toISOString(),
      assignedToName: 'Test User',
      assignedStatusId: 1,
      subject: 'Subject Test',
      regionId: 1,
      countryId: 2,
      statusId: 1,
      verCol: '',
      createdByUserId: 1,
      createdOnDate: new Date().toISOString()
    },
    gridRecordDetail: {}
  };

  beforeEach(async () => {
    mockDialogRef = jasmine.createSpyObj(['close']);
    mockReToolService = jasmine.createSpyObj(['AddOrEditActivityTask', 'getRiskEngineerGroupUsers']);
    mockReToolTabService = { reviewRequestId: 999 };
    mockCommonService = jasmine.createSpyObj(['getDateByTimeZone', 'userDetails', 'isRoleFromEditActivityTaskReviewer']);
    mockCommonService.getDateByTimeZone.and.callFake((date) => date);

    await TestBed.configureTestingModule({
      declarations: [ActivityTaskReviewPopupComponent],
      imports: [ReactiveFormsModule, FormsModule],
      providers: [
        { provide: MatDialogRef, useValue: mockDialogRef },
        { provide: MAT_DIALOG_DATA, useValue: mockDialogData },
        { provide: CommonService, useValue: mockCommonService },
        { provide: ReToolService, useValue: mockReToolService },
        { provide: ReToolTabService, useValue: mockReToolTabService }
      ],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents();

    fixture = TestBed.createComponent(ActivityTaskReviewPopupComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create component and initialize form', () => {
    expect(component).toBeTruthy();
    expect(component.activityTaskPopUpForm).toBeDefined();
  });

  it('should close the dialog on onClose()', () => {
    component.onClose(null);
    expect(mockDialogRef.close).toHaveBeenCalled();
  });

  it('should validate setTypeOfLossEstimate logic', () => {
    expect(component.setTypeOfLossEstimate(3, 'any')).toBeTrue();
    expect(component.setTypeOfLossEstimate(1, 'FIRE')).toBeTrue();
    expect(component.setTypeOfLossEstimate(2, 'EB')).toBeTrue();
    expect(component.setTypeOfLossEstimate(1, 'EB')).toBeFalse();
  });

  it('should return correct loss estimate value in getTypeOfLossEstimate()', () => {
    component.title = 'Review';
    component.activityTaskPopUpForm.get('TypeOfLossEstimateForFire')?.setValue(true);
    component.activityTaskPopUpForm.get('TypeOfLossEstimateForEB')?.setValue(false);
    expect(component.getTypeOfLossEstimate()).toBe(1);
  });

  it('should call setMflReviewerAssigned for unassigned', () => {
    expect(component.setMflReviewerAssigned(JSON.stringify(0))).toBeNull();
  });

  it('should call private getActivityTaskPopUpFormData method', () => {
    const formData = component['getActivityTaskPopUpFormData']();
    expect(formData.PropertyAccountId).toEqual(123);
  });

  it('should fetch risk engineer users on riskEngineerGroupChange', () => {
    mockReToolService.getRiskEngineerGroupUsers.and.returnValue(of([{ userId: 1, userName: 'John' }]));
    const result = component.riskEngineerGroupChange('query');
    expect(result).toEqual([{ userId: 1, userName: 'John' }]);
  });

  it('should assign user and update form on riskEngineerUserSelected', () => {
    component.riskEngineerUserSelected({ userId: 7 });
    expect(component.selectedUserVal).toEqual(7);
    expect(component.activityTaskPopUpForm.get('AssignedStatusId')?.value).toBe(1);
  });

  it('should clear user and update form on riskEngineerUserCleared', () => {
    component.riskEngineerUserCleared();
    expect(component.selectedUserVal).toBeNull();
    expect(component.activityTaskPopUpForm.get('AssignedStatusId')?.value).toBe(0);
  });

  it('should adjust textarea height', () => {
    const event = { target: document.createElement('textarea') } as unknown as Event;
    (event.target as HTMLTextAreaElement).value = 'Test\nLine\nValue';
    component.adjustHeight(event);
    expect((event.target as HTMLTextAreaElement).style.height).toContain('px');
  });

  it('should run onSave and close on valid form', () => {
    component.activityTaskPopUpForm.patchValue({
      TypeOfLossEstimateForFire: true,
      TypeOfLossEstimateForEB: false,
      TaskDueDate: new Date()
    });

    spyOn(component as any, 'getActivityTaskPopUpFormData').and.callThrough();
    mockReToolService.AddOrEditActivityTask.and.returnValue(of(true));

    component.onSave(null);
    expect(mockDialogRef.close).toHaveBeenCalled();
  });
});
-------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ActivityTaskReviewPopupComponent } from './activity-task-review-popup.component';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonService } from 'src/app/shared/services/common.service';
import { ReToolService } from '../../service/re-tool.service';
import { ReToolTabService } from '../../service/re-tool-tab.service';
import { of } from 'rxjs';
import { PopupRequest } from '../../models/popup-request';
import { RiskEngineerGroupUserResponseModel } from '../../models/risk-engineer-group-users-response-model';
import { AcivityTaskEnum } from '../../models/activity-assigned-enum';
import { ReToolConstants } from '../../constants/re-tool.constants';

describe('ActivityTaskReviewPopupComponent', () => {
  let component: ActivityTaskReviewPopupComponent;
  let fixture: ComponentFixture<ActivityTaskReviewPopupComponent>;
  let dialogRef: jasmine.SpyObj<MatDialogRef<ActivityTaskReviewPopupComponent>>;
  let reToolService: jasmine.SpyObj<ReToolService>;
  let reToolTabService: ReToolTabService;
  let commonService: jasmine.SpyObj<CommonService>;

  const mockRequest: PopupRequest = {
    title: 'Test Subject',
    data: {
      addNewReview: true,
      propertyAccountId: 1,
      activityTaskId: 2,
      typeOfLossEstimate: 1,
      description: 'Initial desc',
      assignedTo: 3,
      assignedStatusId: 0,
      assignedToName: 'Reviewer',
      regionId: 101,
      countryId: 102,
      taskDueDate: new Date().toISOString(),
      subject: 'Subject',
      statusId: 1,
      verCol: '',
      createdByUserId: 5,
      createdOnDate: new Date()
    },
    gridRecordDetail: {
      rowIndex: 0,
      columnName: 'Test',
      rowPKId: 123,
      value: 'value'
    }
  };

  beforeEach(async () => {
    dialogRef = jasmine.createSpyObj('MatDialogRef', ['close']);
    reToolService = jasmine.createSpyObj('ReToolService', ['AddOrEditActivityTask', 'getRiskEngineerGroupUsers']);
    reToolTabService = { reviewRequestId: 10 } as ReToolTabService;
    commonService = jasmine.createSpyObj('CommonService', ['getDateByTimeZone', 'isRoleFromEditActivityTaskReviewer'], {
      userDetails: { roleId: 1, regionId: 101, countryId: 102 }
    });
    commonService.getDateByTimeZone.and.callFake(date => new Date(date));

    await TestBed.configureTestingModule({
      declarations: [ActivityTaskReviewPopupComponent],
      imports: [ReactiveFormsModule, FormsModule],
      providers: [
        { provide: MatDialogRef, useValue: dialogRef },
        { provide: MAT_DIALOG_DATA, useValue: mockRequest },
        { provide: CommonService, useValue: commonService },
        { provide: ReToolService, useValue: reToolService },
        { provide: ReToolTabService, useValue: reToolTabService }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(ActivityTaskReviewPopupComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create component and initialize form', () => {
    expect(component).toBeTruthy();
    expect(component.activityTaskPopUpForm).toBeDefined();
  });

  it('should call onClose and close dialog', () => {
    component.onClose(null);
    expect(dialogRef.close).toHaveBeenCalled();
  });

  it('should calculate TypeOfLossEstimate value and set subject', () => {
    component.title = 'Test Title';
    component.activityTaskPopUpForm.get('TypeOfLossEstimateForFire')?.setValue(true);
    component.activityTaskPopUpForm.get('TypeOfLossEstimateForEB')?.setValue(false);

    const result = component.getTypeOfLossEstimate();
    expect(result).toBe(1);
    expect(component.subjectValue).toContain(ReToolConstants.fireEstimateLoss);
  });

  it('should return form data from private method getActivityTaskPopUpFormData', () => {
    const formData = component['getActivityTaskPopUpFormData']();
    expect(formData.PropertyAccountId).toBe(1);
  });

  it('should select risk engineer user and update status', () => {
    component.riskEngineerUserSelected({ userId: 9 });
    expect(component.selectedUserVal).toBe(9);
    expect(component.activityTaskPopUpForm.get('AssignedStatusId')?.value).toBe(AcivityTaskEnum.Assigned);
  });

  it('should clear selected risk engineer user', () => {
    component.riskEngineerUserCleared();
    expect(component.selectedUserVal).toBeNull();
    expect(component.activityTaskPopUpForm.get('AssignedStatusId')?.value).toBe(AcivityTaskEnum.Unassigned);
  });

  it('should fetch and set risk engineer group data', () => {
    const mockUsers: RiskEngineerGroupUserResponseModel[] = [{ userId: 1, userName: 'John' }];
    reToolService.getRiskEngineerGroupUsers.and.returnValue(of(mockUsers));

    const result = component.riskEngineerGroupChange('search');
    expect(result).toEqual(mockUsers);
  });

  it('should call onSave and close dialog when valid', () => {
    reToolService.AddOrEditActivityTask.and.returnValue(of(true));
    component.activityTaskPopUpForm.patchValue({
      TypeOfLossEstimateForFire: true,
      TaskDueDate: new Date()
    });

    component.onSave(null);
    expect(dialogRef.close).toHaveBeenCalled();
  });

  it('should update reviewer field enabled/disabled based on validation', () => {
    commonService.isRoleFromEditActivityTaskReviewer.and.returnValue(false);
    component['isNewReviewAdd'] = false;
    component.SetDisableValidationOnReviewer();

    expect(component.activityTaskPopUpForm.get('AssignedToName')?.disabled).toBeTrue();
  });
});
