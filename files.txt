// First, join PropertyAccount with PropertyLocation
var propertyLocationJoin = from pa in _applicationDbContext.PropertyAccounts
                          join pl in _applicationDbContext.PropertyLocations
                          on pa.PropertyAccountId equals pl.PropertyAccountId
                          select new { pa, pl };

// Join with PropertyLocationAddressMaps
var locationAddressMapJoin = from plj in propertyLocationJoin
                            join plam in _applicationDbContext.PropertyLocationAddressMaps
                            on plj.pl.PropertyLocationId equals plam.PropertyLocationId
                            select new { plj.pa, plj.pl, plam };

// Join with LocationAddressesMaps
var addressMapJoin = from lamj in locationAddressMapJoin
                    join lam in _applicationDbContext.LocationAddressesMaps
                    on lamj.plam.LocationAddressMapId equals lam.LocationAddressMapId
                    select new { lamj.pa, lamj.pl, lamj.plam, lam };

// Join with Location
var locationJoin = from amj in addressMapJoin
                  join l in _applicationDbContext.Locations
                  on amj.lam.LocationId equals l.LocationId
                  select new { amj.pa, amj.pl, amj.plam, amj.lam, l };

// Join with Address
var addressJoin = from lj in locationJoin
                 join a in _applicationDbContext.Addresses
                 on lj.lam.AddressId equals a.AddressId
                 select new { lj.pa, lj.pl, lj.plam, lj.lam, lj.l, a };

// Left join with PropertyFireLocations
var fireLocationJoin = from aj in addressJoin
                      join pfl in _applicationDbContext.PropertyFireLocations
                      on aj.pl.PropertyLocationId equals pfl.PropertyLocationId into pflJoin
                      from pfl in pflJoin.DefaultIfEmpty()
                      select new { aj.pa, aj.pl, aj.plam, aj.lam, aj.l, aj.a, pfl };

// Left join with PropertyEquipmentLocations
var equipmentLocationJoin = from flj in fireLocationJoin
                           join pel in _applicationDbContext.PropertyEquipmentLocations
                           on flj.pl.PropertyLocationId equals pel.PropertyLocationId into pelJoin
                           from pel in pelJoin.DefaultIfEmpty()
                           select new { flj.pa, flj.pl, flj.plam, flj.lam, flj.l, flj.a, flj.pfl, pel };

// Final where and select
var result = await equipmentLocationJoin
    .Where(x => x.pa.StatusId == 1 &&
                x.pa.ReviewRequestId == reviewRequestId &&
                x.pl.StatusId == 1 &&
                x.l.StatusId == 1 &&
                x.a.StatusId == 1)
    .Select(x => new PropertyLocationResponse
    {
        PropertyLocationId = x.pl.PropertyLocationId,
        LocationId = x.l.LocationId,
        CountryId = x.l.CountryId,
        PropertyAccountId = x.pa.PropertyAccountId,
        BuildingValue = x.pl.BuildingValue,
        EquipmentValue = x.pl.EquipmentValue,
        // map rest of the fields as needed...
        MaximumForeseeableLoss = ((x.pfl?.MaximumLossPropertyDamage ?? 0.0m)
                                     + (x.pfl?.MaximumLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pfl?.MaximumLossBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.MaximumLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.MaximumLossOtherTimeElement ?? 0.0m)),
        ProbableMaximumLoss = ((x.pfl?.ProbableLossPropertyDamage ?? 0.0m)
                                     + (x.pfl?.ProbableLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pfl?.ProbableLossBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.ProbableLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.ProbableLossOtherTimeElement ?? 0.0m)),
        EBProbableMaximumLoss = ((x.pel?.ProbableLossPropertyDamage ?? 0.0m)
                                     + (x.pel?.ProbableLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pel?.ProbableLossBusinessInterruption ?? 0.0m)
                                     + (x.pel?.ProbableLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pel?.ProbableLossOtherTimeElement ?? 0.0m)),
        // continue mapping...
    })
    .OrderBy(p => p.PropertyLocationId)
    .AsNoTracking()
    .ToListAsync();
-----------------------

var result = await equipmentLocationJoin
    .Where(x => x.pa.StatusId == 1 &&
                x.pa.ReviewRequestId == reviewRequestId &&
                x.pl.StatusId == 1 &&
                x.l.StatusId == 1 &&
                x.a.StatusId == 1)
    .Select(x => new PropertyLocationResponse
    {
        PropertyLocationId = x.pl.PropertyLocationId,
        LocationId = x.l.LocationId,
        CountryId = x.l.CountryId,
        PropertyAccountId = x.pa.PropertyAccountId,
        BuildingValue = x.pl.BuildingValue,
        EquipmentValue = x.pl.EquipmentValue,
        InventoryValue = x.pl.InventoryValue,
        OtherValue = x.pl.OtherValue,
        BusinessInterruptionValue = x.pl.BusinessInterruptionValue,
        BusinessInterruptionOtherValue = x.pl.BusinessInterruptionOtherValue,
        IndemnityPeriod = x.pl.IndemnityPeriod,
        PayrollValue = x.pl.PayrollValue,
        PayrollDayValue = x.pl.PayrollDayValue,
        OccupancyGroup = x.pl.OccupancyGroup,
        OccupancyType = x.pl.OccupancyType,
        OccupancyCode = x.pl.OccupancyCode,
        Hazard = x.pl.Hazard,
        IsHazardUpdated = x.pl.IsHazardUpdated,
        EquipmentBreakdown = x.pl.EquipmentBreakdown,
        IsEquipmentBreakdownUpdated = x.pl.IsEquipmentBreakdownUpdated,
        GroupBuildingArea = x.pl.GroupBuildingArea,
        BuildingStatus = x.pl.BuildingStatus,
        Nonthermal = x.pl.Nonthermal,
        Theft = x.pl.Theft,
        CommodityDescription = x.pl.CommodityDescription,
        AutomaticSprinklersPercentage = x.pl.AutomaticSprinklersPercentage,
        AutomaticSprinklersNeededPercentage = x.pl.AutomaticSprinklersNeededPercentage,
        HumanElementCalculated = x.pl.HumanElementCalculated,
        HumanElementUpdated = x.pl.HumanElementUpdated,
        HumanElementUpdatedComment = x.pl.HumanElementUpdatedComment,
        ConstructionCalculated = x.pl.ConstructionCalculated,
        ConstructionUpdated = x.pl.ConstructionUpdated,
        RiskFactor = x.pl.RiskFactor,
        ConstructionUpdatedComment = x.pl.ConstructionUpdatedComment,
        ConstructionHazards = x.pl.ConstructionHazards,
        ConstructionHazardsComment = x.pl.ConstructionHazardsComment,
        DetectionSecurity = x.pl.DetectionSecurity,
        DetectionSecurityComment = x.pl.DetectionSecurityComment,
        AutomaticSprinklers = x.pl.AutomaticSprinklers,
        AutomaticSprinklersComment = x.pl.AutomaticSprinklersComment,
        FireWaterSupply = x.pl.FireWaterSupply,
        FireWaterSupplyComment = x.pl.FireWaterSupplyComment,
        FireManualResponse = x.pl.FireManualResponse,
        FireManualResponseComment = x.pl.FireManualResponseComment,
        SpecialHazards = x.pl.SpecialHazards,
        SpecialHazardsComment = x.pl.SpecialHazardsComment,
        EquipmentHazards = x.pl.EquipmentHazards,
        EquipmentHazardsComment = x.pl.EquipmentHazardsComment,
        ExternalExposures = x.pl.ExternalExposures,
        ExternalExposuresComment = x.pl.ExternalExposuresComment,
        BusinessInterruptionCalculated = x.pl.BusinessInterruptionCalculated,
        BusinessInterruptionUpdated = x.pl.BusinessInterruptionUpdated,
        BusinessInterruptionUpdatedComment = x.pl.BusinessInterruptionUpdatedComment,
        PropertyDamageIndexCalculated = x.pl.PropertyDamageIndexCalculated,
        PropertyDamageIndexUpdated = x.pl.PropertyDamageIndexUpdated,
        PropertyDamageIndexPrevious = x.pl.PropertyDamageIndexPrevious,
        PropertyDamageIndexAdjusted = x.pl.PropertyDamageIndexAdjusted,
        PropertyDamageIndexAdjustedComment = x.pl.PropertyDamageIndexAdjustedComment,
        ConfidenceIndex = x.pl.ConfidenceIndex,
        LossPreventionSource = x.pl.LossPreventionSource,
        LossPreventionDate = x.pl.LossPreventionDate,
        LossPreventionComments = x.pl.LossPreventionComments,
        StatusId = x.pl.StatusId,
        VerCol = x.pl.VerCol,
        CreatedOnDate = x.pl.CreatedOnDate,
        CreatedByUserId = x.pl.CreatedByUserId,
        LocationName = x.l.LocationName,
        Address = x.a.AddressName,
        City = x.a.City!,
        StateProvince = x.a.State!,
        Country = x.a.Country.CountryName,
        CurrencyId = x.pa.Currency,
        UnitId = x.pa.Unit,
        PropertyLocationAddressMapId = x.plam.PropertyLocationAddressMapId,
        LocationAddressMapId = x.lam.LocationAddressMapId,
        TimeElementExcluded = x.pa.TimeElementExcluded,
        MaximumForeseeableLoss = ((x.pfl?.MaximumLossPropertyDamage ?? 0.0m)
                                     + (x.pfl?.MaximumLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pfl?.MaximumLossBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.MaximumLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.MaximumLossOtherTimeElement ?? 0.0m)),
        ProbableMaximumLoss = ((x.pfl?.ProbableLossPropertyDamage ?? 0.0m)
                                     + (x.pfl?.ProbableLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pfl?.ProbableLossBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.ProbableLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.ProbableLossOtherTimeElement ?? 0.0m)),
        NormalLossExpectancy = ((x.pfl?.NormalLossPropertyDamage ?? 0.0m)
                                     + (x.pfl?.NormalLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pfl?.NormalLossBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.NormalLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pfl?.NormalLossOtherTimeElement ?? 0.0m)),
        EBProbableMaximumLoss = ((x.pel?.ProbableLossPropertyDamage ?? 0.0m)
                                     + (x.pel?.ProbableLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pel?.ProbableLossBusinessInterruption ?? 0.0m)
                                     + (x.pel?.ProbableLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pel?.ProbableLossOtherTimeElement ?? 0.0m)),
        EBMaximumForeseeableLoss = ((x.pel?.MaximumLossPropertyDamage ?? 0.0m)
                                     + (x.pel?.MaximumLossOtherPropertyDamage ?? 0.0m)
                                     + (x.pel?.MaximumLossBusinessInterruption ?? 0.0m)
                                     + (x.pel?.MaximumLossInterBusinessInterruption ?? 0.0m)
                                     + (x.pel?.MaximumLossOtherTimeElement ?? 0.0m)),
        ReportedBuildingValue = x.pa.ReportedBuildingValue,
        ReportedContentsValue = x.pa.ReportedContentsValue,
        ReportedTotalBIValue = x.pa.ReportedTotalBivalue
    })
    .OrderBy(p => p.PropertyLocationId)
    .AsNoTracking()
    .ToListAsync();
---------------------------------

var result = await _applicationDbContext.PropertyAccounts
    .Join(_applicationDbContext.PropertyLocations,
        pa => pa.PropertyAccountId,
        pl => pl.PropertyAccountId,
        (pa, pl) => new { pa, pl })
    .Join(_applicationDbContext.PropertyLocationAddressMaps,
        combined => combined.pl.PropertyLocationId,
        plam => plam.PropertyLocationId,
        (combined, plam) => new { combined.pa, combined.pl, plam })
    .Join(_applicationDbContext.LocationAddressesMaps,
        combined => combined.plam.LocationAddressMapId,
        lam => lam.LocationAddressMapId,
        (combined, lam) => new { combined.pa, combined.pl, combined.plam, lam })
    .Join(_applicationDbContext.Locations,
        combined => combined.lam.LocationId,
        loc => loc.LocationId,
        (combined, loc) => new { combined.pa, combined.pl, combined.plam, combined.lam, loc })
    .Join(_applicationDbContext.Addresses,
        combined => combined.lam.AddressId,
        addr => addr.AddressId,
        (combined, addr) => new { combined.pa, combined.pl, combined.plam, combined.lam, combined.loc, addr })

    // Left Join for PropertyFireLocations
    .GroupJoin(_applicationDbContext.PropertyFireLocations,
        combined => combined.pl.PropertyLocationId,
        pfl => pfl.PropertyLocationId,
        (combined, pfl) => new { combined, pfl })
    .SelectMany(x => x.pfl.DefaultIfEmpty(), (x, pfl) => new { x.combined.pa, x.combined.pl, x.combined.plam, x.combined.lam, x.combined.loc, x.combined.addr, pfl })

    // Left Join for PropertyEquipmentLocations
    .GroupJoin(_applicationDbContext.PropertyEquipmentLocations,
        combined => combined.pl.PropertyLocationId,
        pel => pel.PropertyLocationId,
        (combined, pel) => new { combined, pel })
    .SelectMany(x => x.pel.DefaultIfEmpty(), (x, pel) => new { x.combined.pa, x.combined.pl, x.combined.plam, x.combined.lam, x.combined.loc, x.combined.addr, x.combined.pfl, pel })

    // Filtering
    .Where(x =>
        x.pa.StatusId == 1 &&
        x.pa.ReviewRequestId == reviewRequestId &&
        x.pl.StatusId == 1 &&
        x.loc.StatusId == 1 &&
        x.addr.StatusId == 1)

    // Final Projection
    .Select(x => new PropertyLocationResponse
    {
        PropertyLocationId = x.pl.PropertyLocationId,
        LocationId = x.loc.LocationId,
        CountryId = x.loc.CountryId,
        PropertyAccountId = x.pa.PropertyAccountId,
        BuildingValue = x.pl.BuildingValue,
        EquipmentValue = x.pl.EquipmentValue,
        InventoryValue = x.pl.InventoryValue,
        OtherValue = x.pl.OtherValue,
        BusinessInterruptionValue = x.pl.BusinessInterruptionValue,
        BusinessInterruptionOtherValue = x.pl.BusinessInterruptionOtherValue,
        IndemnityPeriod = x.pl.IndemnityPeriod,
        PayrollValue = x.pl.PayrollValue,
        PayrollDayValue = x.pl.PayrollDayValue,
        OccupancyGroup = x.pl.OccupancyGroup,
        OccupancyType = x.pl.OccupancyType,
        OccupancyCode = x.pl.OccupancyCode,
        Hazard = x.pl.Hazard,
        IsHazardUpdated = x.pl.IsHazardUpdated,
        EquipmentBreakdown = x.pl.EquipmentBreakdown,
        IsEquipmentBreakdownUpdated = x.pl.IsEquipmentBreakdownUpdated,
        GroupBuildingArea = x.pl.GroupBuildingArea,
        BuildingStatus = x.pl.BuildingStatus,
        Nonthermal = x.pl.Nonthermal,
        Theft = x.pl.Theft,
        CommodityDescription = x.pl.CommodityDescription,
        AutomaticSprinklersPercentage = x.pl.AutomaticSprinklersPercentage,
        AutomaticSprinklersNeededPercentage = x.pl.AutomaticSprinklersNeededPercentage,
        HumanElementCalculated = x.pl.HumanElementCalculated,
        HumanElementUpdated = x.pl.HumanElementUpdated,
        HumanElementUpdatedComment = x.pl.HumanElementUpdatedComment,
        ConstructionCalculated = x.pl.ConstructionCalculated,
        ConstructionUpdated = x.pl.ConstructionUpdated,
        RiskFactor = x.pl.RiskFactor,
        ConstructionUpdatedComment = x.pl.ConstructionUpdatedComment,
        ConstructionHazards = x.pl.ConstructionHazards,
        ConstructionHazardsComment = x.pl.ConstructionHazardsComment,
        DetectionSecurity = x.pl.DetectionSecurity,
        DetectionSecurityComment = x.pl.DetectionSecurityComment,
        AutomaticSprinklers = x.pl.AutomaticSprinklers,
        AutomaticSprinklersComment = x.pl.AutomaticSprinklersComment,
        FireWaterSupply = x.pl.FireWaterSupply,
        FireWaterSupplyComment = x.pl.FireWaterSupplyComment,
        FireManualResponse = x.pl.FireManualResponse,
        FireManualResponseComment = x.pl.FireManualResponseComment,
        SpecialHazards = x.pl.SpecialHazards,
        SpecialHazardsComment = x.pl.SpecialHazardsComment,
        EquipmentHazards = x.pl.EquipmentHazards,
        EquipmentHazardsComment = x.pl.EquipmentHazardsComment,
        ExternalExposures = x.pl.ExternalExposures,
        ExternalExposuresComment = x.pl.ExternalExposuresComment,
        BusinessInterruptionCalculated = x.pl.BusinessInterruptionCalculated,
        BusinessInterruptionUpdated = x.pl.BusinessInterruptionUpdated,
        BusinessInterruptionUpdatedComment = x.pl.BusinessInterruptionUpdatedComment,
        PropertyDamageIndexCalculated = x.pl.PropertyDamageIndexCalculated,
        PropertyDamageIndexUpdated = x.pl.PropertyDamageIndexUpdated,
        PropertyDamageIndexPrevious = x.pl.PropertyDamageIndexPrevious,
        PropertyDamageIndexAdjusted = x.pl.PropertyDamageIndexAdjusted,
        PropertyDamageIndexAdjustedComment = x.pl.PropertyDamageIndexAdjustedComment,
        ConfidenceIndex = x.pl.ConfidenceIndex,
        LossPreventionSource = x.pl.LossPreventionSource,
        LossPreventionDate = x.pl.LossPreventionDate,
        LossPreventionComments = x.pl.LossPreventionComments,
        StatusId = x.pl.StatusId,
        VerCol = x.pl.VerCol,
        CreatedOnDate = x.pl.CreatedOnDate,
        CreatedByUserId = x.pl.CreatedByUserId,
        LocationName = x.loc.LocationName,
        Address = x.addr.AddressName,
        City = x.addr.City!,
        StateProvince = x.addr.State!,
        Country = x.addr.Country.CountryName,
        CurrencyId = x.pa.Currency,
        UnitId = x.pa.Unit,
        PropertyLocationAddressMapId = x.plam.PropertyLocationAddressMapId,
        LocationAddressMapId = x.lam.LocationAddressMapId,
        TimeElementExcluded = x.pa.TimeElementExcluded,
        MaximumForeseeableLoss = ((x.pfl?.MaximumLossPropertyDamage ?? 0.0m) + (x.pfl?.MaximumLossOtherPropertyDamage ?? 0.0m) + (x.pfl?.MaximumLossBusinessInterruption ?? 0.0m) + (x.pfl?.MaximumLossInterBusinessInterruption ?? 0.0m) + (x.pfl?.MaximumLossOtherTimeElement ?? 0.0m)),
        ProbableMaximumLoss = ((x.pfl?.ProbableLossPropertyDamage ?? 0.0m) + (x.pfl?.ProbableLossOtherPropertyDamage ?? 0.0m) + (x.pfl?.ProbableLossBusinessInterruption ?? 0.0m) + (x.pfl?.ProbableLossInterBusinessInterruption ?? 0.0m) + (x.pfl?.ProbableLossOtherTimeElement ?? 0.0m)),
        EBMaximumForeseeableLoss = ((x.pel?.MaximumLossPropertyDamage ?? 0.0m) + (x.pel?.MaximumLossOtherPropertyDamage ?? 0.0m) + (x.pel?.MaximumLossBusinessInterruption ?? 0.0m) + (x.pel?.MaximumLossInterBusinessInterruption ?? 0.0m) + (x.pel?.MaximumLossOtherTimeElement ?? 0.0m)),
        EBProbableMaximumLoss = ((x.pel?.ProbableLossPropertyDamage ?? 0.0m) + (x.pel?.ProbableLossOtherPropertyDamage ?? 0.0m) + (x.pel?.ProbableLossBusinessInterruption ?? 0.0m))
    }).ToListAsync();
