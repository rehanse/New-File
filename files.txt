[Fact]
public async Task Handle_ShouldReturnSuccess_WhenValidDataIsProvided()
{
    // Arrange
    var request = new ImportLocationCommand
    {
        PropertyLocationAddresses = new List<ImportPropertyLocationRequest>
        {
            new ImportPropertyLocationRequest { Country = "ValidCountry", LocationName = "TestLocation", LocationAddress = "TestAddress" }
        }
    };

    _mockQueryRepository.Setup(repo => repo.GetCountriesByName(It.IsAny<List<string>>()))
        .ReturnsAsync(new Dictionary<short, string> { { 1, "ValidCountry" } });

    _mockQueryRepository.Setup(repo => repo.GetExistingULIds(It.IsAny<List<(int, short)>>()))
        .ReturnsAsync(new List<string> { "001-12345" });

    _mockQueryRepository.Setup(repo => repo.GetExistingUAIds(It.IsAny<List<(int, short)>>()))
        .ReturnsAsync(new List<string> { "002-56789" });

    // âœ… Fix: Ensure GetExistingLocationAddressesCombinations() never returns null
    _mockQueryRepository.Setup(repo => repo.GetExistingLocationAddressesCombinations(It.IsAny<Expression<Func<Location, bool>>>()))
        .ReturnsAsync(new List<ImportLocationAddressMappingRequest>()); 

    _mockQueryRepository.Setup(repo => repo.GetExistingLocationAddressesCombinations(It.IsAny<Expression<Func<Address, bool>>>()))
        .ReturnsAsync(new List<ImportLocationAddressMappingRequest>());

    _mockCommandRepository.Setup(repo => repo.AddLocationAndMappings(It.IsAny<List<ImportLocationAddressMappingRequest>>()))
        .ReturnsAsync(1);

    // Act
    var response = await _handler.Handle(request, CancellationToken.None);

    // Assert
    Assert.False(response.IsError);
    Assert.NotNull(response.Data);
}
