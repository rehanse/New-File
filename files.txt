it('should open human element popup on human element cell click and update human element calculated value in human element column', () => {
    // Mock popup response with correct structure
    const popupResponse = {
        data: {
            humanElementCalculated: 3,
            humanElementUpdated: 0.0
        }
    };

    // Mock column event structure
    const mockPopupColumnEvent = {
        column: {
            field: 'HumanElementCalculated'
        },
        rowIndex: 0
    };

    // Mock cell data with correct properties
    const mockCellData = {
        value: {
            HumanElementCalculated: 0.0,
            HumanElementUpdated: 0.0,
            HumanElementUpdatedComment: ''
        }
    };

    // Spy on dialog open and return mock popup response
    dialogSpy.open.and.returnValue({
        afterClosed: () => of(popupResponse)
    } as any);

    // Call the component method
    component.openPopupOnCellClick(mockPopupColumnEvent as any, mockCellData, '');

    // Verify dialog open was called
    expect(dialogSpy.open).toHaveBeenCalled();

    // Validate the configuration used for dialog open
    const dialogConfig: MatDialogConfig<any> = dialogSpy.open.calls.mostRecent().args[1];
    expect(dialogConfig.data.title).toBe('Property/Human Element Risk Factor Calculator');
    expect(dialogConfig.data.data.humanElementCalculated).toBe(0);

    // Ensure the form array exists and has correct values
    const row = component['getFormArray']().at(0) as FormGroup;
    expect(row.get('HumanElementDisplayValue')?.value).toBe('3.0');
});
